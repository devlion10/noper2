<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.go.seoul.noper2.repository.UnlicensedBuildingManagementRepository">

    <select id="mngAdminstrBld" parameterType="String" resultType="LedgerDTO">
        SELECT DISTINCT HJDONG_CD HJDCD, HJDONG_NM HNAM
        FROM CMP_BJDONG_MGM
        WHERE SIGUNGU_CD = #{gmskk}
        AND HJDONG_CD &lt;&gt;'000'
        ORDER BY HJDONG_NM
    </select>
    <!-- 대장리스트 -->
    <select id="findLedgrtList" parameterType="LedgerDTO" resultType="LedgerDTO">
        SELECT ROW_NUMBER() OVER(ORDER BY T.GMSEQCO, T.GMJNAME ASC) RN,
               T.*
        FROM ( SELECT
        ROW_NUMBER() OVER(ORDER BY A.GMSEQCO, B.GMJNAME ASC) RN2,
        COALESCE(A.NEW_ADDR1, '-') NEW_ADDR1,
        COALESCE(TRIM(BOTH ' ' FROM NVL2(A.NEW_ADDR2, A.NEW_ADDR2,
             DECODE(A.GMHJDCD, '', F_BJD_NAME(A.GMSKKCD, A.GMBJDCD) || ' ' || A.GMCBUH || DECODE(A.GMCJI, '', '', '-' || A.GMCJI),
             F_BJDNAME(A.GMSKKCD, A.GMBJDCD, A.GMHJDCD) || ' ' || A.GMCBUH ||
             DECODE(A.GMCJI, '', '', '-' || A.GMCJI)))), '-') AS NEW_ADDR2,
        TRIM(BOTH ' ' FROM DECODE(D.HJDONG_NM, NULL, ' ', D.HJDONG_NM)) AS HJDONGNM,
        TRIM(BOTH ' ' FROM A.NA_ROAD_NM) AS NA_ROAD_NM,
        NVL(F_CDNAME(87, A.GMCSAH), '-') AS GMCSAH_GB,
        A.GMSKK,
        A.GMDJGB,
        A.GMSEQCO,
        A.GMSKK||'-'||DECODE(A.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||A.GMSEQCO GMBUNHO,
        SUBSTR(DECODE(f_group_gzjcount(A.GMSKK,A.GMDJGB,A.GMSEQCO),0,'없음',1,B.GMJNAME,B.GMJNAME||' 외'||TO_CHAR(f_group_gzjcount(A.GMSKK,A.GMDJGB,A.GMSEQCO)-1)||'명'),1,40) GMJNAME,
        --B.GMJNAME GMJNAME,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(B.GMJJUMIN))) FROM dual WHERE B.GMJJUMIN IS NOT NULL) AS GMJJUMIN,
        COALESCE(A.GMGZCD, '-') GMGZCD,
        A.GMYD,
        A.GMGUNP,
        COALESCE(A.GMGUNIL, '-') GMGUNIL,
        DECODE(A.GMFOORS,'','',A.GMFOORS||'층') GMFOORS,
        A.TOJIMJ,
        decode(nvl(A.TOJIMUNJUK,0),0,nvl(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK) as TOJIMUNJUK,
        decode(nvl(A.GMMUNJUK,0),0,nvl(A.GMGUNP,0)*3.3058,A.GMMUNJUK) as GMMUNJUK,
        TRIM(BOTH ' ' FROM A.NA_ROAD_NM),
        TRIM(BOTH ' ' FROM A.NA_MAIN_BUN),
        TRIM(BOTH ' ' FROM A.NA_SUB_BUN)
        FROM
        NOPER_MASTER A, CMP_BJDONG_MGM D,
        <if test='gmjname!=null and !gmjname.equals("")'>
            NOPER_OWNER B
        </if>
        <if test='gmjname ==null or gmjname.equals("")'>
            (SELECT * FROM NOPER_OWNER WHERE GMJILNO(+) = 1 ) B
        </if>

        WHERE B.DELETE_AT(+)='N'
        AND A.GMSKK = B.GMSKK(+)
        AND A.GMDJGB = B.GMDJGB(+)
        AND A.GMSEQCO = B.GMSEQCO(+)
        AND (A.DEGB IS NULL OR A.DEGB = 'N' OR A.DEGB = 'C')
        AND D.HJDONG_CD(+) = A.GMHJDCD
        AND D.SIGUNGU_CD(+) = A.GMSKK
        AND D.BJDONG_CD(+) = A.GMBJDCD

        <if test='gmskk!=null and !gmskk.equals("")'>
            AND A.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND A.GMDJGB = #{gmdjgb}
        </if>
        <choose>
            <when test='gmseqco.equals("") and !gmseqco2.equals("")'>
                <![CDATA[ AND A.GMSEQCO <= #{gmseqco2} ]]>
            </when>
            <when test='!gmseqco.equals("") and gmseqco2.equals("")'>
                <![CDATA[ AND A.GMSEQCO = #{gmseqco} ]]>
            </when>
            <when test='!gmseqco.equals("") and !gmseqco2.equals("")'>
                <![CDATA[ AND A.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2} ]]>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        <if test='daejang!=null and !daejang.equals("")'>
            AND A.DAEJANG = #{daejang}
        </if>
        <if test='gmjname!=null and !gmjname.equals("")'>
            AND A.GMJNAME = #{gmjname}
        </if>
        <if test='tojisg!=null and !tojisg.equals("")'>
            AND A.TOJISG = #{tojisg}
        </if>
        <if test='gmyd!=null and !gmyd.equals("")'>
            AND A.GMYD = #{gmyd}
        </if>
        <if test=' gmgunil1!=null and !gmgunil1.equals("")'>
            <![CDATA[ AND A.GMGUNIL >= #{gmgunil1} ]]>
        </if>
        <if test=' gmgunil2!=null and !gmgunil2.equals("")'>
            <![CDATA[ AND A.GMGUNIL <= #{gmgunil2} ]]>
        </if>
        <if test=' gmhjdcd!=null and !gmhjdcd.equals("")'>
            AND A.GMHJDCD = #{gmhjdcd}
        </if>
        <if test=' gmcsah!=null and !gmcsah.equals("")'>
            AND A.GMCSAH = #{gmcsah}
        </if>
        <if test=' gmcbuh!=null and !gmcbuh.equals("")'>
            AND A.GMCBUH = #{gmcbuh}
        </if>
        <if test=' gmcji!=null and !gmcji.equals("")'>
            AND A.GMCJI = #{gmcji}
        </if>
        <if test=' gmhjdname!=null and !gmhjdname.equals("")'>
            AND A.HJDONG_NM = #{gmhjdname}
        </if>
        AND A.NEWYN='Y'
        ORDER BY RN2 DESC
        ) T
        <if test='searchJuso!=null and !searchJuso.equals("")'>
            WHERE (REGEXP_REPLACE(T.NA_ROAD_NM, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.NEW_ADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.HJDONGNM, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY RN DESC
    </select>
    <!-- 신규대장리스트 -->
    <select id="newFindLedgerList" parameterType="LedgerDTO" resultType="LedgerDTO">
        SELECT * FROM
        (SELECT
        ROW_NUMBER() OVER(ORDER BY A.REGIST_TS, A.GMSKK, A.GMSEQCO ASC) RN,
        NVL2(A.NEW_ADDR2, A.NEW_ADDR2, DECODE(A.GMHJDCD,'', F_BJD_NAME(A.GMSKKCD,A.GMBJDCD)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI),
        F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.GMHJDCD)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI))) AS NEW_ADDR2,
        A.GMSKK,
        A.GMDJGB,
        A.GMSEQCO,
        A.GMSKK||'-'||DECODE(A.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||A.GMSEQCO GMBUNHO,
        A.DAEJANG,
        A.GMGZCD,
        A.GMYD,
        A.GMGUNP,
        A.GMGUNIL,
        COALESCE(A.NEW_ADDR1, '-') NEW_ADDR1,
        COALESCE(F_CDNAME(87, A.GMCSAH), '-') AS GMCSAH_GB,
        DECODE(A.GMFOORS,'','',A.GMFOORS||'층') GMFOORS,
        A.GMMUNJUK,
        A.TOJIMUNJUK
        FROM NOPER_MASTER A
        WHERE (A.DEGB IS NULL OR A.DEGB = 'N' OR A.DEGB = 'C')
        AND A.NEWYN='N'
        <if test='gmskk!=null and !gmskk.equals("")'>
            AND A.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND A.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco!=null and !gmseqco.equals("")'>
            AND A.GMSEQCO = #{gmseqco}
        </if>
        <if test='daejang!=null and !daejang.equals("")'>
            AND A.DAEJANG = #{daejang}
        </if>
        <if test='tojisg!=null and !tojisg.equals("")'>
            AND A.TOJISG = #{tojisg}
        </if>
        <if test='gmyd!=null and !gmyd.equals("")'>
            AND A.GMYD = #{gmyd}
        </if>
        <if test='gmgunil1!=null and !gmgunil1.equals("")'>
            <![CDATA[ AND A.GMGUNIL >= #{gmgunil1} ]]>
        </if>
        <if test='gmgunil2!=null and !gmgunil2.equals("")'>
            <![CDATA[ AND A.GMGUNIL <= #{gmgunil2} ]]>
        </if>
        ORDER BY RN DESC
        )
        <if test='searchJuso!=null and !searchJuso.equals("")'>
            WHERE(NEW_ADDR2 LIKE '%' || #{searchJuso} || '%' OR
                  NEW_ADDR1 LIKE '%' || #{searchJuso} || '%')
        </if>
    </select>
    <!-- 대장등록 -->
    <insert id="legerAdd" parameterType="LedgerDTO">
        INSERT INTO NOPER_MASTER (
        GMSKK, GMDJGB, GMSEQCO, DHBH, DHGBH, DONGBH, DONGGBH, DAEJANG,
        GMSKKCD, GMBJDCD, GMHJDCD, GMCSAH, GMCBUH, GMCJI, GMCOH, GMGZCD,
        GMGUNP, GMFOORS, GMYD, GMGUNIL, TOJIMJ, TOJISG, TOJIJMG, TOJIDP,
        JIGUJDG, JIGUGB, JIGUUG, JIGUDZ, GMWEBAN, GMWEBANNO,
        GMMUNJUK, TOJIMUNJUK, GMBSDONG, DECISION,
        REASON, BGSTOP, NA_BJDONG_NO, NA_ROAD_CD,
        NA_ROAD_NM, NA_MAIN_BUN, NA_SUB_BUN, NA_ETC,  REGIST_ID,
        NEWYN, NEW_ADDR1, NEW_ADDR2, NA_SIGUNGU_CD, REGIST_TS
        ) VALUES (
        #{gmskk}, #{gmdjgb},
        (SELECT NVL(MAX(GMSEQCO), 0) + 1 FROM NOPER_MASTER WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb}),
	    #{dhbh}, #{dhgbh}, #{dongbh}, #{donggbh}, #{daejang}, #{gmskkcd}, #{gmbjdcd}, #{gmhjdcd},
        #{gmcsah}, #{gmcbuh}, #{gmcji}, #{gmcoh}, #{gmgzcd}, #{gmgunp}, #{gmfoors}, #{gmyd},
        #{gmgunil}, #{tojimj}, #{tojisg}, #{tojijmg}, #{tojidp}, #{jigujdg}, #{jigugb}, #{jiguug},
        #{jigudz}, #{gmweban}, #{gmwebanno}, #{gmmunjuk}, #{tojimunjuk}, #{gmbsdong}, #{decision}, #{reason},
        #{bgstop}, #{naBjdongNo}, #{naRoadCd}, #{naRoadNm}, #{naMainBun}, #{naSubBun}, #{naEtc}, #{userId},
        'N', #{newaddr1}, #{newaddr2}, #{naSigunguCd}, SYSDATE
        )
    </insert>
    <!-- 무허가관리번호 추출 -->
    <select id="findGesedqco" resultType="String">
        SELECT MAX(GMSEQCO) FROM NOPER_MASTER
    </select>
    <!-- 히스토리 대장등록 -->
    <insert id= "hislegerAdd" parameterType="LedgerDTO" useGeneratedKeys="false">
        INSERT INTO HIS_NOPER_MASTER (
        GMSKK, GMDJGB, GMSEQCO, CRDATE, DHBH, DHGBH, DONGBH, DONGGBH,
        DAEJANG, GMSKKCD, GMBJDCD, GMHJDCD, GMCSAH, GMCBUH, GMCJI, GMCOH,
        GMGZCD, GMGUNP, GMFOORS, GMYD, GMGUNIL, TOJIMJ, TOJISG, TOJIJMG,
        TOJIDP, JIGUJDG, JIGUGB, JIGUUG, JIGUDZ, GMWEBAN, GMWEBANNO, GMMUNJUK,
        TOJIMUNJUK, GMBSDONG, DECISION, REASON, BGSTOP, NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, REGIST_ID, NEWYN
        ) SELECT
        GMSKK, GMDJGB, GMSEQCO,
        (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL),
        DHBH, DHGBH, DONGBH, DONGGBH,
        DAEJANG, GMSKKCD, GMBJDCD, GMHJDCD, GMCSAH, GMCBUH, GMCJI, GMCOH,
        GMGZCD, GMGUNP, GMFOORS, GMYD, GMGUNIL, TOJIMJ, TOJISG, TOJIJMG,
        TOJIDP, JIGUJDG, JIGUGB, JIGUUG, JIGUDZ, GMWEBAN, GMWEBANNO, GMMUNJUK,
        TOJIMUNJUK, GMBSDONG, DECISION, REASON, BGSTOP, NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, #{userId}, #{newyn}
        FROM NOPER_MASTER
        WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco}
	 </insert>

    <select id="newLedgerDtail" parameterType="LedgerDTO" resultType="LedgerDTO">
        SELECT
        A.GMSKK, F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME, A.GMDJGB, A.GMSEQCO,
        A.DHBH, A.DHGBH, A.DONGBH, A.DONGGBH, A.DAEJANG, A.GMSKKCD, A.GMBJDCD,
        DECODE(A.GMHJDCD,'',
        F_BJD_NAME(A.GMSKKCD,A.GMBJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI),
        F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.GMHJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI))
        GMSKKNAME,
        (SELECT DISTINCT HJDONG_NM HNAM
        FROM CMP_BJDONG_MGM
        WHERE SIGUNGU_CD = A.GMSKK
        AND HJDONG_CD &lt;&gt;'000' AND HJDONG_CD = A.GMHJDCD) AS GMHJDNM,
        A.GMHJDCD,
        A.GMCSAH, A.GMCBUH, A.GMCJI, A.GMCOH, A.GMGZCD, A.GMYD, A.GMBSDONG, A.GMGUNP,
        A.TOJIMUNJUK, A.GMFOORS, A.GMGUNIL, A.TOJIMJ, A.GMMUNJUK, A.TOJISG, A.TOJIJMG, A.TOJIDP,
        A.JIGUJDG, A.JIGUGB, A.JIGUUG, A.JIGUDZ, A.GMWEBAN, A.GMWEBANNO, A.DECISION, A.REASON,
        A.BGSTOP, A.NA_BJDONG_NO, A.NA_ROAD_NM, A.NA_MAIN_BUN, A.NA_SUB_BUN, A.NA_ETC, A.UPDATEC,
        A.NEW_ADDR1, A.NEW_ADDR2,
        --부분철거 평 및 세제곱미터 정보출력
        sum(b.gmbsdong) as gmbsdong_s,
        sum(b.gmbfoors) as gmbfloors,
        sum(nvl(b.gmbgunp,0)) as gmbgunp,
        sum(nvl(b.gmbmjuk,0)) as gmbmjuk,
        sum(nvl(b.gmbtojimj,0)) as gmbtojimj,
        sum(nvl(b.gmbtojimjuk,0)) as gmbtojimjuk
        ,decode(sum(DECODE(NVL(B.GMSKK,0),0,0,1)),0,0,1) RECOM_YN
        ,sum(DECODE(NVL(B.GMSKK,0),0,0,1)) RECOM_COUNT
        FROM
        NOPER_MASTER A, REMOVE_OWNER_RECOM B
        WHERE  A.GMSKK = #{gmskk}
        AND A.GMDJGB = #{gmdjgb}
        AND A.GMSEQCO = #{gmseqco}
        AND A.GMSKK=B.GMSKK(+)
        AND A.GMDJGB=B.GMDJGB(+)
        AND A.GMSEQCO=B.GMSEQCO(+)
        group by A.GMSKK, A.GMDJGB, A.GMDJGB, A.GMSEQCO, A.DHBH, A.DHGBH, A.DONGBH, A.DONGGBH, A.DAEJANG, A.GMSKKCD, A.GMBJDCD, A.GMHJDCD,
        A.GMCSAH, A.GMCBUH, A.GMCJI, A.GMCOH, A.GMGZCD, A.GMYD, A.GMBSDONG, A.GMGUNP, A.TOJIMUNJUK, A.GMFOORS, A.GMGUNIL, A.TOJIMJ, A.GMMUNJUK,
        A.TOJISG, A.TOJIJMG, A.TOJIDP, A.JIGUJDG, A.JIGUGB, A.JIGUUG, A.JIGUDZ, A.GMWEBAN, A.GMWEBANNO, A.DECISION, A.REASON, A.BGSTOP,
        A.NA_BJDONG_NO, A.NA_ROAD_NM, A.NA_MAIN_BUN, A.NA_SUB_BUN, A.NA_ETC,A.NEW_ADDR1,A.NEW_ADDR2,A.UPDATEC
    </select>
    <!-- 신규대장삭제 -->
    <delete id="ledgerDell" parameterType="LedgerDTO">
        DELETE FROM NOPER_MASTER
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND NEWYN = #{newyn}
    </delete>

    <insert id="historyMain" parameterType="UserDTO">
        /* historyMain */
        INSERT INTO HISTORY_MAIN
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , BSCD
               , WORKID
               , CRGB
               , REGIST_ID
               , USERNAME
               )
        VALUES ( #{gmskk}
               , #{gmdjgb}
               , #{gmseqco}
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , f_cdname('R'||#{gmskk}, #{deptCd})
               , #{workid}
               , #{crgb}
               , #{userId}
               , #{userName}
               )
    </insert>
    <!-- 신규대장승인 -->
    <update id="ledgerApproval" parameterType="LedgerDTO">
        UPDATE NOPER_MASTER SET
        NEWYN = #{newyn},
        UPDATE_ID = #{userId},
        UPDATE_TS = SYSDATE
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
    </update>

    <select id="cmpBjdongMgm" parameterType="String" resultType="LedgerDTO">
        SELECT BJDONG_CD BJDCD, decode(bjdong_cd,'00000',SIDO_NM||' '||SIGUNGU_NM,SIDO_NM||' '||SIGUNGU_NM||' '||BJDONG_NM) BNAM
        FROM CMP_BJDONG_MGM
        WHERE SIGUNGU_CD = #{gmskk}
        AND HJDONG_CD = '000'
        AND BJDONG_CD = '00000'
        AND APPLY_EXP_DAY>TO_CHAR(SYSDATE,'YYYYMMDD')
        ORDER BY BNAM
    </select>

    <!-- 대장상세 건물주 현황 -->
    <select id="findNoperOwner" parameterType="string" resultType="NoperOwnerDTO">
        SELECT
        ROW_NUMBER() OVER(ORDER BY GMJILNO ASC) RN,
        GMSKK, GMDJGB, GMSEQCO, GMJILNO, GMJNAME, GMJJGN,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL) AS GMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),0,6) GMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) GMJJUMIN2,
        GMZIP1, GMZIP2,
        GMJJNAME,
        NVL2(NEW_ADDR2, NEW_ADDR2, GMJJNAME) AS NEW_ADDR2,
        NA_BJDONG_NO, NA_ROAD_NM, NA_MAIN_BUN,
        NA_SUB_BUN, NA_ETC, NA_SIGUNGU_CD, NEW_ADDR1, GMJSNA
        FROM NOPER_OWNER
        WHERE GMSKK= #{gmskk}
        AND GMDJGB= #{gmdjgb}
        AND GMSEQCO= #{gmseqco}
        AND DELETE_AT='N'
        ORDER BY GMJILNO DESC
    </select>

    <!-- 대장상세 소유자 변경 이력 -->
    <select id="findNoperOwnerChange" parameterType="string" resultType="NoperOwnerDTO">
        SELECT
        ROW_NUMBER() OVER(ORDER BY GMSKK,GMDJGB, GMSEQCO, SUILNO) RN,
        GMJILNO, SUILNO, SUJILJA, GMJNAME, GMJJGN,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL) AS GMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),0,6) GMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) GMJJUMIN2,
        GMJZIP1, GMJZIP2, GMJJNAME, GMJSNA, JGMJNAME, JGMJJGN,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL) AS JGMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL),0,6) JGMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL),8,7) JGMJJUMIN2,
        JGMJZIP1, JGMJZIP2, JGMJJNAME, JGMJSNA, CRILJA, BKSU,
        NA_BJDONG_NO, NA_ROAD_NM, NA_MAIN_BUN, NA_SUB_BUN,
        NA_ETC, NA_SIGUNGU_CD, J_NA_BJDONG_NO, J_NA_ROAD_NM,
        J_NA_MAIN_BUN, J_NA_SUB_BUN, J_NA_ETC, J_NA_SIGUNGU_CD,
        NEW_ADDR1, NEW_ADDR2, J_NEW_ADDR1, J_NEW_ADDR2, GUBOGOILJA,CRILJA
        FROM NOPER_OWNER_CHANGE
        WHERE GMSKK= #{gmskk}
        AND GMDJGB= #{gmdjgb}
        AND GMSEQCO= #{gmseqco}
        AND DELGB IS NULL
        ORDER BY SUILNO DESC
    </select>

    <!--개보수신고대장-->
    <select id="findnoperFix" parameterType="String" resultType="NoperFixDTO" >
        SELECT
        GMILNO, GBSGOIL, GMBALNO, JGONG, WBGB, GBSCOTENT,
        CHCONTENT, HHGNAME, HHNAME, SINDA, SINDA1, JUNGON, JUNGON1
        FROM NOPER_FIX
        WHERE GMSKK= #{gmskk}
        AND GMDJGB= #{gmdjgb}
        AND GMSEQCO= #{gmseqco}
        ORDER BY GMILNO ASC
    </select>

    <!-- 기존무허가 이미지파일관리
   <select id="fintNoperImgFileinfo" parameterType="String" resultType="NoperImgFileinfoDTO">
       SELECT
       FILE_SEQ,
       F_CDNAME('L02',FILE_FLAG) AS FILE_FLAG,
       LOGICAL_FILENAME, PHYSICAL_FILENAME,
       FILE_PATH, FILE_END, FILE_SIZE,
       TO_CHAR(REGIST_TS,'YYYYMMDD') AS REGIST_TS
       FROM NOPER_IMG_FILEINFO
       WHERE GMSKK= #{gmskk}
       AND GMDJGB= #{gmdjgb}
       AND GMSEQCO= #{gmseqco}
       ORDER BY REGIST_TS ASC
   </select>
    -->


    <!-- 현장점검-->
    <select id="findNoperLedgerSiteChk" parameterType="String" resultType="NoperSiteChkDTO">
        SELECT
        ROW_NUMBER() OVER(ORDER BY CHKILNO ASC) RN,
        GMSKK, GMDJGB, GMSEQCO, CHKILNO, DECODE(VIOL_YN,'Y','위반',
        'N','해당사항없음') violYnTxt, VIOL_YN, VIOL_CNTT, TRSCT_CNTT, REM,
        DECODE(CONFIRM1,'Y','승인',
        'N','미승인') CONFIRM1, CONFIRM2,  NVL(CHANG_DTIME,'-') CHANG_DTIME, CHK_DATE, CHK_CHARGE_ID, CHK_CHARGE_NM, TRSCT_CNFM_ID,
        TRSCT_CNFM_NM, TRSCT_DATE, REG_DTIME, CHANG_DTIME, CHK_CHARGE_CLSPOS,
        TRSCT_CNFM_CLSPOS, CHK_CHARGE_GMSKK, TRSCT_CNFM_GMSKK, REGT_ID, CHANG_ID
        FROM NOPER_SITE_CHK
        WHERE GMSKK= #{gmskk}
        AND GMDJGB= #{gmdjgb}
        AND GMSEQCO= #{gmseqco}
        AND DELETE_AT='N'
        ORDER BY CHKILNO DESC
    </select>
    <!--대장 수정 -->
    <update id="updateNoperLeger" parameterType="LedgerDTO">
        UPDATE NOPER_MASTER SET
        DHBH = #{dhbh}, DHGBH = #{dhgbh}, DONGBH = #{dongbh}, DONGGBH = #{donggbh},
        DAEJANG = #{daejang}, GMSKKCD = #{gmskkcd}, GMBJDCD = #{gmbjdcd}, GMHJDCD = #{gmhjdcd},
        GMCSAH = #{gmcsah}, GMCBUH = #{gmcbuh}, GMCJI = #{gmcji}, GMCOH = #{gmcoh}, GMGZCD = #{gmgzcd},
        GMGUNP = #{gmgunp}, GMFOORS = #{gmfoors}, GMYD = #{gmyd}, GMGUNIL = #{gmgunil}, TOJIMJ = #{tojimj},
        TOJISG = #{tojisg}, TOJIJMG = #{tojijmg}, TOJIDP = #{tojidp}, JIGUJDG = #{jigujdg}, JIGUGB = #{jigugb}, JIGUUG = #{jiguug},
        JIGUDZ = #{jigudz}, GMWEBAN = #{gmweban}, GMWEBANNO = #{gmwebanno}, GMMUNJUK = #{gmmunjuk},
        TOJIMUNJUK = #{tojimunjuk}, GMBSDONG = #{gmbsdong}, DECISION = #{decision}, REASON = #{reason},
        BGSTOP = #{bgstop}, NA_BJDONG_NO = #{naBjdongNo}, NA_ROAD_CD = #{naRoadCd}, NA_ROAD_NM = #{naRoadNm},  NA_MAIN_BUN = #{naMainBun},
        NA_SUB_BUN = #{naSubBun}, NA_ETC = #{naEtc}, UPDATEC = #{updatec}, NEW_ADDR1 = #{newaddr1}, NEW_ADDR2 = #{newaddr2},
        UPDATE_ID = #{userId}, UPDATE_TS = SYSDATE
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 대장 수정 히스토리 -->
    <!-- 히스토리 대장등록 -->
    <insert id= "hislegerupdate" parameterType="LedgerDTO" useGeneratedKeys="false">
        INSERT INTO HIS_NOPER_MASTER (
        GMSKK, GMDJGB, GMSEQCO, CRDATE,
        DHBH, DHGBH, DONGBH, DONGGBH,
        DAEJANG, GMSKKCD, GMBJDCD, GMHJDCD,
        GMCSAH, GMCBUH, GMCJI, GMCOH,
        GMGZCD, GMGUNP, GMFOORS, GMYD,
        GMGUNIL, TOJIMJ, TOJISG, TOJIJMG,
        TOJIDP, JIGUJDG, JIGUGB, JIGUUG,
        JIGUDZ, GMWEBAN, GMWEBANNO, GMMUNJUK,
        TOJIMUNJUK, GMBSDONG, DECISION, REASON,
        BGSTOP, NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, REGIST_ID, UPDATEC
        ) SELECT
        GMSKK, GMDJGB, GMSEQCO,
        (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL),
        DHBH, DHGBH, DONGBH, DONGGBH, DAEJANG, GMSKKCD,
        GMBJDCD, GMHJDCD, GMCSAH, GMCBUH, GMCJI, GMCOH,
        GMGZCD, GMGUNP, GMFOORS, GMYD, GMGUNIL, TOJIMJ,
        TOJISG, TOJIJMG, TOJIDP, JIGUJDG, JIGUGB, JIGUUG,
        JIGUDZ, GMWEBAN, GMWEBANNO, GMMUNJUK,
        TOJIMUNJUK, GMBSDONG, DECISION, REASON,
        BGSTOP, NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC,
        #{userId},
        UPDATEC
        FROM NOPER_MASTER
        WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco}
    </insert>

    <!--UTL_RAW.CAST_TO_VARCHAR2 : hex 값을 문자열 string 값으로 반환해 줍니다-->
    <!-- 건물주 저장 -->
    <insert id="saveNoperOwner" parameterType="NoperOwnerDTO">
        INSERT INTO NOPER_OWNER (
        GMSKK, GMDJGB, GMSEQCO, GMJILNO,
        GMJNAME, GMJJGN, GMJJUMIN, GMZIP1,
        GMZIP2, GMJSNA, <!-- GMJJNAME,-->
        NA_BJDONG_NO, NA_ROAD_CD,
        NA_ROAD_NM, NA_MAIN_BUN,
        NA_SUB_BUN, NA_ETC,
        NA_SIGUNGU_CD, NEW_ADDR1,
        NEW_ADDR2, REGIST_ID, DELETE_AT
        ) VALUES (
        #{gmskk}, #{gmdjgb},
        #{gmseqco}, #{gmjilno},
        #{gmjname}, #{gmjjgn},
        <!--
        <if test='isLocal!=null and isLocal == "true"'>
            UTL_RAW.CAST_TO_RAW(#{gmjjumin}),
        </if>
        <if test='isLocal!=null and isLocal == "false"'>
            #{gmjjumin},
        </if>
        -->
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin}))) FROM dual),
        #{gmjzip1}, #{gmjzip2},
        #{gmjsna},
        <!-- #{gmjjname}, -->
        #{naBjdongNo}, 	#{naRoadCd},
        #{naRoadNm}, #{naMainBun},
        #{naSubBun}, #{naEtc},
        #{naSigunguCdOwner}, #{newAddr1},
        #{newAddr2}, #{userId}, 'N'
        )
    </insert>
    <!-- 건물주일련번호채번 -->
    <select id="noperGmjilNo" parameterType="String" resultType="String">
        SELECT NVL(MAX(GMJILNO), 0) + 1
        FROM NOPER_OWNER
        WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco}
    </select>
    <!-- 소유주변경일련번호채번 -->
    <select id="noperSuilNo" parameterType="String" resultType="String">
        SELECT NVL(MAX(SUILNO), 0) + 1
        FROM NOPER_OWNER_CHANGE
        WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco} AND GMJILNO = #{gmjilno}
    </select>
    <!-- 소유주변경일련번호채번 -->
    <select id="nowNoperSuilNo" parameterType="String" resultType="String">
        SELECT NVL(MAX(SUILNO), 0)
        FROM NOPER_OWNER_CHANGE
        WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco}
    </select>
    <!-- 건물주 저장 -->
    <insert id="noperHisNoperOwer" parameterType="NoperOwnerDTO" useGeneratedKeys="false">
        INSERT INTO HIS_NOPER_OWNER (
        GMSKK, GMDJGB, GMSEQCO, CRDATE, GMJILNO, GMJNAME,
        GMJJGN, GMJJUMIN, GMZIP1, GMZIP2, GMJSNA, GMJJNAME,
        NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM, NA_MAIN_BUN,
        NA_SUB_BUN, NA_ETC, NA_SIGUNGU_CD, NEW_ADDR1,
        NEW_ADDR2, REGIST_ID
        ) SELECT
        GMSKK, GMDJGB, GMSEQCO,
        (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL),
        GMJILNO, GMJNAME, GMJJGN,
        REPLACE((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL), '-') GMJJUMIN,
        GMZIP1, GMZIP2,
        GMJSNA, GMJJNAME, NA_BJDONG_NO, NA_ROAD_CD,
        NA_ROAD_NM, NA_MAIN_BUN, NA_SUB_BUN, NA_ETC,
        NA_SIGUNGU_CD, NEW_ADDR1, NEW_ADDR2, #{userId}
        FROM NOPER_OWNER
        WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco} AND GMJILNO = #{gmjilno} AND DELETE_AT='N'
    </insert>
    <!-- 건물주정보->소유자변경이력에도 저장 -->
    <insert id="saveNoperOwnerChange"  parameterType="NoperOwnerDTO">
        INSERT INTO NOPER_OWNER_CHANGE (
        GMSKK,	GMDJGB,	GMSEQCO, GMJILNO,
        SUILNO, SUJILJA, GMJNAME, GMJJGN,
        GMJJUMIN, GMJZIP1,	GMJZIP2, GMJSNA,
        GMJJNAME, NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, NA_SIGUNGU_CD,
        NEW_ADDR1, NEW_ADDR2, REGIST_ID, REGIST_TS
        ) VALUES (
        #{gmskk}, #{gmdjgb},
        #{gmseqco}, #{gmjilno}, #{suilno},
        TO_CHAR(SYSDATE,'YYYYMMDD'),
        #{gmjname}, #{gmjjgn},
        <!--
        <if test='isLocal!=null and isLocal == "true"'>
            UTL_RAW.CAST_TO_RAW(#{gmjjumin}),
        </if>
        <if test='isLocal!=null and isLocal == "false"'>
            #{gmjjumin},
        </if>
        -->
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin}))) FROM dual),
        #{gmjzip1}, #{gmjzip2}, #{gmjsna}, #{gmjname},
        #{naBjdongNo}, #{naRoadCd}, #{naRoadNm}, #{naMainBun},
        #{naSubBun}, #{naEtc}, #{naSigunguCdOwner},
        #{newAddr1}, #{newAddr2}, #{userId}, SYSDATE
        )
    </insert>


    <!-- 개보수신고 삭제-->
    <delete id="delNoperFix" parameterType="NoperFixDTO">
        DELETE FROM NOPER_FIX
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND GMILNO = #{gmilno}
        AND GMBALNO = #{gmbalno}
    </delete>
    <!-- 개보수신고 추가-->
    <insert id="addNoperFix" parameterType="NoperFixDTO">
        INSERT INTO NOPER_FIX (
        GMSKK, GMDJGB, GMSEQCO, GMILNO,
        GMBALNO, GBSGOIL, GBSCOTENT, WBGB,
        CHCONTENT, JGONG, HHGNAME, HHNAME,
        SINDA, SINDA1, JUNGON, JUNGON1, REGIST_ID
        ) VALUES (
        #{gmskk}, #{gmdjgb}, #{gmseqco}, #{gmilno},
        #{gmbalno}, #{gbsgoil}, #{gbscotent}, #{wbgb},
        #{chcontent}, #{jgong}, #{hhgname}, #{hhname},
        #{sinda}, #{sinda1}, #{jungon}, #{jungon1},
        #{userId}
        )
    </insert>

    <!-- 개보수일련 번호채번-->
    <select id="noperGmilno" parameterType="String" resultType="String">
        SELECT NVL(MAX(GMILNO), 0) + 1 FROM NOPER_FIX WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco}
    </select>
    <!-- 개보수발급 순번채번-->
    <select id="noperGmbalno" parameterType="String" resultType="String">
        SELECT TO_CHAR(SYSDATE,'YYYY')||NVL(MAX(GMILNO),0)+1 FROM NOPER_FIX WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco}
    </select>

    <update id="updateNoperFix" parameterType="NoperFixDTO">
        UPDATE NOPER_FIX SET
        GBSGOIL = #{gbsgoil},
        GBSCOTENT = #{gbscotent},
        WBGB = #{wbgb},
        CHCONTENT = #{chcontent},
        JGONG = #{jgong},
        HHGNAME = #{hhgname},
        HHNAME = #{hhname},
        SINDA = #{sinda},
        SINDA1 = #{sinda1},
        JUNGON = #{jungon},
        JUNGON1 = #{jungon1},
        UPDATE_ID = #{userId},
        UPDATE_TS = SYSDATE
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND GMILNO = #{gmilno}
        AND GMBALNO = #{gmbalno}
    </update>

    <insert id="noperHisNoperFix" parameterType="NoperFixDTO" useGeneratedKeys="false">
        INSERT INTO HIS_NOPER_FIX (
        GMSKK, GMDJGB, GMSEQCO, CRDATE,
        GMILNO, GMBALNO, GBSGOIL, GBSCOTENT,
        WBGB, CHCONTENT, JGONG, HHGNAME,
        HHNAME, SINDA, SINDA1, JUNGON,
        JUNGON1, BIGO, REGIST_ID, ISSUEORGKEY
        ) SELECT  GMSKK, GMDJGB, GMSEQCO,
        (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL),
        GMILNO, GMBALNO, GBSGOIL, GBSCOTENT,
        WBGB, CHCONTENT, JGONG, HHGNAME,
        HHNAME, SINDA, SINDA1, JUNGON,
        JUNGON1, BIGO, #{userId}, ISSUEORGKEY
        FROM  NOPER_FIX
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND GMILNO = #{gmilno}
        AND GMBALNO = #{gmbalno}
    </insert>

    <!-- 현장점검 채번 -->
    <select id="noperChkino" parameterType="String" resultType="String">
        SELECT NVL(MAX(CHKILNO), 0) + 1 FROM NOPER_SITE_CHK WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco}
    </select>
    <select id="nowNoperChkino" parameterType="String" resultType="String">
        SELECT NVL(MAX(CHKILNO), 0) FROM NOPER_SITE_CHK WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco}
    </select>
    <!-- 현장점검 등록 -->
    <insert id="addNoperSiteChk" parameterType="NoperSiteChkDTO">
        INSERT INTO NOPER_SITE_CHK (
        GMSKK, GMDJGB, GMSEQCO, CHKILNO,
        VIOL_YN, VIOL_CNTT, REM, CHK_DATE, CHK_CHARGE_ID,
        CHK_CHARGE_NM, CHK_CHARGE_CLSPOS, CHK_CHARGE_GMSKK, REGT_ID
        ) VALUES (
        #{gmskk}, #{gmdjgb}, #{gmseqco}, #{chkilno},
        #{violYn}, #{violCntt}, #{rem}, #{chkDate}, #{chkChargeId},
        #{chkChargeNm}, #{chkChargeClspos}, #{chkChargeGmskk}, #{regtId}
        )
    </insert>

    <!-- 현장정검수정 -->
    <update id="updateNoperSiteChk" parameterType="NoperSiteChkDTO">
        UPDATE NOPER_SITE_CHK SET
        VIOL_YN = #{violYn},
        VIOL_CNTT = #{violCntt},
        REM = #{rem},
        CHK_DATE = #{chkDate},
        CHK_CHARGE_ID = #{chkChargeId},
        CHK_CHARGE_NM = #{chkChargeNm},
        CHK_CHARGE_CLSPOS = #{chkChargeClspos},
        CHK_CHARGE_GMSKK = #{chkChargeGmskk},
       -- CHANG_ID = '"+SE_SESSION.getUserId()+"',
        CHANG_ID = #{regtId},
        CHANG_DTIME = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND CHKILNO = #{chkilno}
    </update>

    <!-- 조치사항 저장 -->
    <update id="updateActionNoperSiteChk" parameterType="NoperSiteChkDTO">
        UPDATE NOPER_SITE_CHK SET
        TRSCT_CNTT = #{trsctCntt},
        TRSCT_CNFM_NM = #{trsctCnfmNm},
        TRSCT_CNFM_ID = #{trsctCnfmId},
        TRSCT_CNFM_CLSPOS = #{trsctCnfmClspos},
        TRSCT_CNFM_GMSKK = #{trsctCnfmGmskk},
        TRSCT_DATE = #{trsctDate},
        -- CHANG_ID = '"+SE_SESSION.getUserId()+"',
        CHANG_ID = #{regtId},
        CHANG_DTIME = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND CHKILNO = #{chkilno}
    </update>

    <!-- 현장점검 상세 조회
    <select id="">
        SELECT
        ROW_NUMBER() OVER(ORDER BY CHKFILE.FILE_SEQ ASC) RN,
        CHK.GMSKK, CHK.GMDJGB, CHK.GMSEQCO,
        CHK.CHKILNO, VIOL_YN, VIOL_CNTT,
        TRSCT_CNTT, REM, CONFIRM1,
        CONFIRM2, CHK_DATE, CHK_CHARGE_ID,
        CHK_CHARGE_NM, TRSCT_CNFM_ID, TRSCT_CNFM_NM,
        TRSCT_DATE, CHK_CHARGE_CLSPOS, TRSCT_CNFM_CLSPOS,
        CHK_CHARGE_GMSKK, TRSCT_CNFM_GMSKK,
        CHKFILE.FILE_SEQ, CHKFILE.FILE_FLAG,
        CHKFILE.LOGICAL_FILENAME, CHKFILE.FILE_PATH,
        CHKFILE.PHYSICAL_FILENAME, CHKFILE.FILE_END,
        CHKFILE.FILE_SIZE
        FROM NOPER_SITE_CHK CHK, (SELECT * FROM NOPER_SITE_CHK_FILE WHERE DELETE_AT = 'N') CHKFILE
        WHERE
        CHK.GMSKK = CHKFILE.GMSKK(+)
        AND CHK.GMDJGB = CHKFILE.GMDJGB(+)
        AND CHK.GMSEQCO = CHKFILE.GMSEQCO(+)
        AND CHK.CHKILNO = CHKFILE.CHKILNO(+)
        AND CHK.DELETE_AT='N'
        AND CHK.GMSKK= '"+gmskk+"'
        AND CHK.GMDJGB= '"+gmdjgb+"'
        AND CHK.GMSEQCO= '"+gmseqco+"'
        AND CHK.CHKILNO= '"+chkilno+"'
        ORDER BY CHKFILE.FILE_SEQ ASC
    </select>
     -->

    <!-- 현장점검파일저장
    <insert id="">
        INSERT INTO NOPER_SITE_CHK_FILE (
        GMSKK, GMDJGB, GMSEQCO, CHKILNO,
        FILE_SEQ, FILE_FLAG, LOGICAL_FILENAME,
        PHYSICAL_FILENAME, FILE_PATH,
        FILE_END, FILE_SIZE, REGT_ID
        ) VALUES (
        #{gmskk}, #{gmdjgb}, #{gmseqco}, #{chkilno},
        #{fileseq}, #{fileFlag},
        #{logicalFilename}, #{physicalFilename},
        #{filePath}, #{fileEnd}, #{fileSize}, #{regtId}
        )
    </insert>
    -->
    <!-- 현장점검파일 삭제
    <update id="">
        UPDATE NOPER_SITE_CHK_FILE SET
        DELETE_AT = 'Y',
        CHANG_ID = '"+SE_SESSION.getUserId()+"',
        CHANG_DTIME = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
        WHERE
        GMSKK = '"+gmskk+"'
        AND GMDJGB = '"+gmdjgb+"'
        AND GMSEQCO = '"+gmseqco+"'
        AND CHKILNO = '"+chkilno+"'
        AND FILE_SEQ = '"+fileSeq+"'
    </update>
     -->
    <!-- 첨부파일 제외_현장점검 상세 조회
    <select id="">
        SELECT
        CHK.GMSKK, CHK.GMDJGB, CHK.GMSEQCO,
        CHK.CHKILNO, VIOL_YN, VIOL_CNTT,
        TRSCT_CNTT, REM, CONFIRM1,
        CONFIRM2, CHK_DATE, CHK_CHARGE_ID,
        CHK_CHARGE_NM, TRSCT_CNFM_ID, TRSCT_CNFM_NM,
        TRSCT_DATE, CHK_CHARGE_CLSPOS, TRSCT_CNFM_CLSPOS,
        CHK_CHARGE_GMSKK, TRSCT_CNFM_GMSKK
        FROM NOPER_SITE_CHK CHK
        WHERE
        CHK.DELETE_AT='N'
        AND CHK.GMSKK= '"+gmskk+"'
        AND CHK.GMDJGB= '"+gmdjgb+"'
        AND CHK.GMSEQCO= '"+gmseqco+"'
        AND CHK.CHKILNO= '"+chkilno+"'
    </select>
    -->

    <!--현장점검 첨부파일 조회
    <select id="">
        SELECT
        ROW_NUMBER() OVER(ORDER BY CHKFILE.FILE_SEQ ASC) RN,
        CHKFILE.GMSKK, CHKFILE.GMDJGB,
        CHKFILE.GMSEQCO, CHKFILE.CHKILNO,
        CHKFILE.FILE_SEQ, CHKFILE.FILE_FLAG,
        CHKFILE.LOGICAL_FILENAME, CHKFILE.FILE_PATH,
        CHKFILE.PHYSICAL_FILENAME, CHKFILE.FILE_END,
        CHKFILE.FILE_SIZE
        FROM NOPER_SITE_CHK_FILE CHKFILE
        WHERE
        CHKFILE.DELETE_AT = 'N'
        AND CHKFILE.GMSKK= '"+gmskk+"'
        AND CHKFILE.GMDJGB= '"+gmdjgb+"'
        AND CHKFILE.GMSEQCO= '"+gmseqco+"'
        AND CHKFILE.CHKILNO= '"+chkilno+"'
        ORDER BY CHKFILE.FILE_SEQ ASC
    </select>
    -->

    <!--- 기존 무허가확인원 -->
    <select id="findConfirmation" resultType="ConfirmationDTO" parameterType="ConfirmationDTO">
        SELECT ROW_NUMBER() OVER(ORDER BY T.JSILJA ASC, T.CONILNO ASC) RN, T.* FROM (
        SELECT
            NOPER_MASTER.GMSKK,
            NOPER_MASTER.GMDJGB,
            NOPER_MASTER.GMSEQCO,
            NOPER_MASTER.GMSKK||'-' ||DECODE( NOPER_MASTER.GMDJGB, '0', '등재', '1', '미등재', '2', '항측판독', '' ) ||'-' ||NOPER_MASTER.GMSEQCO GMBUNHO ,
            NOPER_MASTER.GMSKK||'-' ||NOPER_MASTER.GMSEQCO GUNMULNO,
            NOPER_CONFIRM_DOC.JSILJA,
            NOPER_CONFIRM_DOC.TRILJA,
            SUBSTR( NOPER_CONFIRM_DOC.CONILNO, 1, 4 ) ||'-' ||SUBSTR( NOPER_CONFIRM_DOC.CONILNO, 5, 4 ) BALNO ,
            NOPER_CONFIRM_DOC.CONILNO, NOPER_CONFIRM_DOC.SINNAME,
            COALESCE(NVL2(NOPER_MASTER.NEW_ADDR2, NOPER_MASTER.NEW_ADDR2, DECODE(NOPER_MASTER.GMHJDCD,'',
            F_BJD_NAME(NOPER_MASTER.GMSKKCD,NOPER_MASTER.GMBJDCD)||' '||NOPER_MASTER.GMCBUH||DECODE(NOPER_MASTER.GMCJI,'','','-'||NOPER_MASTER.GMCJI),
            F_BJDNAME(NOPER_MASTER.GMSKKCD,NOPER_MASTER.GMBJDCD,NOPER_MASTER.GMHJDCD)||' '||NOPER_MASTER.GMCBUH||DECODE(NOPER_MASTER.GMCJI,'','','-'||NOPER_MASTER.GMCJI))), '-') AS NEWADDR2,
            (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_CONFIRM_DOC.SINJUMIN))) FROM dual WHERE NOPER_CONFIRM_DOC.SINJUMIN IS NOT NULL) AS SINJUMIN,
            NOPER_CONFIRM_DOC.BGSU,
            COALESCE(F_CDNAME(87,NOPER_MASTER.GMCSAH), '-') GMCSAH,
            SUBSTR( NOPER_CONFIRM_DOC.SINSNA, 1, 40 ) ||' ' ||NOPER_CONFIRM_DOC.SINJNAME SJUSO,
            NOPER_CONFIRM_DOC.BIGO BIGO,
            SUBSTR( F_BJD_NAME(GMSKKCD, GMBJDCD) , 1 , 40 ) ||' ' ||COM_CODE.CDVALUE||'' || NOPER_MASTER.GMCBUH||'-' ||NOPER_MASTER.GMCJI||' ' ||NOPER_MASTER.GMCOH BJUSO ,
            NOPER_MASTER.GMGZCD, NOPER_MASTER.GMGUNP,
            NOPER_MASTER.GMFOORS, NOPER_MASTER.GMGUNIL,
            NOPER_MASTER.TOJIMJ, K00_JIMOK.CDVALUE JIGB, NOPER_MASTER.TOJIDP,
            DECODE( NOPER_MASTER.DEGB , 'Y' , '철거' ) DEGB,
            SUBSTR( DECODE( f_group_gzjcount( NOPER_MASTER.GMSKK, NOPER_MASTER.GMDJGB, NOPER_MASTER.GMSEQCO ), 0 , '없음' , 1 , NOPER_OWNER_CHANGE.GMJNAME , NOPER_OWNER_CHANGE.GMJNAME||' 외' || TO_CHAR( f_group_gzjcount( NOPER_MASTER.GMSKK , NOPER_MASTER.GMDJGB , NOPER_MASTER.GMSEQCO ) - 1 ) ||'명' ) , 1 , 40 ) GMJU,
            --NOPER_OWNER_CHANGE.GMJNAME GMJU,
            (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.GMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.GMJJUMIN IS NOT NULL) GMJJUMIN,
            NOPER_OWNER_CHANGE.GMJSNA||' ' ||NOPER_OWNER_CHANGE.GMJJNAME KJUSO,
            NVL(NOPER_MASTER.NEW_ADDR1, '-') NEW_ADDR1, NOPER_MASTER.NEW_ADDR2,
            NOPER_MASTER.NA_ROAD_NM,
            NOPER_MASTER.NA_MAIN_BUN,
            NOPER_MASTER.NA_SUB_BUN
        FROM NOPER_MASTER NOPER_MASTER, COM_CODE, COM_CODE K00_JIMOK,
        (
        SELECT A.GMSKK,
        A.GMDJGB, A.GMSEQCO, A.GMJILNO, A.GMJNAME,
        A.GMJJGN, A.GMJJUMIN, A.GMZIP1, A.GMZIP2,
        A.GMJJNAME, A.GMJSNA, A.BKSU,
        DECODE( SUJILJA, NULL, '19000101', SUJILJA ) SUJILJA,
        MAX( SUILNO )
        FROM NOPER_OWNER A,
        NOPER_OWNER_CHANGE B
        WHERE  A.DELETE_AT='N'
        AND  A.GMSKK=B.GMSKK( + )
        AND    A.GMDJGB=B.GMDJGB( + )
        AND    A.GMSEQCO=B.GMSEQCO( + )
        AND    A.GMJILNO=B.GMJILNO( + )
        GROUP  BY A.GMSKK,
        A.GMDJGB, A.GMSEQCO, A.GMJILNO,
        A.GMJNAME, A.GMJJGN, A.GMJJUMIN, A.GMZIP1, A.GMZIP2,
        A.GMJJNAME, A.GMJSNA, A.BKSU, SUJILJA
        ) NOPER_OWNER_CHANGE,
        (
        SELECT NOPER_CONFIRM_DOC.GMSKK,
        NOPER_CONFIRM_DOC.GMDJGB, NOPER_CONFIRM_DOC.GMSEQCO,
        NOPER_CONFIRM_DOC.CONILNO, NOPER_CONFIRM_DOC.JSILJA,
        NOPER_CONFIRM_DOC.TRILJA, NOPER_CONFIRM_DOC.SINNAME,
        NOPER_CONFIRM_DOC.SINJUGB, NOPER_CONFIRM_DOC.SINJUMIN,
        NOPER_CONFIRM_DOC.SINZIP1, NOPER_CONFIRM_DOC.SINZIP2,
        NOPER_CONFIRM_DOC.SINJNAME, NOPER_CONFIRM_DOC.SINSNA,
        NOPER_CONFIRM_DOC.BGSU, NOPER_CONFIRM_DOC.BIGO,
        NOPER_CONFIRM_DOC.DELGB, MAX( NOPER_OWNER_CHANGE.SUJILJA ) SUJILJA
        FROM (
        SELECT GMSKK, GMDJGB,GMSEQCO,
        GMJILNO, GMJNAME, GMJJGN, GMJJUMIN,
        GMZIP1, GMZIP2, GMJJNAME, GMJSNA, BKSU,
        '19000101' SUJILJA
        FROM NOPER_OWNER
        WHERE DELETE_AT='N'
        UNION
        SELECT GMSKK, GMDJGB, GMSEQCO,
        GMJILNO, GMJNAME, GMJJGN, GMJJUMIN,
        GMJZIP1 GMZIP1, GMJZIP2 GMZIP2,
        GMJJNAME, GMJSNA, BKSU, SUJILJA
        FROM NOPER_OWNER_CHANGE
        ) NOPER_OWNER_CHANGE,
        NOPER_CONFIRM_DOC
        WHERE  NOPER_CONFIRM_DOC.GMSKK = NOPER_OWNER_CHANGE.GMSKK
        AND    NOPER_CONFIRM_DOC.GMDJGB = NOPER_OWNER_CHANGE.GMDJGB
        AND    NOPER_CONFIRM_DOC.GMSEQCO = NOPER_OWNER_CHANGE.GMSEQCO
        AND    NOPER_CONFIRM_DOC.JSILJA >= NOPER_OWNER_CHANGE.SUJILJA
        GROUP  BY NOPER_CONFIRM_DOC.GMSKK,
        NOPER_CONFIRM_DOC.GMDJGB,
        NOPER_CONFIRM_DOC.GMSEQCO,
        NOPER_CONFIRM_DOC.CONILNO,
        NOPER_CONFIRM_DOC.JSILJA,
        NOPER_CONFIRM_DOC.TRILJA,
        NOPER_CONFIRM_DOC.SINNAME,
        NOPER_CONFIRM_DOC.SINJUGB,
        NOPER_CONFIRM_DOC.SINJUMIN,
        NOPER_CONFIRM_DOC.SINZIP1,
        NOPER_CONFIRM_DOC.SINZIP2,
        NOPER_CONFIRM_DOC.SINJNAME,
        NOPER_CONFIRM_DOC.SINSNA,
        NOPER_CONFIRM_DOC.BGSU,
        NOPER_CONFIRM_DOC.BIGO,
        NOPER_CONFIRM_DOC.DELGB
        ) NOPER_CONFIRM_DOC
        WHERE  NOPER_MASTER.GMSKK = NOPER_OWNER_CHANGE.GMSKK
        AND    NOPER_MASTER.GMDJGB = NOPER_OWNER_CHANGE.GMDJGB
        AND    NOPER_MASTER.GMSEQCO = NOPER_OWNER_CHANGE.GMSEQCO
        AND    NOPER_OWNER_CHANGE.GMSKK = NOPER_CONFIRM_DOC.GMSKK
        AND    NOPER_OWNER_CHANGE.GMDJGB = NOPER_CONFIRM_DOC.GMDJGB
        AND    NOPER_OWNER_CHANGE.GMSEQCO = NOPER_CONFIRM_DOC.GMSEQCO
        AND    NOPER_OWNER_CHANGE.SUJILJA = NOPER_CONFIRM_DOC.SUJILJA
        AND    NOPER_MASTER.GMCSAH = COM_CODE.CDKEY( + )
        AND    '87' = COM_CODE.CDID( + )
        AND    NOPER_MASTER.TOJIJMG = K00_JIMOK.CDKEY( + )
        AND    '18' = K00_JIMOK.CDID( + )
        AND    NOPER_OWNER_CHANGE.GMJILNO = 1
        AND    NOPER_CONFIRM_DOC.DELGB IS NULL
        AND    NOPER_MASTER.NEWYN = 'Y'
        <if test='gmskk!=null and !gmskk.equals("")'>
            AND NOPER_MASTER.GMSKK = #{gmskk}
        </if>
        <if test='gmskkcd!=null and !gmskkcd.equals("")'>
            AND NOPER_MASTER.GMSKKCD = #{gmskkcd}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND NOPER_MASTER.GMDJGB = #{gmdjgb}
        </if>
        <choose>
            <when test='gmseqco.equals("") and !gmseqco2.equals("")'>
                <![CDATA[ AND NOPER_MASTER.GMSEQCO <= #{gmseqco2} ]]>
            </when>
            <when test='!gmseqco.equals("") and gmseqco2.equals("")'>
                <![CDATA[ AND NOPER_MASTER.GMSEQCO = #{gmseqco} ]]>
            </when>
            <when test='!gmseqco.equals("") and !gmseqco2.equals("")'>
                <![CDATA[ AND NOPER_MASTER.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2} ]]>
            </when>
            <otherwise>
            </otherwise>
        </choose>
        <if test='daejang!=null and !daejang.equals("")'>
            AND NOPER_MASTER.DAEJANG = #{daejang}
        </if>
        <if test='gmjname!=null and !gmjname.equals("")'>
            AND NOPER_OWNER_CHANGE.GMJNAME = #{gmjname}
        </if>
        <if test='gmhjdcd!=null and !gmhjdcd.equals("")'>
            AND NOPER_MASTER.GMHJDCD = #{gmhjdcd}
        </if>
        <if test='gmbjdcd!=null and !gmbjdcd.equals("")'>
            AND NOPER_MASTER.GMBJDCD = #{gmbjdcd}
        </if>
        <if test='gmcsah!=null and !gmcsah.equals("")'>
            AND NOPER_MASTER.GMCSAH = #{gmcsah}
        </if>
        <if test='gmcbuh!=null and !gmcbuh.equals("")'>
            AND NOPER_MASTER.GMCBUH = #{gmcbuh}
        </if>
        <if test='gmcji!=null and !gmcji.equals("")'>
            AND NOPER_MASTER.GMCJI = #{gmcji}
        </if>
        <if test='jsilja1!=null and !jsilja1.equals("")'>
            <![CDATA[ AND NOPER_CONFIRM_DOC.JSILJA >= #{jsilja1} ]]>
        </if>
        <if test='jsilja2!=null and !jsilja2.equals("")'>
            <![CDATA[ AND NOPER_CONFIRM_DOC.JSILJA <= #{jsilja2} ]]>
        </if>
        <if test='trilja1!=null and !trilja1.equals("")'>
            <![CDATA[ AND NOPER_CONFIRM_DOC.TRILJA >= #{trilja1} ]]>
        </if>
        <if test='trilja2!=null and !trilja2.equals("")'>
            <![CDATA[ AND NOPER_CONFIRM_DOC.TRILJA <= #{trilja2} ]]>
        </if>
        ) T
        <if test='searchJuso!=null and !searchJuso.equals("")'>
            WHERE (REGEXP_REPLACE(T.NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.NEW_ADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.NA_ROAD_NM, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.NEWADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY RN DESC
    </select>

    <!-- 기존 무허가확인원 상세1 -->
    <select id="confirmationDetail" resultType="LedgerDTO" parameterType="LedgerDTO">
        SELECT
        A.GMSKK, F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME, A.GMDJGB, A.GMSEQCO,
        F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.gmhjdcd)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI) GMSKKNAME,
        A.NEW_ADDR1,
        A.DHBH, A.DHGBH, A.DONGBH, A.DONGGBH, A.DAEJANG, A.GMSKKCD,
        A.GMBJDCD, A.GMHJDCD, A.GMCSAH, A.GMCBUH, A.GMCJI, A.GMCOH,
        A.GMGZCD, A.GMYD, A.GMBSDONG, A.GMGUNP, A.TOJIMJ,
        (decode(nvl(A.GMMUNJUK,0),0,nvl(A.GMGUNP,0)*3.3058,A.GMMUNJUK)) as GMMUNJUK,
        (decode(nvl(A.TOJIMUNJUK,0),0,nvl(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK)) as TOJIMUNJUK,
        nvl((select SUM(NVL(RECOM.GMBGUNP,0)) FROM REMOVE_OWNER_RECOM RECOM
        WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0) AS GMBGUNP,
        nvl((select SUM(NVL(RECOM.GMBTOJIMJ,0)) FROM REMOVE_OWNER_RECOM RECOM
        WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0) AS GMBTOJIMJ,
        nvl((select SUM(decode(nvl(RECOM.GMBMJUK,0),0,nvl(RECOM.GMBGUNP,0)*3.3058,RECOM.GMBMJUK)) FROM REMOVE_OWNER_RECOM RECOM
        WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0) AS GMBMJUK,
        nvl((select SUM(decode(nvl(RECOM.GMBTOJIMJUK,0),0,nvl(RECOM.GMBTOJIMJ,0)*3.3058,RECOM.GMBTOJIMJUK)) FROM REMOVE_OWNER_RECOM RECOM
        WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0) AS GMBTOJIMJUK,
        (select DECODE(count(RECOM.GMSKK),0,0,1) FROM REMOVE_OWNER_RECOM RECOM
        WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO) AS RECOM_YN,
        A.GMFOORS, A.GMGUNIL, A.TOJISG, A.TOJIJMG, A.TOJIDP, A.JIGUJDG, A.JIGUGB, A.JIGUUG,
        A.JIGUDZ, A.GMWEBAN, A.GMWEBANNO, A.DECISION, A.REASON, A.BGSTOP, A.UPDATEC,
        RTRIM(A.DEGB) AS DEGB,  DECODE(A.GMWEBAN, NULL,'N','Y') GMWEBANYN,
        DECODE(A.GMWEBANNO, NULL,'N','0','N','Y') GMWEBANNOYN,
        A.NA_BJDONG_NO,  A.NA_ROAD_NM, A.NA_MAIN_BUN, A.NA_SUB_BUN,
        A.NA_ETC, DECODE(A.BGSTOP, NULL,'N','Y') BGSTOPYN
        FROM
        NOPER_MASTER A
        WHERE A.GMSKK = #{gmskk}
        AND A.GMDJGB = #{gmdjgb}
        AND A.GMSEQCO = #{gmseqco}
        AND A.NEWYN ='Y'
    </select>
    <!-- 기존 무허가확인원 상세2 확인원발급대장 -->
    <select id="confirmationDetail2" parameterType="NoperConfirmDocDTO" resultType="NoperConfirmDocDTO">
        SELECT
        GMSKK, GMDJGB, GMSEQCO, CONILNO, JSILJA, TRILJA, SINNAME, SINJUGB,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SINJUMIN))) FROM dual WHERE SINJUMIN IS NOT NULL) AS SINJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SINJUMIN))) FROM dual WHERE SINJUMIN IS NOT NULL),0,6) AS SINJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SINJUMIN))) FROM dual WHERE SINJUMIN IS NOT NULL),8,7) AS SINJUMIN2,
        BGSU, CHARGETEL, SINZIP1, SINZIP2, SINSNA, SINJNAME, BIGO, NA_BJDONG_NO,
        NA_ROAD_NM, NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, NA_SIGUNGU_CD, NEW_ADDR1,
        NEW_ADDR2, ISSUEORGKEY,
        (SELECT PRNTNM FROM K00SIGUD WHERE SKKCD= #{gmskk} AND KEY = ISSUEORGKEY) as ISSUEORGNM
        FROM NOPER_CONFIRM_DOC
        WHERE GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND CONILNO = #{conilno}
    </select>
    <!-- 기존 무허가확인원 상세3 확인원발급대장 -->
    <select id="confirmationDetail3" parameterType="NoperOwnerDTO" resultType="NoperOwnerDTO">
        SELECT
        GMJILNO, GMJNAME, GMJJGN,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL) AS GMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),0,6) GMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) GMJJUMIN2,
        GMZIP1, GMZIP2, GMJJNAME, NA_BJDONG_NO, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, NA_SIGUNGU_CD,
        NEW_ADDR1, NEW_ADDR2, GMJSNA, GMJSAJUSO
        FROM NOPER_OWNER
        WHERE DELETE_AT='N'
        AND GMSKK= #{gmskk}
        AND GMDJGB= #{gmdjgb}
        AND GMSEQCO= #{gmseqco}
        ORDER BY GMJILNO ASC
    </select>

    <!-- 기존무허가확인원 등록 -->
    <insert id="confirmationAdd" parameterType="ConfirmationDTO">
        INSERT INTO NOPER_CONFIRM_DOC (
        GMSKK, GMDJGB, GMSEQCO, CONILNO, JSILJA, TRILJA, SINNAME, SINJUGB,
        SINJUMIN, SINZIP1,SINZIP2, SINSNA, SINJNAME, BGSU, BIGO, CHARGETEL,
        ISSUEORGKEY, NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, NA_SIGUNGU_CD,
        NEW_ADDR1, NEW_ADDR2, REGIST_ID
        ) VALUES (
        #{gmskk}, #{gmdjgb}, #{gmseqco}, #{conilno},
        #{jsilja}, #{trilja}, #{sinname}, #{sinjugb},
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{sinjumin}))) FROM dual),
        #{sinzip1}, #{sinzip2}, #{sinsna},
        #{sinjname}, #{bgsu}, #{bigo}, #{chargetel},
        #{issueorgkey}, #{naBjdongNo}, #{naRoadCd}, #{naRoadNm},
        #{naMainBun}, #{naSubBun}, #{naEtc}, #{naSigunguCdOwner},
        #{roadaddr}, #{jibunaddr}, #{userId}
        )
    </insert>

    <!-- 기존무허가확인원 채번 -->
    <select id="confirmationNo" parameterType="String" resultType="String">
        SELECT TO_CHAR(SYSDATE,'YYYY')||DECODE((MAX(TO_NUMBER(DECODE(TO_CHAR(SYSDATE,'YYYY'),SUBSTR(CONILNO,0,4),SUBSTR(CONILNO,5,5),0)))+1),  NULL,1,(MAX(TO_NUMBER(DECODE(TO_CHAR(SYSDATE,'YYYY'),SUBSTR(CONILNO,0,4),SUBSTR(CONILNO,5,5),0)))+1)) FROM NOPER_CONFIRM_DOC WHERE GMSKK = #{gmskk}
    </select>

    <!-- 기존무허가확인원 발급기관키 -->
    <select id="confirmationIssuerKey" parameterType="String" resultType="RenovationDTO">
        SELECT
        KEY, PRNTNM,PRNTNM2
        FROM K00SIGUD
        WHERE SKKCD= #{gmskk}
        ORDER BY KEY ASC
    </select>
    <!-- 기존무허가확인원 수정 -->
    <update id="confirmationUpdate" parameterType="ConfirmationDTO">
        UPDATE NOPER_CONFIRM_DOC SET
        JSILJA = #{jsilja}, TRILJA = #{trilja}, SINNAME = #{sinname},
        SINJUGB = #{sinjugb},
        SINJUMIN = (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{sinjumin}))) FROM dual),
        SINZIP1 = #{sinzip1},
        SINZIP2 = #{sinzip2}, SINSNA = #{sinsna}, SINJNAME = #{sinjname},
        BGSU = #{bgsu}, BIGO = #{bigo}, CHARGETEL = #{chargetel},
        UPDATE_ID = #{userId}, UPDATE_TS = SYSDATE
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 기존무허가 확인원 히스토리 등록을 위한 조회 -->
    <select id="findConfirmationDOC" parameterType="ConfirmationDTO" resultType="ConfirmationDTO">
        SELECT GMSKK,
               GMDJGB,
               GMSEQCO,
               CONILNO,
               JSILJA,
               TRILJA,
               SINNAME,
               SINJUGB,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SINJUMIN))) FROM dual WHERE SINJUMIN IS NOT NULL) AS SINJUMIN,
               SINZIP1,
               SINZIP2,
               SINJNAME,
               SINSNA,
               BGSU,
               BIGO,
               ISSUEORGKEY,
               CHARGETEL,
               NEW_ADDR1 AS ROADADDR,
               NEW_ADDR2 AS JIBUNADDR
        FROM NOPER_CONFIRM_DOC
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND CONILNO = #{conilno}
    </select>

    <!-- 기존무허가 확인원 히스토리 등록 -->
    <insert id="confirmationHisAdd" parameterType="ConfirmationDTO">
        INSERT INTO HIS_NOPER_CONFIRM_DOC (
            GMSKK, GMDJGB, GMSEQCO, CRDATE, CONILNO,
            JSILJA, TRILJA, SINNAME, SINJUGB, SINJUMIN, SINZIP1, SINZIP2,
            SINJNAME, SINSNA, BGSU, BIGO, ISSUEORGKEY, CHARGETEL, REGIST_ID, REGIST_TS, NEW_ADDR1, NEW_ADDR2, DELC
        ) VALUES (
            #{gmskk}, #{gmdjgb}, #{gmseqco}, (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL),
            #{conilno}, #{jsilja, jdbcType=VARCHAR}, #{trilja, jdbcType=VARCHAR}, #{sinname, jdbcType=VARCHAR},
            #{sinjugb, jdbcType=VARCHAR},
            (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{sinjumin, jdbcType=VARCHAR}))) FROM dual),
            #{sinzip1, jdbcType=VARCHAR},
            #{sinzip2, jdbcType=VARCHAR}, #{sinjname, jdbcType=VARCHAR}, #{sinsna, jdbcType=VARCHAR},
            #{bgsu, jdbcType=VARCHAR}, #{bigo, jdbcType=VARCHAR}, #{issueorgkey, jdbcType=VARCHAR},
            #{chargetel, jdbcType=VARCHAR}, #{userId}, SYSDATE, #{roadaddr, jdbcType=VARCHAR}, #{jibunaddr, jdbcType=VARCHAR} ,#{delc, jdbcType=VARCHAR}
        )
    </insert>


    <!-- 기존무허가확인원 삭제 -->
    <delete id="confirmationDel" parameterType="ConfirmationDTO">
        DELETE FROM NOPER_CONFIRM_DOC
        WHERE
            GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND CONILNO = #{conilno}
    </delete>


    <!-- 기존무허가 소유자변경 소유주 목록 리스트 -->
    <select id="findOwnerChange" resultType="OwnerChangeDTO">
        SELECT ROW_NUMBER() OVER(ORDER BY T.RN2) RN, T.* FROM (
        SELECT
        ROW_NUMBER() OVER(ORDER BY NOPER_OWNER_CHANGE.REGIST_TS, NOPER_OWNER_CHANGE.SUILNO, NOPER_OWNER_CHANGE.SUJILJA,
        NOPER_MASTER.GMSKK,NOPER_MASTER.GMDJGB, NOPER_MASTER.GMSEQCO) RN2,
        NOPER_MASTER.GMSKK||'-'||NOPER_MASTER.GMSEQCO||'-'||NOPER_OWNER_CHANGE.SUILNO SKKSEQNO,
        NOPER_MASTER.GMSKK||'-'||DECODE(NOPER_MASTER.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||NOPER_MASTER.GMSEQCO SKKSEQNO1,
        NOPER_OWNER_CHANGE.SUILNO,
        NOPER_OWNER_CHANGE.SUJILJA,
        NOPER_OWNER_CHANGE.CRILJA,
        NOPER_OWNER_CHANGE.GUBOGOILJA,
        COALESCE(NOPER_OWNER_CHANGE.BKSU, '-') BKSU,
        NOPER_OWNER_CHANGE.GMJNAME,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.GMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.GMJJUMIN IS NOT NULL) AS GMJJUMIN,
        NOPER_OWNER_CHANGE.JGMJNAME,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.JGMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.JGMJJUMIN IS NOT NULL) AS JGMJJUMIN,
        NOPER_OWNER_CHANGE.GMJSNA||' '||NOPER_OWNER_CHANGE.GMJJNAME GMJUSO,
        NOPER_OWNER_CHANGE.JGMJSNA||' '||NOPER_OWNER_CHANGE.JGMJJNAME JGMJUSO,
        NOPER_MASTER.GMSKK,
        NOPER_MASTER.GMDJGB,
        NOPER_MASTER.GMSEQCO,
        NOPER_MASTER.GMGZCD,
        NOPER_MASTER.GMGUNP,
        NOPER_MASTER.GMFOORS,
        NOPER_MASTER.GMGUNIL,
        NOPER_MASTER.TOJIMJ,
        NOPER_MASTER.TOJIDP,
        NOPER_MASTER.JIGUJDG,
        NOPER_MASTER.JIGUGB,
        NOPER_MASTER.JIGUUG,
        NOPER_MASTER.JIGUDZ,
        COALESCE(F_CDNAME(87,NOPER_MASTER.GMCSAH), '-') GMCSAH,
        DECODE(RTRIM(NOPER_MASTER.DEGB),'Y','Y','C','N','N') AS DEGB,
        RTRIM(nvl(NOPER_MASTER.DEGB,'A')) as degb_temp,
        SUBSTR(F_BJD_NAME(GMSKKCD,GMBJDCD),1,40)||'
        '||COM_CODE.CDVALUE||''||NOPER_MASTER.GMCBUH||'-'||NOPER_MASTER.GMCJI||' '||NOPER_MASTER.GMCOH BJUSO,
        NVL(NOPER_MASTER.NEW_ADDR1, '-') AS NEW_ADDR1,
        NVL2(NOPER_MASTER.NEW_ADDR2, NOPER_MASTER.NEW_ADDR2, DECODE(NOPER_MASTER.GMHJDCD,'',
        F_BJD_NAME(NOPER_MASTER.GMSKKCD,NOPER_MASTER.GMBJDCD)||'
        '||NOPER_MASTER.GMCBUH||DECODE(NOPER_MASTER.GMCJI,'','','-'||NOPER_MASTER.GMCJI),
        F_BJDNAME(NOPER_MASTER.GMSKKCD,NOPER_MASTER.GMBJDCD,NOPER_MASTER.GMHJDCD)||'
        '||NOPER_MASTER.GMCBUH||DECODE(NOPER_MASTER.GMCJI,'','','-'||NOPER_MASTER.GMCJI))) AS NEWADDR2
        FROM
        NOPER_MASTER NOPER_MASTER,
        NOPER_OWNER_CHANGE NOPER_OWNER_CHANGE,
        COM_CODE COM_CODE
        WHERE
        NOPER_MASTER.GMSKK = NOPER_OWNER_CHANGE.GMSKK
        AND NOPER_MASTER.GMDJGB = NOPER_OWNER_CHANGE.GMDJGB
        AND NOPER_MASTER.GMSEQCO = NOPER_OWNER_CHANGE.GMSEQCO
        AND NOPER_MASTER.GMCSAH = COM_CODE.CDKEY(+)
        AND '87' = COM_CODE.CDID(+)
        AND NOPER_OWNER_CHANGE.DELGB IS NULL
        AND NOPER_MASTER.NEWYN = 'Y'
            <if test='gmskk!=null and !gmskk.equals("")'>
                AND NOPER_MASTER.GMSKK = #{gmskk}
            </if>
            <if test='gmdjgb!=null and !gmdjgb.equals("")'>
                AND NOPER_MASTER.GMDJGB = #{gmdjgb}
            </if>
            <choose>
                <when test='gmseqco.equals("") and !gmseqco2.equals("")'>
                    <![CDATA[ AND NOPER_MASTER.GMSEQCO <= #{gmseqco2} ]]>
                </when>
                <when test='!gmseqco.equals("") and gmseqco2.equals("")'>
                    <![CDATA[ AND NOPER_MASTER.GMSEQCO = #{gmseqco} ]]>
                </when>
                <when test='!gmseqco.equals("") and !gmseqco2.equals("")'>
                    <![CDATA[ AND NOPER_MASTER.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2} ]]>
                </when>
                <otherwise>
                </otherwise>
            </choose>
            <if test='daejang!=null and !daejang.equals("")'>
                AND NOPER_MASTER.DAEJANG = #{daejang}
            </if>
            <if test='gmjname!=null and !gmjname.equals("")'>
                AND NOPER_OWNER_CHANGE.GMJNAME = #{gmjname}
            </if>
            <if test='gmskkcd!=null and !gmskkcd.equals("")'>
                AND NOPER_MASTER.GMSKKCD = #{gmskkcd}
            </if>
            <if test='gmhjdcd!=null and !gmhjdcd.equals("")'>
                AND NOPER_MASTER.GMHJDCD = #{gmhjdcd}
            </if>
            <if test='gmbjdcd!=null and !gmbjdcd.equals("")'>
                AND NOPER_MASTER.GMBJDCD = #{gmbjdcd}
            </if>
            <if test='gmcsah!=null and !gmcsah.equals("")'>
                AND NOPER_MASTER.GMCSAH = #{gmcsah}
            </if>
            <if test='gmcbuh!=null and !gmcbuh.equals("")'>
                AND NOPER_MASTER.GMCBUH = #{gmcbuh}
            </if>
            <if test='gmcji!=null and !gmcji.equals("")'>
                AND NOPER_MASTER.GMCJI = #{gmcji}
            </if>
            <if test='sujilja1!=null and !sujilja1.equals("")'>
                <![CDATA[ AND NOPER_OWNER_CHANGE.SUJILJA >= #{sujilja1}]]>
            </if>
            <if test='sujilja2!=null and !sujilja2.equals("")'>
                <![CDATA[ AND NOPER_OWNER_CHANGE.SUJILJA <= #{sujilja2}]]>
            </if>
            <if test='crilja1!=null and !crilja1.equals("")'>
                <![CDATA[ AND NOPER_OWNER_CHANGE.CRILJA >= #{crilja1}]]>
            </if>
            <if test='crilja2!=null and !crilja2.equals("")'>
                <![CDATA[ AND NOPER_OWNER_CHANGE.CRILJA <= #{crilja2}]]>
            </if>
            <if test='changDivision.equals("etc")'>
                AND NOPER_OWNER_CHANGE.CHANG_DIVISION IS NULL
            </if>
            <if test='changDivision!=null and !changDivision.equals("") and !changDivision.equals("etc")'>
                AND NOPER_OWNER_CHANGE.CHANG_DIVISION = #{changDivision}
            </if>
            ORDER BY RN2 DESC
        ) T
        <if test='searchJuso!=null and !searchJuso.equals("")'>
            WHERE (REGEXP_REPLACE(T.NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.NEWADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY RN DESC
    </select>

    <!-- 기존무허가 소유자변경관리 건물 상세 -->
    <select id="findOwnerChangeGmj" parameterType="String" resultType="LedgerDTO">
        SELECT
        A.GMSKK, F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME,
        A.GMDJGB, A.GMSEQCO,
        NVL2(A.NEW_ADDR2, A.NEW_ADDR2, DECODE(A.GMHJDCD, '',
            F_BJD_NAME(A.GMSKKCD, A.GMBJDCD) || ' ' || F_CDNAME(87, A.GMCSAH) ||
            ' ' || A.GMCBUH || DECODE(A.GMCJI, '', '', '-' || A.GMCJI),
            F_BJDNAME(A.GMSKKCD, A.GMBJDCD, A.GMHJDCD) || ' ' ||
            F_CDNAME(87, A.GMCSAH) || ' ' || A.GMCBUH ||
            DECODE(A.GMCJI, '', '', '-' || A.GMCJI))) GMSKKNAME,
        A.DHBH, A.DHGBH, A.DONGBH, A.DONGGBH,
        A.DAEJANG, A.GMSKKCD, A.GMBJDCD, A.GMHJDCD,
        A.GMCSAH, A.GMCBUH, A.GMCJI, A.GMCOH,
        A.GMGZCD, A.GMYD, A.GMBSDONG, A.GMFOORS, A.GMGUNIL,
        (A.GMGUNP-nvl((select SUM(NVL(RECOM.GMBGUNP,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS GMGUNP,
        (A.TOJIMJ-nvl((select SUM(NVL(RECOM.GMBTOJIMJ,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS TOJIMJ,
        (decode(nvl(A.GMMUNJUK,0),0,nvl(A.GMGUNP,0)*3.3058,A.GMMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBMJUK,0),0,nvl(RECOM.GMBGUNP,0)*3.3058,RECOM.GMBMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS GMMUNJUK,
        (decode(nvl(A.TOJIMUNJUK,0),0,nvl(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBTOJIMJUK,0),0,nvl(RECOM.GMBTOJIMJ,0)*3.3058,RECOM.GMBTOJIMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS TOJIMUNJUK,
        A.TOJISG, A.TOJIJMG,
        A.TOJIDP, A.JIGUJDG,
        A.JIGUGB, A.JIGUUG,
        A.JIGUDZ, A.GMWEBAN,
        A.GMWEBANNO, A.DECISION,
        A.REASON, A.BGSTOP,
        A.UPDATEC, RTRIM(A.DEGB) AS DEGB,
        A.NA_BJDONG_NO, A.NA_ROAD_NM,
        A.NA_MAIN_BUN, A.NA_SUB_BUN,
        A.NA_ETC, A.NA_SIGUNGU_CD,
        DECODE(A.GMWEBAN, NULL,'N','Y') GMWEBANYN,
        DECODE(A.GMWEBANNO, NULL,'N','0','N','Y') GMWEBANNOYN,
        DECODE(A.BGSTOP, NULL,'N','Y') BGSTOPYN,
        NVL(A.NEW_ADDR1, '-') NEW_ADDR1, A.NEW_ADDR2
        FROM
        NOPER_MASTER A
        WHERE A.GMSKK = #{gmskk}
        AND A.GMDJGB = #{gmdjgb}
        AND A.GMSEQCO = #{gmseqco}
        AND A.NEWYN = 'Y'
    </select>

    <!--- 소유자변경 현 소유주 일련정보gmjilno -->
    <select id="ownerChangeGmilNo" parameterType="String" resultType="String">
        SELECT
        COUNT(*) AS CNTGMJ
        FROM
        NOPER_OWNER
        WHERE GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
    </select>

    <!--- 소유자변경 파일이 정보 -->
    <select id="ownerChangeFileList" parameterType="String" resultType="OwnerChangeDTO">
        SELECT
        ROW_NUMBER() OVER(ORDER BY NOPER_OWNER_CHANGE.GMSKK,NOPER_OWNER_CHANGE.GMDJGB, NOPER_OWNER_CHANGE.GMSEQCO, NOPER_OWNER_CHANGE.SUILNO DESC) RN,
        NOPER_OWNER_CHANGE.SUILNO,
        NOPER_OWNER_CHANGE.GMJILNO,
        (select replace(to_char(NOPER_OWNER_CHANGE.SUJILJA,'9999,99,99'),',','-') from dual) AS SUJILJA,
        (select replace(to_char(NOPER_OWNER_CHANGE.CRILJA,'9999,99,99'),',','-') from dual) AS CRILJA,
        NOPER_OWNER_CHANGE.GUBOGOILJA,
        NOPER_OWNER_CHANGE.BKSU,
        NOPER_OWNER_CHANGE.GMJNAME,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.GMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.GMJJUMIN IS NOT NULL) AS GMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.GMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.GMJJUMIN IS NOT NULL), 0,6) AS GMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.GMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.GMJJUMIN IS NOT NULL), 8,7) AS GMJJUMIN2,
        NOPER_OWNER_CHANGE.JGMJNAME,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.JGMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.JGMJJUMIN IS NOT NULL) AS JGMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.JGMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.JGMJJUMIN IS NOT NULL), 0,6) AS JGMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.JGMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.JGMJJUMIN IS NOT NULL), 8,7) AS JGMJJUMIN2,
        NOPER_OWNER_CHANGE.GMJJGN,
        NOPER_OWNER_CHANGE.JGMJJGN,
        NOPER_OWNER_CHANGE.GMJSNA||' '||NOPER_OWNER_CHANGE.GMJJNAME GMJUSO,
        NOPER_OWNER_CHANGE.JGMJSNA||' '||NOPER_OWNER_CHANGE.JGMJJNAME JGMJUSO,
        NOPER_OWNER_CHANGE.GMJSNA,
        NOPER_OWNER_CHANGE.GMJJNAME,
        NOPER_OWNER_CHANGE.JGMJSNA,
        NOPER_OWNER_CHANGE.JGMJJNAME,
        NOPER_OWNER_CHANGE.GMJZIP1,
        NOPER_OWNER_CHANGE.GMJZIP2,
        NOPER_OWNER_CHANGE.JGMJZIP1,
        NOPER_OWNER_CHANGE.JGMJZIP2,
        NOPER_OWNER_CHANGE.BIGO,
        NOPER_OWNER_CHANGE.DELC,
        DECODE(NOPER_OWNER_CHANGE.ISSUEORGKEY,NULL,'',K00SIGUD.PRNTNM) ISSUEORGKEY,
        NOPER_OWNER_CHANGE.SGPJNO,
        NOPER_OWNER_CHANGE.SALESPRICE,
        (select replace(to_char(NOPER_OWNER_CHANGE.SGPJDATE,'9999,99,99'),',','-') from dual) AS SGPJDATE,
        NOPER_OWNER_CHANGE.SGPJDATE,
        FILEINFO.FILE_SEQ,
        FILEINFO.LOGICAL_FILENAME,
        FILEINFO.PHYSICAL_FILENAME,
        FILEINFO.FILE_PATH,
        FILEINFO.FILE_END,
        FILEINFO.FILE_SIZE,
        NOPER_OWNER_CHANGE.NA_BJDONG_NO,
        NOPER_OWNER_CHANGE.NA_ROAD_NM,
        NOPER_OWNER_CHANGE.NA_MAIN_BUN,
        NOPER_OWNER_CHANGE.NA_SUB_BUN,
        NOPER_OWNER_CHANGE.NA_ETC,
        NOPER_OWNER_CHANGE.NA_SIGUNGU_CD,
        NOPER_OWNER_CHANGE.J_NA_BJDONG_NO,
        NOPER_OWNER_CHANGE.J_NA_ROAD_NM,
        NOPER_OWNER_CHANGE.J_NA_MAIN_BUN,
        NOPER_OWNER_CHANGE.J_NA_SUB_BUN,
        NOPER_OWNER_CHANGE.J_NA_ETC,
        NOPER_OWNER_CHANGE.J_NA_SIGUNGU_CD,
        NOPER_OWNER_CHANGE.NEW_ADDR1,
        NOPER_OWNER_CHANGE.NEW_ADDR2,
        NOPER_OWNER_CHANGE.J_NEW_ADDR1,
        NOPER_OWNER_CHANGE.J_NEW_ADDR2,
        DECODE(NOPER_OWNER_CHANGE.GMJJUMIN, NOPER_OWNER.GMJJUMIN, 'Y','N') AS GMJYN
        FROM
        NOPER_OWNER_CHANGE NOPER_OWNER_CHANGE,
        NOPER_OWNER NOPER_OWNER,
        K00SIGUD K00SIGUD,
        NOPER_OWNER_CHANGE_FILE FILEINFO
        WHERE
        NOPER_OWNER.gmskk = noper_owner_change.gmskk
        and NOPER_OWNER.GMDJGB = noper_owner_change.GMDJGB
        and NOPER_OWNER.GMSEQCO = noper_owner_change.GMSEQCO
        and NOPER_OWNER.GMJILNO = noper_owner_change.GMJILNO
        AND FILEINFO.GMSKK(+) = NOPER_OWNER_CHANGE.GMSKK
        AND FILEINFO.GMDJGB(+) = NOPER_OWNER_CHANGE.GMDJGB
        AND FILEINFO.GMSEQCO(+) = NOPER_OWNER_CHANGE.GMSEQCO
        AND FILEINFO.GMJILNO(+) = NOPER_OWNER_CHANGE.GMJILNO
        AND FILEINFO.SUILNO(+) = NOPER_OWNER_CHANGE.SUILNO
        AND FILEINFO.FILE_SEQ(+) = NOPER_OWNER_CHANGE.FILE_SEQ
        AND NOPER_OWNER_CHANGE.DELGB IS NULL
        AND NOPER_OWNER_CHANGE.ISSUEORGKEY = K00SIGUD.KEY(+)
        AND NOPER_OWNER_CHANGE.GMSKK = K00SIGUD.SKKCD(+)
        AND NOPER_OWNER_CHANGE.GMSKK = #{gmskk}
        AND NOPER_OWNER_CHANGE.GMDJGB = #{gmdjgb}
        AND NOPER_OWNER_CHANGE.GMSEQCO = #{gmseqco}
        AND NOPER_OWNER_CHANGE.GMJILNO = #{gmjilno}
    </select>
    <!--- 소유자변경 소유주 이력 리스트 -->
    <select id="ownerChangeDetailList" parameterType="String" resultType="OwnerChangeDTO">
        SELECT
        ROW_NUMBER() OVER(ORDER BY NOPER_MASTER.GMSKK,NOPER_MASTER.GMDJGB, NOPER_MASTER.GMSEQCO, NOPER_OWNER_CHANGE.SUILNO ASC) RN,
        NOPER_MASTER.GMSKK||'-'||NOPER_MASTER.GMSEQCO||'-'||NOPER_OWNER_CHANGE.SUILNO SKKSEQNO,
        NOPER_MASTER.GMSKK||'-'||DECODE(NOPER_MASTER.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||NOPER_MASTER.GMSEQCO SKKSEQNO1,
        NOPER_MASTER.GMSKK||'-'||NOPER_MASTER.GMDJGB||'-'||NOPER_MASTER.GMSEQCO||'-'||NOPER_OWNER_CHANGE.SUILNO SKKSEQNO2,
        NOPER_OWNER_CHANGE.SUILNO, COALESCE(NOPER_OWNER_CHANGE.SUJILJA, '-') SUJILJA, COALESCE(NOPER_OWNER_CHANGE.CRILJA, '-') CRILJA,
        NOPER_OWNER_CHANGE.GUBOGOILJA,COALESCE(NOPER_OWNER_CHANGE.BKSU, '-') BKSU, NOPER_OWNER_CHANGE.GMJNAME,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.GMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.GMJJUMIN IS NOT NULL) AS GMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.GMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.GMJJUMIN IS NOT NULL), 0,6) AS GMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.GMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.GMJJUMIN IS NOT NULL), 8,7) AS GMJJUMIN2,
        COALESCE(NOPER_OWNER_CHANGE.JGMJNAME, '-') JGMJNAME,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.JGMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.JGMJJUMIN IS NOT NULL) AS JGMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.JGMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.JGMJJUMIN IS NOT NULL), 0,6) AS JGMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER_CHANGE.JGMJJUMIN))) FROM dual WHERE NOPER_OWNER_CHANGE.JGMJJUMIN IS NOT NULL), 8,7) AS JGMJJUMIN2,
        NOPER_OWNER_CHANGE.GMJJGN, NOPER_OWNER_CHANGE.JGMJJGN,
        NOPER_OWNER_CHANGE.GMJSNA||' '||NOPER_OWNER_CHANGE.GMJJNAME GMJUSO, NOPER_OWNER_CHANGE.JGMJSNA||' '||NOPER_OWNER_CHANGE.JGMJJNAME JGMJUSO,
        NOPER_OWNER_CHANGE.GMJSNA, NOPER_OWNER_CHANGE.GMJJNAME, NOPER_OWNER_CHANGE.JGMJSNA, NOPER_OWNER_CHANGE.JGMJJNAME,
        NOPER_OWNER_CHANGE.GMJZIP1, NOPER_OWNER_CHANGE.GMJZIP2,
        NOPER_OWNER_CHANGE.JGMJZIP1, NOPER_OWNER_CHANGE.JGMJZIP2,
        NOPER_OWNER_CHANGE.BIGO, NOPER_OWNER_CHANGE.DELC,  NOPER_OWNER_CHANGE.GMJILNO,
        NOPER_OWNER_CHANGE.NA_BJDONG_NO,  NOPER_OWNER_CHANGE.NA_ROAD_NM,
        NOPER_OWNER_CHANGE.NA_MAIN_BUN,  NOPER_OWNER_CHANGE.NA_SUB_BUN,
        NOPER_OWNER_CHANGE.NA_ETC, NOPER_OWNER_CHANGE.NA_SIGUNGU_CD,
        NOPER_OWNER_CHANGE.J_NA_BJDONG_NO, NOPER_OWNER_CHANGE.J_NA_ROAD_NM,
        NOPER_OWNER_CHANGE.J_NA_MAIN_BUN, NOPER_OWNER_CHANGE.J_NA_SUB_BUN,
        NOPER_OWNER_CHANGE.J_NA_ETC, NOPER_OWNER_CHANGE.J_NA_SIGUNGU_CD,
        COALESCE(NOPER_OWNER_CHANGE.NEW_ADDR1, '-') NEW_ADDR1, COALESCE(NOPER_OWNER_CHANGE.NEW_ADDR2, '-') NEW_ADDR2,
        NOPER_OWNER_CHANGE.J_NEW_ADDR1,   NOPER_OWNER_CHANGE.J_NEW_ADDR2,
        NOPER_MASTER.GMSKK, NOPER_MASTER.GMDJGB, NOPER_MASTER.GMSEQCO,
        NOPER_MASTER.GMGZCD, NOPER_MASTER.GMGUNP,
        NOPER_MASTER.GMFOORS, NOPER_MASTER.GMGUNIL,
        NOPER_MASTER.TOJIMJ, NOPER_MASTER.TOJIDP,
        NOPER_MASTER.JIGUJDG, NOPER_MASTER.JIGUGB,
        NOPER_MASTER.JIGUUG, NOPER_MASTER.JIGUDZ,
        NOPER_OWNER_CHANGE.SGPJNO, NOPER_OWNER_CHANGE.SGPJDATE, NOPER_OWNER_CHANGE.SALESPRICE,
        DECODE(RTRIM(NOPER_MASTER.DEGB),'Y','Y','C','Y','N') AS DEGB,
        SUBSTR(F_BJD_NAME(GMSKKCD,GMBJDCD),1,40)||' '||COM_CODE.CDVALUE||''||NOPER_MASTER.GMCBUH||'-'||NOPER_MASTER.GMCJI||' '||NOPER_MASTER.GMCOH BJUSO,
        DECODE(NOPER_OWNER_CHANGE.GMJJUMIN, NOPER_OWNER.GMJJUMIN, 'Y','N') AS GMJYN,
        DECODE(NOPER_OWNER_CHANGE.ISSUEORGKEY,NULL,'',K00SIGUD.PRNTNM) ISSUEORGKEY,
        COALESCE((SELECT USER_NAME FROM NOPER_USER WHERE USER_ID = NOPER_OWNER_CHANGE.REGIST_ID), '-') AS USER_NAME,
        TO_CHAR(NOPER_OWNER_CHANGE.REGIST_TS, 'YYYYMMDD') REGIST_TS
        FROM
        NOPER_MASTER NOPER_MASTER, COM_CODE COM_CODE, NOPER_OWNER NOPER_OWNER,
        K00SIGUD K00SIGUD, NOPER_OWNER_CHANGE NOPER_OWNER_CHANGE
        WHERE
        NOPER_OWNER.DELETE_AT='N'
        AND NOPER_MASTER.GMSKK = NOPER_OWNER_CHANGE.GMSKK
        AND NOPER_MASTER.GMDJGB = NOPER_OWNER_CHANGE.GMDJGB
        AND NOPER_MASTER.GMSEQCO = NOPER_OWNER_CHANGE.GMSEQCO
        AND NOPER_OWNER.GMSKK = NOPER_OWNER_CHANGE.GMSKK(+)
        AND NOPER_OWNER.GMDJGB = NOPER_OWNER_CHANGE.GMDJGB(+)
        AND NOPER_OWNER.GMSEQCO = NOPER_OWNER_CHANGE.GMSEQCO(+)
        AND NOPER_OWNER.GMJILNO = '1'
        AND NOPER_MASTER.GMCSAH   = COM_CODE.CDKEY(+)
        AND '87' = COM_CODE.CDID(+)
        AND NOPER_OWNER_CHANGE.ISSUEORGKEY = K00SIGUD.KEY(+)
        AND NOPER_OWNER_CHANGE.GMSKK = K00SIGUD.SKKCD(+)
        AND NOPER_OWNER_CHANGE.DELGB IS NULL
        AND NOPER_MASTER.GMSKK = #{gmskk} --'11230'
        AND NOPER_MASTER.GMDJGB = #{gmdjgb} --'0'
        AND NOPER_MASTER.GMSEQCO = #{gmseqco} --'8878'
        AND NOPER_MASTER.NEWYN = 'Y'
        ORDER BY RN DESC
    </select>


    <!--
    소유자변경 소유주 변경상세
    주민번호 하이픈이 없고 자리수가 13일 경우 주민번호에 하이픈 추가해줌
    -->
    <select id="ownerChangeDetail" parameterType="string" resultType="OwnerChangeDTO">
        WITH JUMIN AS (
            SELECT
                CASE
                    WHEN LENGTH((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL)) = 13 AND INSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL), '-') = 0
                    THEN SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL), 0, 6) || '-' || SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL), 7, 7)
                    ELSE (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL)
                    END AS GMJJUMIN,
                CASE
                    WHEN LENGTH((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL)) = 13 AND INSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL), '-') = 0
                    THEN SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL), 0, 6) || '-' || SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL), 7, 7)
                    ELSE (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL)
                    END AS JGMJJUMIN
            FROM NOPER_OWNER_CHANGE
            WHERE GMSKK = #{gmskk}
              AND GMDJGB = #{gmdjgb}
              AND GMSEQCO = #{gmseqco}
              AND SUILNO = #{suilno}
              AND GMJILNO = #{gmjilno}
        )
        SELECT
        ROW_NUMBER() OVER(ORDER BY NOPER_MASTER.GMSKK,NOPER_MASTER.GMDJGB, NOPER_MASTER.GMSEQCO, NOPER_OWNER_CHANGE.SUILNO ASC) RN,
        NOPER_MASTER.GMSKK||'-'||NOPER_MASTER.GMSEQCO||'-'||NOPER_OWNER_CHANGE.SUILNO SKKSEQNO,
        NOPER_MASTER.GMSKK||'-'||DECODE(NOPER_MASTER.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||NOPER_MASTER.GMSEQCO SKKSEQNO1,
        NOPER_MASTER.GMSKK||'-'||NOPER_MASTER.GMDJGB||'-'||NOPER_MASTER.GMSEQCO||'-'||NOPER_OWNER_CHANGE.SUILNO SKKSEQNO2,
        NOPER_OWNER_CHANGE.SUILNO, NOPER_OWNER_CHANGE.SUJILJA, NOPER_OWNER_CHANGE.CRILJA,  NOPER_OWNER_CHANGE.GUBOGOILJA,
        NOPER_OWNER_CHANGE.BKSU, NOPER_OWNER_CHANGE.GMJNAME,
        JUMIN.GMJJUMIN AS GMJJUMIN,
        SUBSTR(JUMIN.GMJJUMIN, 0,6) AS GMJJUMIN1,
        SUBSTR(JUMIN.GMJJUMIN, 8,7) AS GMJJUMIN2,
        NOPER_OWNER_CHANGE.JGMJNAME,NOPER_OWNER_CHANGE.SGPJDATE,
        NOPER_OWNER_CHANGE.SGPJNO, NOPER_OWNER_CHANGE.SALESPRICE,
        JUMIN.JGMJJUMIN AS JGMJJUMIN,
        SUBSTR(JUMIN.JGMJJUMIN, 0,6) AS JGMJJUMIN1,
        SUBSTR(JUMIN.JGMJJUMIN, 8,7) AS JGMJJUMIN2,
        NOPER_OWNER_CHANGE.GMJJGN, NOPER_OWNER_CHANGE.JGMJJGN,
        NOPER_OWNER_CHANGE.GMJSNA||' '||NOPER_OWNER_CHANGE.GMJJNAME GMJUSO, NOPER_OWNER_CHANGE.JGMJSNA||' '||NOPER_OWNER_CHANGE.JGMJJNAME JGMJUSO,
        NOPER_OWNER_CHANGE.GMJSNA, NOPER_OWNER_CHANGE.GMJJNAME, NOPER_OWNER_CHANGE.JGMJSNA, NOPER_OWNER_CHANGE.JGMJJNAME,
        NOPER_OWNER_CHANGE.GMJZIP1, NOPER_OWNER_CHANGE.GMJZIP2,
        NOPER_OWNER_CHANGE.JGMJZIP1, NOPER_OWNER_CHANGE.JGMJZIP2,
        NOPER_OWNER_CHANGE.BIGO, NOPER_OWNER_CHANGE.DELC,  NOPER_OWNER_CHANGE.GMJILNO,
        NOPER_OWNER_CHANGE.NA_BJDONG_NO,  NOPER_OWNER_CHANGE.NA_ROAD_NM,
        NOPER_OWNER_CHANGE.NA_MAIN_BUN,  NOPER_OWNER_CHANGE.NA_SUB_BUN,
        NOPER_OWNER_CHANGE.NA_ETC, NOPER_OWNER_CHANGE.NA_SIGUNGU_CD,
        NOPER_OWNER_CHANGE.J_NA_BJDONG_NO, NOPER_OWNER_CHANGE.J_NA_ROAD_NM,
        NOPER_OWNER_CHANGE.J_NA_MAIN_BUN, NOPER_OWNER_CHANGE.J_NA_SUB_BUN,
        NOPER_OWNER_CHANGE.J_NA_ETC, NOPER_OWNER_CHANGE.J_NA_SIGUNGU_CD,
        NOPER_OWNER_CHANGE.NEW_ADDR1, NOPER_OWNER_CHANGE.NEW_ADDR2,
        NOPER_OWNER_CHANGE.J_NEW_ADDR1,   NOPER_OWNER_CHANGE.J_NEW_ADDR2,
        NOPER_MASTER.GMSKK, NOPER_MASTER.GMDJGB, NOPER_MASTER.GMSEQCO,
        NOPER_MASTER.GMGZCD, NOPER_MASTER.GMGUNP,
        NOPER_MASTER.GMFOORS, NOPER_MASTER.GMGUNIL,
        NOPER_MASTER.TOJIMJ, NOPER_MASTER.TOJIDP,
        NOPER_MASTER.JIGUJDG, NOPER_MASTER.JIGUGB,
        NOPER_MASTER.JIGUUG, NOPER_MASTER.JIGUDZ,
        DECODE(RTRIM(NOPER_MASTER.DEGB),'Y','Y','C','Y','N') AS DEGB,
        SUBSTR(F_BJD_NAME(GMSKKCD,GMBJDCD),1,40)||' '||COM_CODE.CDVALUE||''||NOPER_MASTER.GMCBUH||'-'||NOPER_MASTER.GMCJI||' '||NOPER_MASTER.GMCOH BJUSO,
        DECODE(NOPER_OWNER_CHANGE.GMJJUMIN, NOPER_OWNER.GMJJUMIN, 'Y','N') AS GMJYN,
        DECODE(NOPER_OWNER_CHANGE.ISSUEORGKEY,NULL,'',K00SIGUD.PRNTNM) ISSUEORGKEY,
        NOPER_OWNER_CHANGE.ISSUEORGKEY ISSUE
        FROM
        NOPER_MASTER NOPER_MASTER,  NOPER_OWNER_CHANGE NOPER_OWNER_CHANGE,
        COM_CODE COM_CODE, NOPER_OWNER NOPER_OWNER,
        K00SIGUD K00SIGUD, JUMIN JUMIN
        WHERE
        NOPER_OWNER.DELETE_AT='N'
        AND NOPER_MASTER.GMSKK = NOPER_OWNER_CHANGE.GMSKK
        AND NOPER_MASTER.GMDJGB = NOPER_OWNER_CHANGE.GMDJGB
        AND NOPER_MASTER.GMSEQCO = NOPER_OWNER_CHANGE.GMSEQCO
        AND NOPER_OWNER.GMSKK = NOPER_OWNER_CHANGE.GMSKK(+)
        AND NOPER_OWNER.GMDJGB = NOPER_OWNER_CHANGE.GMDJGB(+)
        AND NOPER_OWNER.GMSEQCO = NOPER_OWNER_CHANGE.GMSEQCO(+)
        AND NOPER_OWNER.GMJILNO = '1'
        AND NOPER_MASTER.GMCSAH   = COM_CODE.CDKEY(+)
        AND '87' = COM_CODE.CDID(+)
        AND NOPER_OWNER_CHANGE.ISSUEORGKEY = K00SIGUD.KEY(+)
        AND NOPER_OWNER_CHANGE.GMSKK = K00SIGUD.SKKCD(+)
        AND NOPER_OWNER_CHANGE.DELGB IS NULL
        AND NOPER_MASTER.GMSKK = #{gmskk}
        AND NOPER_MASTER.GMDJGB = #{gmdjgb}
        AND NOPER_MASTER.GMSEQCO = #{gmseqco}
        AND NOPER_OWNER_CHANGE.SUILNO = #{suilno}
        AND NOPER_OWNER_CHANGE.GMJILNO = #{gmjilno}
        AND NOPER_MASTER.NEWYN = 'Y'
        ORDER BY RN DESC
    </select>

    <!-- 소유주 변경 -->
    <update id="ownerChangeUpdate" parameterType="OwnerChangeDTO">
        UPDATE NOPER_OWNER
        SET GMJNAME =  #{gmjname},
            GMJJGN = #{gmjjgn},
            GMJJUMIN = (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin}))) FROM dual),
            GMZIP1 = #{gmzip1},
            GMZIP2 = #{gmzip2},
            GMJSNA = #{gmjsna},
            GMJJNAME = #{gmjjname},
            NEW_ADDR1 = #{newaddr1},
            NEW_ADDR2 = #{newaddr2},
            UPDATE_ID = #{userId},
            NA_BJDONG_NO = #{naBjdongNo},
            NA_ROAD_NM = #{naRoadNm},
            NA_MAIN_BUN = #{naMainBun},
            NA_SUB_BUN = #{naSubBun},
            NA_ETC = #{naEtc},
            NA_SIGUNGU_CD = #{naSigunguCd},
            UPDATE_TS = SYSDATE
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND GMJILNO = #{gmjilno}
          AND DELETE_AT='N'
    </update>
    <!-- 소유주변경 채번 -->

    <!-- 소유주삭제 -->
    <delete id="ownerDell" parameterType="OwnerChangeDTO">
        DELETE FROM NOPER_OWNER
        WHERE GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
    </delete>

    <insert id="ownerInsert" parameterType="OwnerChangeDTO">
        INSERT INTO NOPER_OWNER (
        GMSKK, GMDJGB, GMSEQCO, GMJILNO,
        GMJNAME, GMJJGN, GMJJUMIN, GMZIP1,
        GMZIP2, GMJSNA, <!-- GMJJNAME,-->
        NA_BJDONG_NO,
        NA_ROAD_NM, NA_MAIN_BUN,
        NA_SUB_BUN, NA_ETC,
        NA_SIGUNGU_CD, NEW_ADDR1,
        NEW_ADDR2, REGIST_ID, DELETE_AT
        ) VALUES (
        #{gmskk}, #{gmdjgb},
        #{gmseqco}, '1',
        #{gmjname}, #{gmjjgn},
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin}))) FROM dual),
        #{gmzip1}, #{gmzip2},
        #{gmjsna},
        #{naBjdongNo},
        #{naRoadNm}, #{naMainBun},
        #{naSubBun}, #{naEtc},
        #{naSigunguCd}, #{newaddr1},
        #{newaddr2}, #{userId}, 'N'
        )
    </insert>

    <!-- 히스토리 메인-->

    <!--파일 채번 -->
    <select id="fileSeqNo" resultType="String">
        SELECT NVL(MAX(FILE_SEQ),0) + 1 AS FILE_SEQ FROM NOPER_OWNER_CHANGE_FILE
    </select>
    <!-- 소유자변경이력 저장 -->
    <insert id="saveOwnerChange"  parameterType="OwnerChangeDTO">
        INSERT INTO NOPER_OWNER_CHANGE (
        GMSKK,	GMDJGB,	GMSEQCO, GMJILNO,
        SUILNO, SUJILJA, GMJNAME, GMJJGN,
        GMJJUMIN, GMJZIP1,	GMJZIP2, GMJSNA,
        GMJJNAME, NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, NA_SIGUNGU_CD,
        NEW_ADDR1, NEW_ADDR2, REGIST_ID, REGIST_TS, CHANG_DIVISION,
        SGPJDATE, BKSU, BIGO, ISSUEORGKEY, SALESPRICE, SGPJNO, CRILJA,
        JGMJSNA, JGMJNAME, J_NEW_ADDR1, J_NEW_ADDR2, JGMJJUMIN
        ) VALUES (
        #{gmskk}, #{gmdjgb},
        #{gmseqco}, #{gmjilno}, #{suilno},
        #{sujilja},
        #{gmjname}, #{gmjjgn},
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin}))) FROM dual),
        #{gmjzip1}, #{gmjzip2}, #{gmjsna}, #{gmjjname},
        #{naBjdongNo}, #{naRoadCd}, #{naRoadNm}, #{naMainBun},
        #{naSubBun}, #{naEtc}, #{naSigunguCdOwner},
        #{newaddr1}, #{newaddr2}, #{userId}, SYSDATE, #{changDivision},
        #{sgpjdate}, #{bksu}, #{bigo}, #{issue}, #{salesprice}, #{sgpjno}, TO_CHAR(SYSDATE,'YYYYMMDD'),
        #{jgmjsna}, #{jgmjname}, #{jnewAddr1}, #{jnewAddr2},
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{jgmjjumin}))) FROM dual)
        )
    </insert>

    <update id="modyOwnerChange" parameterType="OwnerChangeDTO">
        UPDATE NOPER_OWNER_CHANGE SET
        SUJILJA = #{sujilja},
        GMJNAME = #{gmjname},
        GMJJGN =  #{gmjjgn},
        GMJJUMIN = (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin}))) FROM dual),
        GMJZIP1 = #{gmjzip1},
        GMJZIP2 = #{gmjzip2},
        GMJSNA = #{gmjsna},
        GMJJNAME = #{gmjjname},
        NA_BJDONG_NO = #{naBjdongNo},
        NA_ROAD_CD = #{naRoadCd},
        NA_ROAD_NM = #{naRoadNm},
        NA_MAIN_BUN = #{naMainBun},
        NA_SUB_BUN = #{naSubBun},
        NA_ETC = #{naEtc},
        NA_SIGUNGU_CD = #{naSigunguCdOwner},
        NEW_ADDR1 = #{newaddr1},
        NEW_ADDR2 = #{newaddr2},
        UPDATE_ID = #{userId},
        UPDATE_TS = SYSDATE,
        CHANG_DIVISION = #{changDivision},
        SGPJDATE = #{sgpjdate},
        BIGO = #{bigo},
        ISSUEORGKEY = #{issue},
        SALESPRICE = #{salesprice},
        SGPJNO = #{sgpjno},
        CRILJA = TO_CHAR(SYSDATE,'YYYYMMDD')
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND SUILNO = #{suilno}
        AND GMJILNO = #{gmjilno}
    </update>

    <delete id="ledgerDellOwnerChangeDell" parameterType="OwnerChangeDTO">
        DELETE FROM NOPER_OWNER_CHANGE
        WHERE
        GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND SUILNO = #{suilno}
    </delete>

    <!-- 히스토리 소유주변경 저장 -->
    <insert id="hisOwnerChangeAdd" parameterType="OwnerChangeDTO" useGeneratedKeys="false">
        INSERT INTO HIS_NOPER_OWNER_CHANGE (
        GMJILNO, GMSKK, GMDJGB, GMSEQCO, CRDATE, SUILNO,
        SUJILJA, GMJNAME, GMJJGN, GMJJUMIN, GMJZIP1, GMJZIP2,
        GMJJNAME, GMJSNA, JGMJNAME, JGMJJGN, JGMJJUMIN, JGMJZIP1,
        JGMJZIP2, JGMJJNAME, JGMJSNA, CRILJA, BKSU, GUBOGOILJA,
        BIGO, FILE_SEQ, ISSUEORGKEY, NA_BJDONG_NO, NA_ROAD_CD, NA_ROAD_NM,
        NA_MAIN_BUN, NA_SUB_BUN, NA_ETC, NA_SIGUNGU_CD,
        J_NA_BJDONG_NO, J_NA_ROAD_CD, J_NA_ROAD_NM, J_NA_MAIN_BUN,
        J_NA_SUB_BUN, J_NA_ETC, J_NA_SIGUNGU_CD, NEW_ADDR1,
        NEW_ADDR2, J_NEW_ADDR1, J_NEW_ADDR2, REGIST_ID
        ) SELECT
        GMJILNO, GMSKK, GMDJGB, GMSEQCO,
        (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL),
        SUILNO, SUJILJA, GMJNAME, GMJJGN,
        GMJJUMIN, GMJZIP1, GMJZIP2, GMJJNAME,
        GMJSNA, JGMJNAME, JGMJJGN, JGMJJUMIN,
        JGMJZIP1, JGMJZIP2, JGMJJNAME, JGMJSNA,
        CRILJA, BKSU, '0', BIGO, #{fileSeq},
        ISSUEORGKEY, NA_BJDONG_NO, NA_ROAD_CD,
        NA_ROAD_NM, NA_MAIN_BUN, NA_SUB_BUN, NA_ETC,
        NA_SIGUNGU_CD, J_NA_BJDONG_NO, J_NA_ROAD_CD, J_NA_ROAD_NM,
        J_NA_MAIN_BUN, J_NA_SUB_BUN, J_NA_ETC, J_NA_SIGUNGU_CD,
        NEW_ADDR1, NEW_ADDR2, J_NEW_ADDR1, J_NEW_ADDR2, #{userId}
        FROM
        NOPER_OWNER_CHANGE
        WHERE
        GMJILNO = #{gmjilno}
        AND GMSKK = #{gmskk}
        AND GMDJGB = #{gmdjgb}
        AND GMSEQCO = #{gmseqco}
        AND SUILNO = #{suilno}
    </insert>



    <!-- 소유주 병합조회 count 조회 -->
    <select id="ownerCount" parameterType="String" resultType="String">
    SELECT COUNT(*) FROM NOPER_OWNER WHERE DELETE_AT = 'N'
    AND GMSKK = #{gmskk}
    AND GMDJGB = #{gmdjgb}
    AND GMSEQCO = #{gmseqco}
    </select>
    <!-- 소유주 병합조회1 조회 -->
    <select id="absorptionNoperMaster" parameterType="String" resultType="LedgerDTO">
        SELECT
        A.GMSKK, F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME, A.GMDJGB, A.GMSEQCO,
        NVL2(A.NEW_ADDR2, A.NEW_ADDR2, DECODE(A.GMHJDCD, '',
            F_BJD_NAME(A.GMSKKCD, A.GMBJDCD) || ' ' || F_CDNAME(87, A.GMCSAH) ||
            ' ' || A.GMCBUH || DECODE(A.GMCJI, '', '', '-' || A.GMCJI),
            F_BJDNAME(A.GMSKKCD, A.GMBJDCD, A.GMHJDCD) || ' ' ||
            F_CDNAME(87, A.GMCSAH) || ' ' || A.GMCBUH ||
            DECODE(A.GMCJI, '', '', '-' || A.GMCJI))) GMSKKNAME,
        A.DHBH, A.DHGBH, A.DONGBH, A.DONGGBH,
        A.DAEJANG, A.GMSKKCD, A.GMBJDCD, A.GMHJDCD,
        A.GMCSAH, A.GMCBUH, A.GMCJI, A.GMCOH,
        A.GMGZCD, A.GMYD, A.GMBSDONG, A.GMFOORS, A.GMGUNIL,
        COALESCE(A.GMGUNP-nvl((select SUM(NVL(RECOM.GMBGUNP,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0), 0) AS GMGUNP,
        COALESCE(A.TOJIMJ-nvl((select SUM(NVL(RECOM.GMBTOJIMJ,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0), 0) AS TOJIMJ,
        COALESCE((decode(nvl(A.GMMUNJUK,0),0,nvl(A.GMGUNP,0)*3.3058,A.GMMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBMJUK,0),0,nvl(RECOM.GMBGUNP,0)*3.3058,RECOM.GMBMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)), 0) AS GMMUNJUK,
        COALESCE((decode(nvl(A.TOJIMUNJUK,0),0,nvl(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBTOJIMJUK,0),0,nvl(RECOM.GMBTOJIMJ,0)*3.3058,RECOM.GMBTOJIMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)), 0) AS TOJIMUNJUK,
        A.TOJISG, A.TOJIJMG, A.TOJIDP, A.JIGUJDG, A.JIGUGB, A.JIGUUG,
        A.JIGUDZ, A.GMWEBAN, A.GMWEBANNO, A.DECISION, A.REASON, A.BGSTOP,
        A.UPDATEC, RTRIM(A.DEGB) AS DEGB, A.NA_BJDONG_NO, A.NA_ROAD_NM,
        A.NA_MAIN_BUN, A.NA_SUB_BUN, A.NA_ETC, A.NA_SIGUNGU_CD,
        DECODE(A.GMWEBAN, NULL,'N','Y') GMWEBANYN,
        DECODE(A.GMWEBANNO, NULL,'N','0','N','Y') GMWEBANNOYN,
        DECODE(A.BGSTOP, NULL,'N','Y') BGSTOPYN,
        COALESCE(A.NEW_ADDR1, '-') NEW_ADDR1
        FROM
        NOPER_MASTER A
        WHERE A.GMSKK = #{gmskk} --'11230'
        AND A.GMDJGB = #{gmdjgb}
        AND A.GMSEQCO = #{gmseqco}
        AND A.NEWYN = 'Y'
    </select>
    <!-- 소유주 병합조회2 조회 -->
    <select id="absorptionNoperOwner" parameterType="String" resultType="NoperOwnerDTO">
        SELECT
        ROW_NUMBER() OVER(ORDER BY GMJILNO) RN,
        GMSKK, GMDJGB, GMSEQCO, GMJILNO,
        GMJNAME, GMJJGN,
        (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL) AS GMJJUMIN,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),0,6) GMJJUMIN1,
        SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) GMJJUMIN2,
        GMZIP1, GMZIP2, GMJJNAME, NA_BJDONG_NO,
        NA_ROAD_NM, NA_MAIN_BUN, NA_SUB_BUN, NA_ETC,
        NA_SIGUNGU_CD, COALESCE(NEW_ADDR1, '-') NEW_ADDR1, COALESCE(NEW_ADDR2, '-') NEW_ADDR2, GMJSNA
        FROM NOPER_OWNER
        WHERE GMSKK= #{gmskk} --'11230'
        AND GMDJGB= #{gmdjgb} --'0'
        AND GMSEQCO= #{gmseqco} --'398'
        AND DELETE_AT='N'
        ORDER BY GMJILNO ASC
    </select>

    <!-- 현장점검대장현황 조회 - List 화면 조회 -->
    <select id="findNoperSiteChk" parameterType="NoperSiteChkDTO" resultType="NoperSiteChkDTO">
        /* UnlicensedBuildingManagementRepository.findNoperSiteChk */
        SELECT * FROM
            (SELECT
                 ROW_NUMBER() OVER(ORDER BY NCHK.REG_DTIME) RN,
                 NCHK.GMSKK,
                 NCHK.GMDJGB,
                 NCHK.GMSEQCO,
                 NCHK.CHKILNO,
                 TO_CHAR(TO_DATE(NCHK.CHK_DATE, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS CHK_DATE,
                 NCHK.CHK_CHARGE_CLSPOS,
                 NCHK.CHK_CHARGE_NM,
                 (A.GMSKK||'-'||DECODE(A.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||A.GMSEQCO) AS GMBUNHO,
                 DECODE(A.GMHJDCD,'',F_BJD_NAME(A.GMSKKCD,A.GMBJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI), F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.GMHJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI)) AS GMSKKNAME,
                 SUBSTR(DECODE(F_GROUP_GZJCOUNT(A.GMSKK,A.GMDJGB,A.GMSEQCO),0,'없음',1,B.GMJNAME,B.GMJNAME||' 외'||TO_CHAR(F_GROUP_GZJCOUNT(A.GMSKK,A.GMDJGB,A.GMSEQCO)-1)||'명'),1,40) GMJNAME,
                 /*B.GMJNAME GMJNAME,*/
                 DECODE(NVL(A.GMMUNJUK,0),0,NVL(A.GMGUNP,0)*3.3058,A.GMMUNJUK) AS GMMUNJUK,
                 DECODE(A.GMFOORS,'','',A.GMFOORS||'층') GMFLOORS,
                 A.GMGZCD,
                 A.GMYD,
                 NCHK.VIOL_YN,
                 NCHK.VIOL_CNTT,
                 NCHK.TRSCT_CNTT,
                 NVL2(NCHK.TRSCT_CNTT, 'Y', 'N') trsctCnttYn,
                 NCHK.REM,
                 DECODE(NVL(A.TOJIMUNJUK,0),0,NVL(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK) AS TOJIMUNJUK,
                 NCHK.CONFIRM1,
                 NCHK.CONFIRM2,
                 NCHK.CHK_CHARGE_ID,
                 NCHK.TRSCT_CNFM_ID,
                 NCHK.TRSCT_CNFM_NM,
                 NCHK.TRSCT_DATE,
                 NCHK.TRSCT_CNFM_CLSPOS,
                 (SELECT CDVALUE FROM COM_CODE WHERE CDKEY=NCHK.CHK_CHARGE_GMSKK AND CDID='70' AND ROWNUM=1) AS CHK_CHARGE_GMSKK,
                 (SELECT CDVALUE FROM COM_CODE WHERE CDKEY=NCHK.TRSCT_CNFM_GMSKK AND CDID='70' AND ROWNUM=1) AS TRSCT_CNFM_GMSKK,
                 SUBSTR(NCHK.CHK_DATE,0,4) AS CHK_DATE_YEAR,
                 SUBSTR(NCHK.TRSCT_DATE,0,4) AS TRSCT_DATE_YEAR,
                 A.NEW_ADDR1 NEW_ADDR1,
                 NVL2(A.NEW_ADDR2, A.NEW_ADDR2, DECODE(A.GMHJDCD,'',F_BJD_NAME(A.GMSKKCD,A.GMBJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI), F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.GMHJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI))) NEW_ADDR2
             FROM
                 NOPER_MASTER A, CMP_BJDONG_MGM D,
                 (SELECT * FROM NOPER_OWNER WHERE GMJILNO(+) = 1 ) B ,
                 (SELECT * FROM NOPER_SITE_CHK WHERE DELETE_AT='N') NCHK
             WHERE B.DELETE_AT(+)='N'
               AND A.GMSKK = B.GMSKK(+)
               AND A.GMDJGB = B.GMDJGB(+)
               AND A.GMSEQCO = B.GMSEQCO(+)
               AND (A.DEGB IS NULL OR A.DEGB = 'N' OR A.DEGB = 'C')
               AND A.NEWYN='Y'
               AND D.HJDONG_CD(+) = A.GMHJDCD
               AND D.SIGUNGU_CD(+) = A.GMSKK
               AND D.BJDONG_CD(+) = A.GMBJDCD
               AND A.GMSKK = NCHK.GMSKK
               AND A.GMDJGB = NCHK.GMDJGB
               AND A.GMSEQCO = NCHK.GMSEQCO
        <if test='gmskk!=null and !gmskk.equals("")'>
            AND A.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND A.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco!=null and !gmseqco.equals("")'>
            AND A.GMSEQCO = #{gmseqco}
        </if>
        <if test='confirm1!=null and !confirm1.equals("")'>
            AND NCHK.CONFIRM1 = #{confirm1}
        </if>
        <if test='gmjname!=null and !gmjname.equals("")'>
            AND B.GMJNAME = #{gmjname}
        </if>
        <if test='chkDate!=null and !chkDate.equals("")'>
            <![CDATA[
            AND NCHK.CHK_DATE >= #{chkStDate} AND CHK_DATE <= #{chkEndDate}
            ]]>
        </if>
        ORDER BY NCHK.REG_DTIME DESC
        )
    </select>

    <!-- 현장점검대장현황 조회 - List Excel Download -->
    <select id="findNoperSiteChkExcel" parameterType="NoperSiteChkExcelDTO" resultType="NoperSiteChkExcelDTO">
        /* UnlicensedBuildingManagementRepository.findNoperSiteChkExcel */
        SELECT * FROM
        (SELECT
        ROW_NUMBER() OVER(ORDER BY NCHK.REG_DTIME) RN,
        NCHK.GMSKK,
        NCHK.GMDJGB,
        NCHK.GMSEQCO,
        NCHK.CHKILNO,
        TO_CHAR(TO_DATE(NCHK.CHK_DATE, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS CHK_DATE,
        NCHK.CHK_CHARGE_CLSPOS,
        NCHK.CHK_CHARGE_NM,
        (A.GMSKK||'-'||DECODE(A.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||A.GMSEQCO) AS GMBUNHO,
        DECODE(A.GMHJDCD,'',F_BJD_NAME(A.GMSKKCD,A.GMBJDCD)||' '||F_CDNAME(87,A.GMCSAH)||'
        '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI), F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.GMHJDCD)||'
        '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI)) AS GMSKKNAME,
        SUBSTR(DECODE(F_GROUP_GZJCOUNT(A.GMSKK,A.GMDJGB,A.GMSEQCO),0,'없음',1,B.GMJNAME,B.GMJNAME||'외'||TO_CHAR(F_GROUP_GZJCOUNT(A.GMSKK,A.GMDJGB,A.GMSEQCO)-1)||'명'),1,40) GMJNAME,
        /*B.GMJNAME,*/
        DECODE(NVL(A.GMMUNJUK,0),0,NVL(A.GMGUNP,0)*3.3058,A.GMMUNJUK) AS GMMUNJUK,
        DECODE(A.GMFOORS,'','',A.GMFOORS||'층') GMFLOORS,
        A.GMGZCD,
        A.GMYD,
        NCHK.VIOL_YN,
        NCHK.VIOL_CNTT,
        NCHK.TRSCT_CNTT,
        NVL2(NCHK.TRSCT_CNTT, 'Y', 'N') trsctCnttYn,
        NCHK.REM,
        DECODE(NVL(A.TOJIMUNJUK,0),0,NVL(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK) AS TOJIMUNJUK,
        NCHK.CONFIRM1,
        NCHK.CONFIRM2,
        NCHK.CHK_CHARGE_ID,
        NCHK.TRSCT_CNFM_ID,
        NCHK.TRSCT_CNFM_NM,
        NCHK.TRSCT_DATE,
        NCHK.TRSCT_CNFM_CLSPOS,
        (SELECT CDVALUE FROM COM_CODE WHERE CDKEY=NCHK.CHK_CHARGE_GMSKK AND CDID='70' AND ROWNUM=1) AS CHK_CHARGE_GMSKK,
        (SELECT CDVALUE FROM COM_CODE WHERE CDKEY=NCHK.TRSCT_CNFM_GMSKK AND CDID='70' AND ROWNUM=1) AS TRSCT_CNFM_GMSKK,
        SUBSTR(NCHK.CHK_DATE,0,4) AS CHK_DATE_YEAR,
        SUBSTR(NCHK.TRSCT_DATE,0,4) AS TRSCT_DATE_YEAR
        FROM
        NOPER_MASTER A, CMP_BJDONG_MGM D,
        (SELECT * FROM NOPER_OWNER WHERE GMJILNO(+) = 1 ) B ,
        (SELECT * FROM NOPER_SITE_CHK WHERE DELETE_AT='N') NCHK
        WHERE B.DELETE_AT(+)='N'
        AND A.GMSKK = B.GMSKK(+)
        AND A.GMDJGB = B.GMDJGB(+)
        AND A.GMSEQCO = B.GMSEQCO(+)
        AND (A.DEGB IS NULL OR A.DEGB = 'N' OR A.DEGB = 'C')
        AND A.NEWYN='Y'
        AND D.HJDONG_CD(+) = A.GMHJDCD
        AND D.SIGUNGU_CD(+) = A.GMSKK
        AND D.BJDONG_CD(+) = A.GMBJDCD
        AND A.GMSKK = NCHK.GMSKK
        AND A.GMDJGB = NCHK.GMDJGB
        AND A.GMSEQCO = NCHK.GMSEQCO
        <if test='gmskk!=null and !gmskk.equals("")'>
            AND A.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND A.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco!=null and !gmseqco.equals("")'>
            AND A.GMSEQCO = #{gmseqco}
        </if>
        <if test='confirm1!=null and !confirm1.equals("")'>
            AND NCHK.CONFIRM1 = #{confirm1}
        </if>
        <if test='gmjname!=null and !gmjname.equals("")'>
            AND B.GMJNAME = #{gmjname}
        </if>
        <if test='chkDate!=null and !chkDate.equals("")'>
            <![CDATA[
            AND NCHK.CHK_DATE >= #{chkStDate} AND CHK_DATE <= #{chkEndDate}
            ]]>
        </if>
        ORDER BY NCHK.REG_DTIME DESC
        )
    </select>

    <!-- 개보수신고관리 조회 화면 조회 -->
    <select id="findRenovationList" parameterType="RenovationDTO" resultType="RenovationDTO">
        /* UnlicensedBuildingManagementRepository.findRenovationList */
        SELECT
                     ROW_NUMBER() OVER(ORDER BY B.GBSGOIL) RN
                   , A.GMSKK || '-' || DECODE(A.GMDJGB, '0', '등재', '1', '미등재', '2', '항측판독', '')|| '-' || A.GMSEQCO SKKSEQNO
                   , B.GBSGOIL
                   , SUBSTR(B.GBSGOIL, 0, 4) || '-' || SUBSTR(B.GBSGOIL, 5, 2) || '-' || SUBSTR(B.GBSGOIL, 7, 2) AS GBSGOIL_V
                   , B.GMILNO
                   , A.GMSKK
                   , A.GMDJGB
                   , A.GMSEQCO
                   , A.GMSKK || ''-'' || A.GMSEQCO GUNMULNO
                   , B.GMBALNO
                   , B.GBSCOTENT
                   , SUBSTR(B.GMBALNO, 1, 4)|| '-' || SUBSTR(B.GMBALNO, 5, 4) BALNO
                   , B.WBGB
                   , B.CHCONTENT
                   , B.JGONG
                   , SUBSTR(B.JGONG, 0, 4) || '-' || SUBSTR(B.JGONG, 5, 2) || '-' || SUBSTR(B.JGONG, 7, 2) AS JGONG_V
                   , B.HHGNAME
                   , B.HHNAME
                   , B.SINDA
                   , B.SINDA1
                   , B.JUNGON
                   , B.JUNGON1
                   , SUBSTR(F_BJD_NAME(GMSKKCD, GMBJDCD), 1, 40) BJUSO
                   , D.CDVALUE || '' || A.GMCBUH || '-' || A.GMCJI BJUSO1
                   , A.GMGZCD
                   , A.GMGUNP
                   , A.GMFOORS
                   , A.GMGUNIL
                   , SUBSTR(A.GMGUNIL, 0, 4) || '-' || SUBSTR(A.GMGUNIL, 5, 2) || '-' || SUBSTR(A.GMGUNIL, 7, 2) AS GMGUNIL_V
                   , A.TOJIMJ
                   , A.TOJIDP
                   , A.JIGUJDG
                   , A.JIGUGB
                   , A.JIGUUG
                   , A.JIGUDZ
                   , DECODE(A.DEGB, 'Y', '철거') DEGB
                   , SUBSTR(DECODE(f_group_gzjcount(A.GMSKK, A.GMDJGB, A.GMSEQCO) , 0, '없음', 1, C.GMJNAME , C.GMJNAME || ' 외' || TO_CHAR(f_group_gzjcount(A.GMSKK, A.GMDJGB, A.GMSEQCO)-1)|| '명'), 1, 40) GMJNAME
                   /*, C.GMJNAME GMJNAME*/
                   /*, C.GMJJUMIN */
                   , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(C.GMJJUMIN))) FROM dual WHERE C.GMJJUMIN IS NOT NULL) AS GMJJUMIN
                   , C.GMJSNA KJUSO
                   , C.GMJJNAME KJUSO1
                FROM NOPER_MASTER A, NOPER_FIX B, NOPER_OWNER C, COM_CODE D, K00CD02D E
               WHERE C.DELETE_AT='N'
                 AND A.GMSKK = C.GMSKK
                 AND A.GMDJGB = C.GMDJGB
                 AND A.GMSEQCO = C.GMSEQCO
                 AND A.GMSKK = B.GMSKK
                 AND A.GMDJGB = B.GMDJGB
                 AND A.GMSEQCO = B.GMSEQCO
                 AND A.GMSKKCD  = E.SKKCD(+)
                 AND A.GMBJDCD  = E.BJDCD(+)
                 AND A.GMHJDCD  = E.HJDCD(+)
                 AND A.GMCSAH   = D.CDKEY(+)
                 AND '87' = D.CDID(+)
                 AND C.GMJILNO = 1
                 AND A.NEWYN = 'Y'
        <if test='gmskk != null and !gmskk.equals("")'>
            AND A.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb != null and !gmdjgb.equals("")'>
            AND A.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco2 != null and !gmseqco2.equals("")'>
            <![CDATA[AND A.GMSEQCO <= #{gmseqco2}]]>
        </if>
        <if test='gmseqco != null and !gmseqco.equals("") and gmseqco2.equals("")'>
            <![CDATA[AND A.GMSEQCO = #{gmseqco}]]>
        </if>
        <if test='(gmseqco != null and !gmseqco.equals("")) and (gmseqco2 != null and !gmseqco2.equals(""))'>
            AND A.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2}
        </if>
        <if test='gmjname != null and !gmjname.equals("")'>
            AND C.GMJNAME = #{gmjname}
        </if>
        <if test='gmskkcd != null and !gmskkcd.equals("")'>
            AND A.GMSKKCD = #{gmskkcd}
        </if>
        <if test='gmhjdcd != null and !gmhjdcd.equals("")'>
            AND A.GMHJDCD = #{gmhjdcd}
        </if>
        <if test='gmbjdcd != null and !gmbjdcd.equals("")'>
            AND A.GMBJDCD = #{gmbjdcd}
        </if>
        <if test='gmcsah != null and !gmcsah.equals("")'>
            AND A.GMCSAH = #{gmcsah}
        </if>
        <if test='gmcbuh != null and !gmcbuh.equals("")'>
            AND A.GMCBUH = #{gmcbuh}
        </if>
        <if test='gmcji != null and !gmcji.equals("")'>
            AND A.GMCJI = #{gmcji}
        </if>
        <if test='gmgunil1 != null and !gmgunil1.equals("")'>
            <![CDATA[AND A.GMGUNIL >= #{gmgunil1}]]>
        </if>
        <if test='gmgunil2 != null and !gmgunil2.equals("")'>
            <![CDATA[AND A.GMGUNIL <= #{gmgunil2}]]>
        </if>
        <if test='gbsgoil1 != null and !gbsgoil1.equals("")'>
            <![CDATA[AND B.GBSGOIL >= #{gbsgoil1}]]>
        </if>
        <if test='gbsgoil2 != null and !gbsgoil2.equals("")'>
            <![CDATA[AND B.GBSGOIL <= #{gbsgoil2}]]>
        </if>
        <if test='jgong1 != null and !jgong1.equals("")'>
            <![CDATA[AND B.JGONG >= #{jgong1}]]>
        </if>
        <if test='jgong2 != null and !jgong2.equals("")'>
            <![CDATA[AND B.JGONG <= #{jgong2}]]>
        </if>
        <if test='searchJuso != null and !searchJuso.equals("")'>
            AND (REGEXP_REPLACE(A.NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                 REGEXP_REPLACE(A.NEW_ADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                 REGEXP_REPLACE(C.GMJSNA, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                 REGEXP_REPLACE(NVL2(A.NEW_ADDR2, A.NEW_ADDR2, F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.gmhjdcd)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI)), '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                 REGEXP_REPLACE(F_BJD_NAME(A.GMSKKCD,A.GMBJDCD), '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY B.GBSGOIL DESC, BALNO DESC
    </select>

    <!-- 개보수신고관리 조회 화면 조회 - Excel Download -->
    <select id="findRenovationListExcel" parameterType="RenovationExcelDTO" resultType="RenovationExcelDTO">
        /* UnlicensedBuildingManagementRepository.findRenovationListExcel */
        SELECT
        ROW_NUMBER() OVER(ORDER BY B.GBSGOIL) RN
        , A.GMSKK || '-' || DECODE(A.GMDJGB, '0', '등재', '1', '미등재', '2', '항측판독', '')|| '-' || A.GMSEQCO SKKSEQNO
        , B.GBSGOIL
        , SUBSTR(B.GBSGOIL, 0, 4) || '-' || SUBSTR(B.GBSGOIL, 5, 2) || '-' || SUBSTR(B.GBSGOIL, 7, 2) AS GBSGOIL_V
        , B.GMILNO
        , A.GMSKK
        , A.GMDJGB
        , A.GMSEQCO
        , A.GMSKK || ''-'' || A.GMSEQCO GUNMULNO
        , B.GMBALNO
        , B.GBSCOTENT
        , SUBSTR(B.GMBALNO, 1, 4)|| '-' || SUBSTR(B.GMBALNO, 5, 4) BALNO
        , B.WBGB
        , B.CHCONTENT
        , B.JGONG
        , SUBSTR(B.JGONG, 0, 4) || '-' || SUBSTR(B.JGONG, 5, 2) || '-' || SUBSTR(B.JGONG, 7, 2) AS JGONG_V
        , B.HHGNAME
        , B.HHNAME
        , B.SINDA
        , B.SINDA1
        , B.JUNGON
        , B.JUNGON1
        , SUBSTR(F_BJD_NAME(GMSKKCD, GMBJDCD), 1, 40) BJUSO
        , D.CDVALUE || '' || A.GMCBUH || '-' || A.GMCJI BJUSO1
        , A.GMGZCD
        , A.GMGUNP
        , A.GMFOORS
        , A.GMGUNIL
        , SUBSTR(A.GMGUNIL, 0, 4) || '-' || SUBSTR(A.GMGUNIL, 5, 2) || '-' || SUBSTR(A.GMGUNIL, 7, 2) AS GMGUNIL_V
        , A.TOJIMJ
        , A.TOJIDP
        , A.JIGUJDG
        , A.JIGUGB
        , A.JIGUUG
        , A.JIGUDZ
        , DECODE(A.DEGB, 'Y', '철거') DEGB
        , SUBSTR(DECODE(f_group_gzjcount(A.GMSKK, A.GMDJGB, A.GMSEQCO) , 0, '없음', 1, C.GMJNAME , C.GMJNAME || ' 외' || TO_CHAR(f_group_gzjcount(A.GMSKK, A.GMDJGB, A.GMSEQCO)-1)|| '명'), 1, 40) GMJNAME
        /*, C.GMJNAME GMJNAME*/
        /*, C.GMJJUMIN */
        , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(C.GMJJUMIN))) FROM dual WHERE C.GMJJUMIN IS NOT NULL) AS GMJJUMIN
        , C.GMJSNA KJUSO
        , C.GMJJNAME KJUSO1
        FROM NOPER_MASTER A, NOPER_FIX B, NOPER_OWNER C, COM_CODE D, K00CD02D E
        WHERE C.DELETE_AT='N'
        AND A.GMSKK = C.GMSKK
        AND A.GMDJGB = C.GMDJGB
        AND A.GMSEQCO = C.GMSEQCO
        AND A.GMSKK = B.GMSKK
        AND A.GMDJGB = B.GMDJGB
        AND A.GMSEQCO = B.GMSEQCO
        AND A.GMSKKCD  = E.SKKCD(+)
        AND A.GMBJDCD  = E.BJDCD(+)
        AND A.GMHJDCD  = E.HJDCD(+)
        AND A.GMCSAH   = D.CDKEY(+)
        AND '87' = D.CDID(+)
        AND C.GMJILNO = 1
        AND A.NEWYN = 'Y'
        <if test='gmskk != null and !gmskk.equals("")'>
            AND A.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb != null and !gmdjgb.equals("")'>
            AND A.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco2 != null and !gmseqco2.equals("")'>
            <![CDATA[AND A.GMSEQCO <= #{gmseqco2}]]>
        </if>
        <if test='gmseqco != null and !gmseqco.equals("") and gmseqco2.equals("")'>
            <![CDATA[AND A.GMSEQCO = #{gmseqco}]]>
        </if>
        <if test='(gmseqco != null and !gmseqco.equals("")) and (gmseqco2 != null and !gmseqco2.equals(""))'>
            AND A.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2}
        </if>
        <if test='gmjname != null and !gmjname.equals("")'>
            AND C.GMJNAME = #{gmjname}
        </if>
        <if test='gmskkcd != null and !gmskkcd.equals("")'>
            AND A.GMSKKCD = #{gmskkcd}
        </if>
        <if test='gmhjdcd != null and !gmhjdcd.equals("")'>
            AND A.GMHJDCD = #{gmhjdcd}
        </if>
        <if test='gmbjdcd != null and !gmbjdcd.equals("")'>
            AND A.GMBJDCD = #{gmbjdcd}
        </if>
        <if test='gmcsah != null and !gmcsah.equals("")'>
            AND A.GMCSAH = #{gmcsah}
        </if>
        <if test='gmcbuh != null and !gmcbuh.equals("")'>
            AND A.GMCBUH = #{gmcbuh}
        </if>
        <if test='gmcji != null and !gmcji.equals("")'>
            AND A.GMCJI = #{gmcji}
        </if>
        <if test='gmgunil1 != null and !gmgunil1.equals("")'>
            <![CDATA[AND A.GMGUNIL >= #{gmgunil1}]]>
        </if>
        <if test='gmgunil2 != null and !gmgunil2.equals("")'>
            <![CDATA[AND A.GMGUNIL <= #{gmgunil2}]]>
        </if>
        <if test='gbsgoil1 != null and !gbsgoil1.equals("")'>
            <![CDATA[AND B.GBSGOIL >= #{gbsgoil1}]]>
        </if>
        <if test='gbsgoil2 != null and !gbsgoil2.equals("")'>
            <![CDATA[AND B.GBSGOIL <= #{gbsgoil2}]]>
        </if>
        <if test='jgong1 != null and !jgong1.equals("")'>
            <![CDATA[AND B.JGONG >= #{jgong1}]]>
        </if>
        <if test='jgong2 != null and !jgong2.equals("")'>
            <![CDATA[AND B.JGONG <= #{jgong2}]]>
        </if>
        <if test='searchJuso != null and !searchJuso.equals("")'>
            AND (REGEXP_REPLACE(A.NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
            REGEXP_REPLACE(A.NEW_ADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
            REGEXP_REPLACE(C.GMJSNA, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
            REGEXP_REPLACE(NVL2(A.NEW_ADDR2, A.NEW_ADDR2, F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.gmhjdcd)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI)), '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
            REGEXP_REPLACE(F_BJD_NAME(A.GMSKKCD,A.GMBJDCD), '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY B.GBSGOIL DESC, BALNO DESC
    </select>

    <!-- 개보수신고관리 등록/수정 화면 조회 - 발급기관 조회 -->
    <select id="findRenovationIssuerKey" parameterType="RenovationDTO" resultType="RenovationDTO">
        /* UnlicensedBuildingManagementRepository.findRenovationIssuerKey */
        SELECT
              KEY,
              PRNTNM,
              PRNTNM2
         FROM K00SIGUD
        WHERE SKKCD= #{gmskk}
        ORDER BY KEY ASC
    </select>

    <!-- 개보수신고관리 등록화면 조회 - 기본현황/소유자현황 -->
    <select id="findRenovationAddSearch" parameterType="RenovationDTO" resultType="RenovationDTO">
        /* UnlicensedBuildingManagementRepository.findRenovationAddSearch */
        SELECT
            A.GMSKK,
            F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME,
            A.GMDJGB,
            A.GMSEQCO,
            A.GMSKK || '-' || F_CDNAME('N01', A.GMDJGB) || '-' || A.GMSEQCO AS NUM,
            F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.gmhjdcd)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI) GMSKKNAME,
            A.DHBH,
            A.DHGBH,
            A.DONGBH,
            A.DONGGBH,
            A.DAEJANG,
            A.GMSKKCD,
            A.GMBJDCD,
            A.GMHJDCD,
            A.GMCSAH,
            A.GMCBUH,
            A.GMCJI,
            A.GMCOH,
            A.GMGZCD,
            A.GMYD,
            A.GMBSDONG,
            COALESCE(A.GMGUNP-nvl((select SUM(NVL(RECOM.GMBGUNP,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0), 0) AS GMGUNP,
            COALESCE(A.TOJIMJ-nvl((select SUM(NVL(RECOM.GMBTOJIMJ,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0), 0) AS TOJIMJ,
            (decode(nvl(A.GMMUNJUK,0),0,nvl(A.GMGUNP,0)*3.3058,A.GMMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBMJUK,0),0,nvl(RECOM.GMBGUNP,0)*3.3058,RECOM.GMBMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS GMMUNJUK,
            (decode(nvl(A.TOJIMUNJUK,0),0,nvl(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBTOJIMJUK,0),0,nvl(RECOM.GMBTOJIMJ,0)*3.3058,RECOM.GMBTOJIMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS TOJIMUNJUK,
            A.GMFOORS,
            A.GMGUNIL,
            A.TOJISG,
            A.TOJIJMG,
            A.TOJIDP,
            A.JIGUJDG,
            A.JIGUGB,
            A.JIGUUG,
            A.JIGUDZ,
            A.GMWEBAN,
            A.GMWEBANNO,
            A.DECISION,
            A.REASON,
            A.BGSTOP,
            A.UPDATEC,
            RTRIM(A.DEGB) AS DEGB,
            DECODE(A.GMWEBAN, NULL,'N','Y') GMWEBANYN,
            DECODE(A.GMWEBANNO, NULL,'N','0','N','Y') GMWEBANNOYN,
            DECODE(A.BGSTOP, NULL,'N','Y') BGSTOPYN,
            B.GMJNAME,
            /*
            B.GMJJUMIN,
            */
            (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(B.GMJJUMIN))) FROM dual WHERE B.GMJJUMIN IS NOT NULL) AS GMJJUMIN,
            B.GMJSNA,
            A.NA_BJDONG_NO,
            A.NA_ROAD_NM,
            A.NA_MAIN_BUN,
            A.NA_SUB_BUN,
            A.NA_ROAD_NM || ' ' || A.NA_MAIN_BUN || '' || DECODE(A.NA_SUB_BUN, 0, '','-'||A.NA_SUB_BUN)  AS GMROADJUSO,
            A.NA_ETC,
            A.NA_SIGUNGU_CD,
            B.NA_BJDONG_NO naBjdongNoOwner,
            B.NA_ROAD_NM   naRoadNmOwner,
            B.NA_MAIN_BUN  naMainBunOwner,
            B.NA_SUB_BUN   naSubBunOwner,
            B.NA_ETC       naEtcOwner,
            B.NA_SIGUNGU_CD naSigunguCdOwner,
            B.GMJJNAME,
            COALESCE(A.NEW_ADDR1, '-') AS BUILDING_NEW_ADDR1,
            COALESCE(NVL2(A.NEW_ADDR2, A.NEW_ADDR2, DECODE(A.GMHJDCD, '',
                F_BJD_NAME(A.GMSKKCD, A.GMBJDCD) || ' ' || F_CDNAME(87, A.GMCSAH) ||
                ' ' || A.GMCBUH || DECODE(A.GMCJI, '', '', '-' || A.GMCJI),
                F_BJDNAME(A.GMSKKCD, A.GMBJDCD, A.GMHJDCD) || ' ' ||
                F_CDNAME(87, A.GMCSAH) || ' ' || A.GMCBUH ||
                DECODE(A.GMCJI, '', '', '-' || A.GMCJI))), '-') AS BUILDING_NEW_ADDR2,
            COALESCE(B.NEW_ADDR1, '-') AS GMJ_NEW_ADDR1,
        COALESCE(
            CASE
                WHEN B.NEW_ADDR2 = '' OR B.NEW_ADDR2 IS NULL THEN B.GMJSNA || ' ' || B.GMJJNAME
                ELSE B.NEW_ADDR2
            END , '-') AS GMJ_NEW_ADDR2
        FROM
            NOPER_MASTER A, NOPER_OWNER B
        WHERE B.DELETE_AT='N'
          AND A.GMSKK = B.GMSKK
          AND A.GMDJGB = B.GMDJGB
          AND A.GMSEQCO = B.GMSEQCO
          AND B.GMJILNO = '1'
          <if test='gmjname!=null and !gmjname.equals("")'>
              AND B.GMJNAME = #{gmjname}
          </if>
          <if test='daejang!=null and !daejang.equals("")'>
              AND A.DAEJANG = #{daejang}
          </if>
          <if test='gmskk!=null and !gmskk.equals("")'>
              AND A.GMSKK = #{gmskk}
          </if>
          <if test='gmdjgb!=null and !gmdjgb.equals("")'>
              AND A.GMDJGB = #{gmdjgb}
          </if>
          <if test='gmseqco!=null and !gmseqco.equals("")'>
              AND A.GMSEQCO = #{gmseqco}
          </if>
          AND A.NEWYN = 'Y'
    </select>

    <!-- 개보수신고관리 등록 -->
    <insert id="saveRenovation" parameterType="RenovationDTO">
        /* UnlicensedBuildingManagementRepository.saveRenovation */
        INSERT INTO NOPER_FIX
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , GMILNO
               , GMBALNO
               , GBSGOIL
               , GBSCOTENT
               , WBGB
               , CHCONTENT
               , JGONG
               , HHGNAME
               , HHNAME
               , SINDA
               , SINDA1
               , JUNGON
               , JUNGON1
               , ISSUEORGKEY
               , REGIST_ID
               )
        VALUES ( #{gmskk, jdbcType=VARCHAR}
               , #{gmdjgb, jdbcType=VARCHAR}
               , #{gmseqco, jdbcType=VARCHAR}
               , (SELECT NVL(MAX(GMILNO), 0) + 1 FROM NOPER_FIX WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
               , (SELECT TO_CHAR(SYSDATE,'YYYY')||NVL(MAX(GMILNO),0)+1 FROM NOPER_FIX WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
               , #{gbsgoil}
               , #{gbscotent, jdbcType=VARCHAR}
               , #{wbgb, jdbcType=VARCHAR}
               , #{chcontent, jdbcType=VARCHAR}
               , #{jgong}
               , #{hhgname, jdbcType=VARCHAR}
               , #{hhname, jdbcType=VARCHAR}
               , #{sinda, jdbcType=VARCHAR}
               , #{sinda1, jdbcType=VARCHAR}
               , #{jungon, jdbcType=VARCHAR}
               , #{jungon1, jdbcType=VARCHAR}
               , #{issueorgkey, jdbcType=VARCHAR}
               , #{userId, jdbcType=VARCHAR}
               )
    </insert>

    <!-- 개보수신고관리 등록 후 상세 이동 화면 값 조회 -->
    <select id="findRenovationAddDetail" resultType="RenovationDTO">
        /* UnlicensedBuildingManagementRepository.findRenovationAddDetail */
        SELECT GMSKK
             , GMDJGB
             , GMSEQCO
             , GMILNO
          FROM NOPER_FIX
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
           AND GMILNO = (SELECT MAX(GMILNO) FROM NOPER_FIX WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
    </select>

    <!-- 개보수신고관리 상세 조회 - 기본현황/소유자현황 -->
    <select id="findRenovationDetailSearch" parameterType="RenovationDTO" resultType="RenovationDTO">
        /* UnlicensedBuildingManagementRepository.findRenovationDetailSearch */
        SELECT
              ROW_NUMBER() OVER(ORDER BY B.GMSKK, B.GMDJGB, B.GMSEQCO) RN,
              A.GMSKK,
              F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME,
              A.GMDJGB,
              A.GMSEQCO,
              A.GMSKK || '-' || F_CDNAME('N01', A.GMDJGB) || '-' || A.GMSEQCO AS NUM,
              COALESCE(F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.gmhjdcd)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI), '-') GMSKKNAME,
              A.DHBH,
              A.DHGBH,
              A.DONGBH,
              A.DONGGBH,
              A.DAEJANG,
              A.GMSKKCD,
              A.GMBJDCD,
              A.GMHJDCD,
              A.GMCSAH,
              A.GMCBUH,
              A.GMCJI,
              A.GMCOH,
              A.GMGZCD,
              A.GMYD,
              A.GMBSDONG,
              (A.GMGUNP-nvl((select SUM(NVL(RECOM.GMBGUNP,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS GMGUNP,
              (A.TOJIMJ-nvl((select SUM(NVL(RECOM.GMBTOJIMJ,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS TOJIMJ,
              (decode(nvl(A.GMMUNJUK,0),0,nvl(A.GMGUNP,0)*3.3058,A.GMMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBMJUK,0),0,nvl(RECOM.GMBGUNP,0)*3.3058,RECOM.GMBMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS GMMUNJUK,
              (decode(nvl(A.TOJIMUNJUK,0),0,nvl(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBTOJIMJUK,0),0,nvl(RECOM.GMBTOJIMJ,0)*3.3058,RECOM.GMBTOJIMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS TOJIMUNJUK,
              A.GMFOORS,
              SUBSTR(A.GMGUNIL, 0, 4) || '-' || SUBSTR(A.GMGUNIL, 5, 2) || '-' || SUBSTR(A.GMGUNIL, 7, 2) AS GMGUNIL_V,
              A.TOJISG,
              A.TOJIJMG,
              A.TOJIDP,
              A.JIGUJDG,
              A.JIGUGB,
              A.JIGUUG,
              A.JIGUDZ,
              A.GMWEBAN,
              A.GMWEBANNO,
              A.DECISION,
              A.REASON,
              A.BGSTOP,
              A.UPDATEC,
              RTRIM(A.DEGB) AS DEGB,
              DECODE(A.GMWEBAN, NULL,'N','Y') GMWEBANYN,
              DECODE(A.GMWEBANNO, NULL,'N','0','N','Y') GMWEBANNOYN,
              DECODE(A.BGSTOP, NULL,'N','Y') BGSTOPYN,
              B.GMJNAME,
              /*
              B.GMJJUMIN,
              */
              (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(B.GMJJUMIN))) FROM dual WHERE B.GMJJUMIN IS NOT NULL) AS GMJJUMIN,
              B.GMJSNA,
              A.NA_BJDONG_NO,
              A.NA_ROAD_NM,
              A.NA_MAIN_BUN,
              A.NA_SUB_BUN,
              A.NA_ROAD_NM || ' ' || A.NA_MAIN_BUN || '' || DECODE(A.NA_SUB_BUN, 0, '','-'||A.NA_SUB_BUN)  AS GMROADJUSO,
              A.NA_ETC,
              A.NA_SIGUNGU_CD,
              B.NA_BJDONG_NO naBjdongNoOwner,
              B.NA_ROAD_NM   naRoadNmOwner,
              B.NA_MAIN_BUN  naMainBunOwner,
              B.NA_SUB_BUN   naSubBunOwner,
              B.NA_ETC       naEtcOwner,
              B.NA_SIGUNGU_CD naSigunguCdOwner,
              B.GMJJNAME,
              COALESCE(A.NEW_ADDR1, '-') AS BUILDING_NEW_ADDR1,
              CASE
                WHEN A.NEW_ADDR2 != '' OR A.NEW_ADDR2 IS NOT NULL THEN A.NEW_ADDR2
                ELSE NVL2(A.NEW_ADDR2, A.NEW_ADDR2, F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.gmhjdcd)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI))
              END AS BUILDING_NEW_ADDR2,
              COALESCE(B.NEW_ADDR1, '-') AS GMJ_NEW_ADDR1,
              CASE
                  WHEN B.GMJSNA != '' OR B.GMJSNA IS NOT NULL THEN B.GMJSNA || ' ' || B.GMJJNAME
                  ELSE NVL2(B.NEW_ADDR2, B.NEW_ADDR2, A.NA_ROAD_NM || ' ' || A.NA_MAIN_BUN || '' || DECODE(A.NA_SUB_BUN, 0, '','-'||A.NA_SUB_BUN))
              END AS GMJ_NEW_ADDR2
         FROM NOPER_MASTER A, NOPER_OWNER B
        WHERE B.DELETE_AT='N'
          AND A.GMSKK = B.GMSKK
          AND A.GMDJGB = B.GMDJGB
          AND A.GMSEQCO = B.GMSEQCO
          AND B.GMJILNO = '1'
        <if test='gmskk!=null and !gmskk.equals("")'>
            AND A.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND A.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco!=null and !gmseqco.equals("")'>
            AND A.GMSEQCO = #{gmseqco}
        </if>
        AND A.NEWYN = 'Y'
    </select>

    <!-- 개보수신고관리 상세 조회 - 신고현황-->
    <select id="findRenovationDetail" parameterType="RenovationDTO" resultType="RenovationDTO">
        /* UnlicensedBuildingManagementRepository.findRenovationDetail */
        SELECT
              GMSKK
            , GMDJGB
            , GMSEQCO
            , GMILNO
            , SUBSTR(GBSGOIL, 0, 4) || '-' || SUBSTR(GBSGOIL, 5, 2) || '-' || SUBSTR(GBSGOIL, 7, 2) AS GBSGOIL_V
            , SUBSTR(JGONG, 0, 4) || '-' || SUBSTR(JGONG, 5, 2) || '-' || SUBSTR(JGONG, 7, 2) AS JGONG_V
            , WBGB
            , GBSCOTENT
            , CHCONTENT
            , HHGNAME
            , HHNAME
            , SINDA
            , SINDA1
            , JUNGON
            , JUNGON1
            , BIGO
            , ISSUEORGKEY
         FROM NOPER_FIX
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND GMILNO = #{gmilno}
    </select>

    <!-- 개보수신고관리 수정 -->
    <update id="modifyRenovation" parameterType="RenovationDTO">
        /* UnlicensedBuildingManagementRepository.modifyRenovation */
        UPDATE NOPER_FIX SET
               GBSGOIL = #{gbsgoil}
             , JGONG = #{jgong}
             , WBGB = #{wbgb}
             , GBSCOTENT = #{gbscotent}
             , CHCONTENT = #{chcontent}
             , HHGNAME = #{hhgname}
             , HHNAME = #{hhname}
             , SINDA = #{sinda}
             , SINDA1 = #{sinda1}
             , JUNGON = #{jungon}
             , JUNGON1 = #{jungon1}
             , UPDATE_ID = #{userId}
             , UPDATE_TS = SYSDATE
         WHERE
               GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
           AND GMILNO = #{gmilno}
    </update>

    <!-- 개보수신고관리 등록 이력 저장-->
    <update id="insertHisNoperFixI1">
        /* UnlicensedBuildingManagementRepository.insertHisNoperFixI1 */
        INSERT INTO HIS_NOPER_FIX
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , GMILNO
               , GMBALNO
               , GBSGOIL
               , GBSCOTENT
               , WBGB
               , CHCONTENT
               , JGONG
               , HHGNAME
               , HHNAME
               , SINDA
               , SINDA1
               , JUNGON
               , JUNGON1
               , ISSUEORGKEY
               , REGIST_ID
        ) SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , GMILNO
               , GMBALNO
               , GBSGOIL
               , GBSCOTENT
               , WBGB
               , CHCONTENT
               , JGONG
               , HHGNAME
               , HHNAME
               , SINDA
               , SINDA1
               , JUNGON
               , JUNGON1
               , ISSUEORGKEY
               , #{userId, jdbcType=VARCHAR}
            FROM NOPER_FIX
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
             AND GMILNO = (SELECT MAX(GMILNO) FROM NOPER_FIX WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
    </update>

    <!-- 개보수신고관리 수정 이력 저장-->
    <update id="insertHisNoperFixU1">
        /* UnlicensedBuildingManagementRepository.insertHisNoperFixU1 */
        INSERT INTO HIS_NOPER_FIX
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , GMILNO
               , GMBALNO
               , GBSGOIL
               , GBSCOTENT
               , WBGB
               , CHCONTENT
               , JGONG
               , HHGNAME
               , HHNAME
               , SINDA
               , SINDA1
               , JUNGON
               , JUNGON1
               , ISSUEORGKEY
               , REGIST_ID
        ) SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , GMILNO
               , GMBALNO
               , GBSGOIL
               , GBSCOTENT
               , WBGB
               , CHCONTENT
               , JGONG
               , HHGNAME
               , HHNAME
               , SINDA
               , SINDA1
               , JUNGON
               , JUNGON1
               , ISSUEORGKEY
               , #{userId, jdbcType=VARCHAR}
            FROM
                 NOPER_FIX
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
             AND GMILNO = #{gmilno}
    </update>

    <!-- 철거신고 시작 -->
    <!-- 철거신고 조회 - 철거신고현황 List -->
    <select id="findDemolitionList" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findDemolitionList */
        SELECT ROW_NUMBER() OVER (ORDER BY T.RN2) RN, T.*
          FROM (
                SELECT ROW_NUMBER() OVER (ORDER BY REMOVE_MASTER.REGIST_TS) RN2
                     , COALESCE(SUBSTR(DECODE(f_group_gzjcount(REMOVE_MASTER.GMSKK, REMOVE_MASTER.GMDJGB, REMOVE_MASTER.GMSEQCO), 0, '없음', 1, REMOVE_OWNER_RECOM.GMJNAME, 2, REMOVE_OWNER_RECOM.GMJNAME || ' 외1명', 3, REMOVE_OWNER_RECOM.GMJNAME || ' 외2명'), 1, 30), '-') GMJU
                     /*, REMOVE_OWNER_RECOM.GMJNAME GMJU*/
                     , REMOVE_MASTER.GMSKK || '-' ||DECODE(REMOVE_MASTER.GMDJGB, '0', '등재', '1', '미등재', '2', '항측판독', '') || '-' ||REMOVE_MASTER.GMSEQCO SKKSEQ
                     , REMOVE_MASTER.DESAU
                     , REMOVE_MASTER.DEILJA
                     , REMOVE_MASTER.DEILJA DEILJA1
                     , REMOVE_OWNER_RECOM.GMJBSILJA
                     , REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(REMOVE_OWNER_RECOM.GMJBSGUM)), '(\d{3})','\1,')), '^,','') AS GMJBSGUM
                     , REMOVE_OWNER_RECOM.GMJJBILJA
                     /*
                     , SUBSTR(REMOVE_MASTER.DEILJA, 1, 4) || DECODE(REMOVE_MASTER.DEILJA, '', '', '-' || SUBSTR(REMOVE_MASTER.DEILJA, 5, 2) || '-' || SUBSTR(REMOVE_MASTER.DEILJA, 7, 2)) DEILJA_V
                     , SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA, 1, 4) || DECODE(REMOVE_OWNER_RECOM.GMJBSILJA, '', '', '-' || SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA, 5, 2) || '-' || SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA, 7, 2)) GMJBSILJA_V
                     , SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA, 1, 4) || DECODE(REMOVE_OWNER_RECOM.GMJJBILJA, '', '', '-' || SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA, 5, 2) || '-' || SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA, 7, 2)) GMJJBILJA_V
                     */
                     , REMOVE_OWNER_RECOM.GMJJBPH
                     , REMOVE_OWNER_RECOM.GMJNAME
                     , COALESCE(decode((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(REMOVE_OWNER_RECOM.GMJJUMIN))) FROM dual WHERE REMOVE_OWNER_RECOM.GMJJUMIN IS NOT NULL), null, '', SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(REMOVE_OWNER_RECOM.GMJJUMIN))) FROM dual WHERE REMOVE_OWNER_RECOM.GMJJUMIN IS NOT NULL), 1, 6) || '-*******'), '-') AS GMJJUMIN
                     , REMOVE_OWNER_RECOM.BIDAK
                     , REMOVE_MASTER.DHBH
                     , REMOVE_MASTER.DHGBH
                     , REMOVE_MASTER.DONGBH
                     , REMOVE_MASTER.DONGGBH
                     , REMOVE_MASTER.DAEJANG
                     , REMOVE_MASTER.GMSKK
                     , REMOVE_MASTER.GMDJGB
                     , REMOVE_MASTER.GMSEQCO
                     , SUBSTR(F_BJD_NAME(REMOVE_MASTER.GMSKKCD, REMOVE_MASTER.GMBJDCD), 1, 40) || DECODE(REMOVE_MASTER.GMCSAH, '0', ' 대지 ', '1', ' 산 ', '2', '블록 ', '') || REMOVE_MASTER.GMCBUH || DECODE(REMOVE_MASTER.GMCJI, '', '', '-' || REMOVE_MASTER.GMCJI) || REMOVE_MASTER.GMCOH BJUSO
                     , REMOVE_MASTER.GMCOH TUKSUJI
                     , REMOVE_MASTER.GMGZCD
                     , REMOVE_MASTER.GMGUNP
                     , REMOVE_MASTER.GMFOORS
                     , REMOVE_MASTER.GMGUNIL
                     , REMOVE_MASTER.TOJIMJ
                     , REMOVE_MASTER.TOJISG
                     , REMOVE_MASTER.TOJIJMG
                     , REMOVE_MASTER.TOJIDP
                     , REMOVE_MASTER.GMBJDCD
                     , REMOVE_MASTER.GMYD
                     , K00_JIMOKCD.CDVALUE JIMOK_VALUE
                     , REMOVE_MASTER.JIGUJDG
                     , REMOVE_MASTER.JIGUGB
                     , REMOVE_MASTER.JIGUUG
                     , REMOVE_MASTER.JIGUDZ
                     , REMOVE_OWNER_RECOM.GMJSNA || ' ' || REMOVE_OWNER_RECOM.GMJJNAME KJUSO
                     , DECODE(REMOVE_MASTER.NEW_ADDR1, NULL, '-', REMOVE_MASTER.NEW_ADDR1) NEW_ADDR1
                     , DECODE(NVL2(REMOVE_MASTER.NEW_ADDR2, REMOVE_MASTER.NEW_ADDR2, SUBSTR(F_BJD_NAME(REMOVE_MASTER.GMSKKCD, REMOVE_MASTER.GMBJDCD), 1, 40) || ' ' || REMOVE_MASTER.GMCBUH || DECODE(REMOVE_MASTER.GMCJI, '', '', '-' || REMOVE_MASTER.GMCJI) || REMOVE_MASTER.GMCOH)
                         , NULL, '', NVL2(REMOVE_MASTER.NEW_ADDR2, REMOVE_MASTER.NEW_ADDR2, SUBSTR(F_BJD_NAME(REMOVE_MASTER.GMSKKCD, REMOVE_MASTER.GMBJDCD), 1, 40) || ' ' || REMOVE_MASTER.GMCBUH || DECODE(REMOVE_MASTER.GMCJI, '', '', '-' || REMOVE_MASTER.GMCJI) || REMOVE_MASTER.GMCOH)) NEW_ADDR2
                     , COALESCE(F_CDNAME(87, REMOVE_MASTER.GMCSAH), '-') AS GMCSAH
                     , REMOVE_MASTER.REGIST_TS
                  FROM REMOVE_MASTER
                     , (SELECT * FROM REMOVE_OWNER_RECOM WHERE GMJILNO = '1' AND REMOVE_OWNER_RECOM.GMBDEGB IS NULL) REMOVE_OWNER_RECOM
                     , COM_CODE K00_JIMOKCD
                 WHERE REMOVE_MASTER.GMSKK = REMOVE_OWNER_RECOM.GMSKK(+)
                   AND REMOVE_MASTER.GMDJGB = REMOVE_OWNER_RECOM.GMDJGB(+)
                   AND REMOVE_MASTER.GMSEQCO = REMOVE_OWNER_RECOM.GMSEQCO(+)
                   AND REMOVE_MASTER.TOJIJMG = K00_JIMOKCD.CDKEY(+)
                   AND '18' = K00_JIMOKCD.CDID(+)
                   <if test='gmskk!=null and !gmskk.equals("")'>
                   AND REMOVE_MASTER.GMSKK = #{gmskk}
                   </if>
                   <if test='gmdjgb!=null and !gmdjgb.equals("")'>
                   AND REMOVE_MASTER.GMDJGB = #{gmdjgb}
                   </if>
                   <if test='gmseqco2!=null and !gmseqco2.equals("")'>
                   <![CDATA[AND REMOVE_MASTER.GMSEQCO <= #{gmseqco2}]]>
                   </if>
                   <if test='gmseqco!=null and !gmseqco.equals("") and gmseqco2.equals("")'>
                   <![CDATA[AND REMOVE_MASTER.GMSEQCO = #{gmseqco}]]>
                   </if>
                   <if test='(gmseqco != null and !gmseqco.equals("")) and (gmseqco2 != null and !gmseqco2.equals(""))'>
                   AND REMOVE_MASTER.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2}
                   </if>
                   <if test='daejang!=null and !daejang.equals("")'>
                   AND REMOVE_MASTER.DAEJANG = #{daejang}
                   </if>
                   <if test='gmjname!=null and !gmjname.equals("")'>
                   AND REMOVE_OWNER_RECOM.GMJNAME = #{gmjname}
                   </if>
                   <if test='gmskkcd!=null and !gmskkcd.equals("")'>
                   AND REMOVE_MASTER.GMSKKCD = #{gmskkcd}
                   </if>
                   <if test='gmhjdcd!=null and !gmhjdcd.equals("")'>
                   AND REMOVE_MASTER.GMHJDCD = #{gmhjdcd}
                   </if>
                   <if test='gmbjdcd!=null and !gmbjdcd.equals("")'>
                   AND REMOVE_MASTER.GMBJDCD = #{gmbjdcd}
                   </if>
                   <if test='gmcsah!=null and !gmcsah.equals("")'>
                   AND REMOVE_MASTER.GMCSAH = #{gmcsah}
                   </if>
                   <if test='gmcbuh!=null and !gmcbuh.equals("")'>
                   AND REMOVE_MASTER.GMCBUH = #{gmcbuh}
                   </if>
                   <if test='gmcji!=null and !gmcji.equals("")'>
                   AND REMOVE_MASTER.GMCJI = #{gmcji}
                   </if>
                   <if test='deilja!=null and !deilja.equals("")'>
                   <![CDATA[AND REMOVE_MASTER.DEILJA >= #{deilja}]]>
                   </if>
                   <if test='deilja1!=null and !deilja1.equals("")'>
                   <![CDATA[AND REMOVE_MASTER.DEILJA <= #{deilja1}]]>
                   </if>
                ORDER BY RN2
        ) T
        <if test='searchJuso != null and !searchJuso.equals("")'>
            WHERE (REGEXP_REPLACE(T.NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.NEW_ADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(F_BJD_NAME(T.GMSKK, T.GMBJDCD), '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY RN DESC
    </select>

    <!-- 철거신고 조회 - 철거신고현황 List ExcelDownload -->
    <select id="findDemolitionExcelList" resultType="DemolitionExcelDTO">
        /* UnlicensedBuildingManagementRepository.findDemolitionExcelList */
        SELECT ROW_NUMBER() OVER (ORDER BY T.RN2) RN, T.*
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY REMOVE_MASTER.REGIST_TS) RN2
        , COALESCE(SUBSTR(DECODE(f_group_gzjcount(REMOVE_MASTER.GMSKK, REMOVE_MASTER.GMDJGB, REMOVE_MASTER.GMSEQCO), 0, '없음', 1, REMOVE_OWNER_RECOM.GMJNAME, 2, REMOVE_OWNER_RECOM.GMJNAME || ' 외1명', 3, REMOVE_OWNER_RECOM.GMJNAME || ' 외2명'), 1, 30), '-') GMJU
        /*, REMOVE_OWNER_RECOM.GMJNAME GMJU*/
        , REMOVE_MASTER.GMSKK || '-' ||DECODE(REMOVE_MASTER.GMDJGB, '0', '등재', '1', '미등재', '2', '항측판독', '') || '-' ||REMOVE_MASTER.GMSEQCO SKKSEQ
        , REMOVE_MASTER.DESAU
        , REMOVE_MASTER.DEILJA
        , REMOVE_MASTER.DEILJA DEILJA1
        , REMOVE_OWNER_RECOM.GMJBSILJA
        , REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(REMOVE_OWNER_RECOM.GMJBSGUM)), '(\d{3})','\1,')), '^,','') AS GMJBSGUM
        , REMOVE_OWNER_RECOM.GMJJBILJA
        /*
        , SUBSTR(REMOVE_MASTER.DEILJA, 1, 4) || DECODE(REMOVE_MASTER.DEILJA, '', '', '-' || SUBSTR(REMOVE_MASTER.DEILJA, 5, 2) || '-' || SUBSTR(REMOVE_MASTER.DEILJA, 7, 2)) DEILJA_V
        , SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA, 1, 4) || DECODE(REMOVE_OWNER_RECOM.GMJBSILJA, '', '', '-' || SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA, 5, 2) || '-' || SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA, 7, 2)) GMJBSILJA_V
        , SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA, 1, 4) || DECODE(REMOVE_OWNER_RECOM.GMJJBILJA, '', '', '-' || SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA, 5, 2) || '-' || SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA, 7, 2)) GMJJBILJA_V
        */
        , REMOVE_OWNER_RECOM.GMJJBPH
        , REMOVE_OWNER_RECOM.GMJNAME
        , COALESCE(decode((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(REMOVE_OWNER_RECOM.GMJJUMIN))) FROM dual WHERE REMOVE_OWNER_RECOM.GMJJUMIN IS NOT NULL), null, '', SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(REMOVE_OWNER_RECOM.GMJJUMIN))) FROM dual WHERE REMOVE_OWNER_RECOM.GMJJUMIN IS NOT NULL), 1, 6) || '-*******'), '-') AS GMJJUMIN
        , REMOVE_OWNER_RECOM.BIDAK
        , REMOVE_MASTER.DHBH
        , REMOVE_MASTER.DHGBH
        , REMOVE_MASTER.DONGBH
        , REMOVE_MASTER.DONGGBH
        , REMOVE_MASTER.DAEJANG
        , REMOVE_MASTER.GMSKK
        , REMOVE_MASTER.GMDJGB
        , REMOVE_MASTER.GMSEQCO
        , SUBSTR(F_BJD_NAME(REMOVE_MASTER.GMSKKCD, REMOVE_MASTER.GMBJDCD), 1, 40) || DECODE(REMOVE_MASTER.GMCSAH, '0', ' 대지 ', '1', ' 산 ', '2', '블록 ', '') || REMOVE_MASTER.GMCBUH || DECODE(REMOVE_MASTER.GMCJI, '', '', '-' || REMOVE_MASTER.GMCJI) || REMOVE_MASTER.GMCOH BJUSO
        , REMOVE_MASTER.GMCOH TUKSUJI
        , REMOVE_MASTER.GMGZCD
        , REMOVE_MASTER.GMGUNP
        , REMOVE_MASTER.GMFOORS
        , REMOVE_MASTER.GMGUNIL
        , REMOVE_MASTER.TOJIMJ
        , REMOVE_MASTER.TOJISG
        , REMOVE_MASTER.TOJIJMG
        , REMOVE_MASTER.TOJIDP
        , REMOVE_MASTER.GMBJDCD
        , REMOVE_MASTER.GMYD
        , K00_JIMOKCD.CDVALUE JIMOK_VALUE
        , REMOVE_MASTER.JIGUJDG
        , REMOVE_MASTER.JIGUGB
        , REMOVE_MASTER.JIGUUG
        , REMOVE_MASTER.JIGUDZ
        , REMOVE_OWNER_RECOM.GMJSNA || ' ' || REMOVE_OWNER_RECOM.GMJJNAME KJUSO
        , DECODE(REMOVE_MASTER.NEW_ADDR1, NULL, '-', REMOVE_MASTER.NEW_ADDR1) NEW_ADDR1
        , DECODE(NVL2(REMOVE_MASTER.NEW_ADDR2, REMOVE_MASTER.NEW_ADDR2, SUBSTR(F_BJD_NAME(REMOVE_MASTER.GMSKKCD, REMOVE_MASTER.GMBJDCD), 1, 40) || ' ' || REMOVE_MASTER.GMCBUH || DECODE(REMOVE_MASTER.GMCJI, '', '', '-' || REMOVE_MASTER.GMCJI) || REMOVE_MASTER.GMCOH)
        , NULL, '', NVL2(REMOVE_MASTER.NEW_ADDR2, REMOVE_MASTER.NEW_ADDR2, SUBSTR(F_BJD_NAME(REMOVE_MASTER.GMSKKCD, REMOVE_MASTER.GMBJDCD), 1, 40) || ' ' || REMOVE_MASTER.GMCBUH || DECODE(REMOVE_MASTER.GMCJI, '', '', '-' || REMOVE_MASTER.GMCJI) || REMOVE_MASTER.GMCOH)) NEW_ADDR2
        , COALESCE(F_CDNAME(87, REMOVE_MASTER.GMCSAH), '-') AS GMCSAH
        , REMOVE_MASTER.REGIST_TS
        FROM REMOVE_MASTER
        , (SELECT * FROM REMOVE_OWNER_RECOM WHERE GMJILNO = '1' AND REMOVE_OWNER_RECOM.GMBDEGB IS NULL) REMOVE_OWNER_RECOM
        , COM_CODE K00_JIMOKCD
        WHERE REMOVE_MASTER.GMSKK = REMOVE_OWNER_RECOM.GMSKK(+)
        AND REMOVE_MASTER.GMDJGB = REMOVE_OWNER_RECOM.GMDJGB(+)
        AND REMOVE_MASTER.GMSEQCO = REMOVE_OWNER_RECOM.GMSEQCO(+)
        AND REMOVE_MASTER.TOJIJMG = K00_JIMOKCD.CDKEY(+)
        AND '18' = K00_JIMOKCD.CDID(+)
        <if test='gmskk!=null and !gmskk.equals("")'>
            AND REMOVE_MASTER.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND REMOVE_MASTER.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco2!=null and !gmseqco2.equals("")'>
            <![CDATA[AND REMOVE_MASTER.GMSEQCO <= #{gmseqco2}]]>
        </if>
        <if test='gmseqco!=null and !gmseqco.equals("") and gmseqco2.equals("")'>
            <![CDATA[AND REMOVE_MASTER.GMSEQCO = #{gmseqco}]]>
        </if>
        <if test='(gmseqco != null and !gmseqco.equals("")) and (gmseqco2 != null and !gmseqco2.equals(""))'>
            AND REMOVE_MASTER.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2}
        </if>
        <if test='daejang!=null and !daejang.equals("")'>
            AND REMOVE_MASTER.DAEJANG = #{daejang}
        </if>
        <if test='gmjname!=null and !gmjname.equals("")'>
            AND REMOVE_OWNER_RECOM.GMJNAME = #{gmjname}
        </if>
        <if test='gmskkcd!=null and !gmskkcd.equals("")'>
            AND REMOVE_MASTER.GMSKKCD = #{gmskkcd}
        </if>
        <if test='gmhjdcd!=null and !gmhjdcd.equals("")'>
            AND REMOVE_MASTER.GMHJDCD = #{gmhjdcd}
        </if>
        <if test='gmbjdcd!=null and !gmbjdcd.equals("")'>
            AND REMOVE_MASTER.GMBJDCD = #{gmbjdcd}
        </if>
        <if test='gmcsah!=null and !gmcsah.equals("")'>
            AND REMOVE_MASTER.GMCSAH = #{gmcsah}
        </if>
        <if test='gmcbuh!=null and !gmcbuh.equals("")'>
            AND REMOVE_MASTER.GMCBUH = #{gmcbuh}
        </if>
        <if test='gmcji!=null and !gmcji.equals("")'>
            AND REMOVE_MASTER.GMCJI = #{gmcji}
        </if>
        <if test='deilja!=null and !deilja.equals("")'>
            <![CDATA[AND REMOVE_MASTER.DEILJA >= #{deilja}]]>
        </if>
        <if test='deilja1!=null and !deilja1.equals("")'>
            <![CDATA[AND REMOVE_MASTER.DEILJA <= #{deilja1}]]>
        </if>
        ORDER BY RN2
        ) T
        <if test='searchJuso != null and !searchJuso.equals("")'>
            WHERE (REGEXP_REPLACE(T.NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(T.NEW_ADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(F_BJD_NAME(T.GMSKK, T.GMBJDCD), '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY RN DESC
    </select>

    <!-- 철거신고 등록/상세 - 발급기관 키 조회(SelectBox) -->
    <select id="findDemolitionIssuerKey" parameterType="DemolitionDTO" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findDemolitionIssuerKey */
        SELECT KEY
             , PRNTNM
             , PRNTNM2
        FROM K00SIGUD
        WHERE SKKCD = #{gmskk}
        ORDER BY KEY ASC
    </select>

    <!-- 철거신고 등록 화면 조회 - 신고현황 상세 -->
    <select id="findDemolitionAddNoperInfo" parameterType="DemolitionDTO" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findDemolitionAddNoperInfo */
        SELECT A.GMSKK
             , F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME
             , A.GMDJGB
             , A.GMSEQCO
             , A.GMSKK || '-' || F_CDNAME('N01', A.GMDJGB) || '-' || A.GMSEQCO AS DAEJANG_BUNHO
             , NVL(A.DHBH, '-') DHBH
             , NVL(A.DHGBH, '-') DHGBH
             , A.DONGBH
             , A.DONGGBH
             , A.DAEJANG
             , A.GMSKKCD
             , A.GMBJDCD
             , NVL(A.GMHJDCD, '-') GMHJDCD
             , A.GMCBUH
             , A.GMCJI
             , NVL(A.GMCSAH, '-') AS GMCSAH
             , A.GMGZCD
             , A.GMYD
             , A.GMBSDONG
             , nvl(A.GMGUNP, 0) GMGUNP
             , nvl(A.TOJIMJ, 0) TOJIMJ
             , nvl(A.GMMUNJUK, 0) GMMUNJUK
             , nvl(A.TOJIMUNJUK, 0) TOJIMUNJUK
             , nvl(A.GMGUNP-nvl((select SUM(NVL(RECOM.GMBGUNP,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0),0) AS CURRENT_GMBGUNP
             , nvl(A.TOJIMJ-nvl((select SUM(NVL(RECOM.GMBTOJIMJ,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0),0) AS CURRENT_GMBTOJIMJ
             , nvl(decode(nvl(A.GMMUNJUK,0),0,nvl(A.GMGUNP,0)*3.3058,A.GMMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBMJUK,0),0,nvl(RECOM.GMBGUNP,0)*3.3058,RECOM.GMBMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0),0) AS CURRENT_GMBMJUK
             , nvl(decode(nvl(A.TOJIMUNJUK,0),0,nvl(A.TOJIMJ,0)*3.3058,A.TOJIMUNJUK)-nvl((select SUM(decode(nvl(RECOM.GMBTOJIMJUK,0),0,nvl(RECOM.GMBTOJIMJ,0)*3.3058,RECOM.GMBTOJIMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0),0) AS CURRENT_GMBTOJIMJUK
             , A.GMFOORS
             , A.GMGUNIL
             , A.TOJISG
             , NVL(A.TOJIJMG, '-') TOJIJMG
             , A.TOJIDP
             , A.JIGUJDG
             , A.JIGUGB
             , A.JIGUUG
             , A.JIGUDZ
             , RTRIM(A.DEGB) AS DEGB
             , A.NA_BJDONG_NO
             , A.NA_ROAD_NM
             , A.NA_MAIN_BUN
             , A.NA_SUB_BUN
             , A.NA_ETC
             , A.NA_SIGUNGU_CD
             , A.BIGO
             , NVL(A.NEW_ADDR1, '-') NEW_ADDR1
             , NVL2(A.NEW_ADDR2, A.NEW_ADDR2, DECODE(A.GMHJDCD,'', F_BJD_NAME(A.GMSKKCD,A.GMBJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI),
               F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.GMHJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI))) AS NEW_ADDR2
          FROM NOPER_MASTER A
         WHERE A.GMSKK = #{gmskk}
           AND A.GMDJGB = #{gmdjgb}
           AND A.GMSEQCO = #{gmseqco}
           AND A.NEWYN = 'Y'
    </select>

    <!-- 철거신고 상세 화면 조회 - 신고현황 상세 -->
    <select id="findDemolitionNoperInfo" parameterType="DemolitionDTO" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findDemolitionNoperInfo */
        SELECT A.GMSKK
             , F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME
             , A.GMDJGB
             , A.GMSEQCO
             , A.GMSKK || '-' || F_CDNAME('N01', A.GMDJGB) || '-' || A.GMSEQCO AS DAEJANG_BUNHO
             , COALESCE(NULLIF(A.DHBH, 'null'), '-') DHBH
             , COALESCE(NULLIF(A.DHGBH, 'null'), '-') DHGBH
             , COALESCE(NULLIF(A.DONGBH, 'null'), '-') DONGBH
             , COALESCE(NULLIF(A.DONGGBH, 'null'), '-') DONGGBH
             , COALESCE(NULLIF(A.DAEJANG, 'null'), '-') DAEJANG
             , A.GMSKKCD
             , A.GMBJDCD
             , NVL(A.GMHJDCD, '-') GMHJDCD
             , A.GMCSAH
             , A.GMCBUH
             , COALESCE(NULLIF(A.GMCJI, 'null'), '-') GMCJI
             , COALESCE(NULLIF(A.GMCOH, 'null'), '-') GMCOH
             , A.GMGZCD
             , A.GMYD
             , A.GMBSDONG
             , A.GMGUNP
             , A.TOJIMJ
             , A.GMMJUK
             , A.TOJIMJUK
             , (A.GMGUNP-nvl((select SUM(NVL(RECOM.GMBGUNP,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS CURRENT_GMBGUNP
             , (A.TOJIMJ-nvl((select SUM(NVL(RECOM.GMBTOJIMJ,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS CURRENT_GMBTOJIMJ
             , (decode(nvl(A.GMMJUK,0),0,nvl(A.GMGUNP,0)*3.3058,A.GMMJUK)-nvl((select SUM(decode(nvl(RECOM.GMBMJUK,0),0,nvl(RECOM.GMBGUNP,0)*3.3058,RECOM.GMBMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS CURRENT_GMBMJUK
             , (decode(nvl(A.TOJIMJUK,0),0,nvl(A.TOJIMJ,0)*3.3058,A.TOJIMJUK)-nvl((select SUM(decode(nvl(RECOM.GMBTOJIMJUK,0),0,nvl(RECOM.GMBTOJIMJ,0)*3.3058,RECOM.GMBTOJIMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS CURRENT_GMBTOJIMJUK
             , A.GMFOORS
             , COALESCE(NULLIF(A.GMGUNIL, 'null'), '-') GMGUNIL
             , COALESCE(NULLIF(DECODE(A.GMGUNIL, NULL, '-', NULLIF(SUBSTR(A.GMGUNIL, 0, 4), 'null') || '-' || SUBSTR(A.GMGUNIL, 5, 2) || '-' || SUBSTR(A.GMGUNIL, 7, 2)), '--'), '-') AS GMGUNIL_V
             , A.TOJISG
             , NVL(A.TOJIJMG, '-') TOJIJMG
             , COALESCE(NULLIF(A.TOJIDP, 'null'), '-') TOJIDP
             , COALESCE(NULLIF(A.JIGUJDG, 'null'), '-') JIGUJDG
             , COALESCE(NULLIF(A.JIGUGB, 'null'), '-') JIGUGB
             , COALESCE(NULLIF(A.JIGUUG, 'null'), '-') JIGUUG
             , A.JIGUDZ
             , A.DESAU
             , A.DEUH
             , A.DEILJA
             , DECODE(A.DEILJA, NULL, '-', SUBSTR(A.DEILJA, 0, 4) || '-' || SUBSTR(A.DEILJA, 5, 2) || '-' || SUBSTR(A.DEILJA, 7, 2)) AS DEILJA_V
             , A.ISSUEORGKEY
             , A.BIGO
             , SUBSTR(F_BJD_NAME(A.GMSKKCD,A.GMBJDCD),1,40)||' '||C.CDVALUE||''||A.GMCBUH||'-'||A.GMCJI||' '||A.GMCOH BJUSO
             , B.GMJSNA||' '||B.GMJJNAME AS GMJUSO
             , B.GMJNAME
             /*, DECODE(B.GMJJUMIN, NULL, '-', SUBSTR(B.GMJJUMIN,1,6) || '-' || SUBSTR(B.GMJJUMIN,8,7)) AS GMJJUMIN*/
             , DECODE((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(B.GMJJUMIN))) FROM dual WHERE B.GMJJUMIN IS NOT NULL), NULL, '-',(SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(B.GMJJUMIN))) FROM dual WHERE B.GMJJUMIN IS NOT NULL)) AS GMJJUMIN
             , A.NA_BJDONG_NO
             , A.NA_ROAD_NM
             , A.NA_MAIN_BUN
             , A.NA_SUB_BUN
             , A.NA_ETC
             , A.NA_SIGUNGU_CD
             , B.NA_BJDONG_NO naBjdongNoOwner
             , B.NA_ROAD_NM naRoadNmOwner
             , B.NA_MAIN_BUN naMainBunOwner
             , B.NA_SUB_BUN naSubBunOwner
             , B.NA_ETC naEtcOwner
             , B.NA_SIGUNGU_CD naSigunguCdOwner
             , DECODE(A.NEW_ADDR1, NULL, '-', A.NEW_ADDR1) AS buildingNewAddr1
             , COALESCE(TRIM(BOTH ' ' FROM NVL2(A.NEW_ADDR2, A.NEW_ADDR2
                   , DECODE(A.GMHJDCD, '', F_BJD_NAME(A.GMSKKCD, A.GMBJDCD) || ' ' || F_CDNAME(87, A.GMCSAH) || ' ' || A.GMCBUH || DECODE(A.GMCJI, '', '', '-' || A.GMCJI)
                       , F_BJDNAME(A.GMSKKCD, A.GMBJDCD, A.GMHJDCD) || ' ' || F_CDNAME(87, A.GMCSAH) || ' ' || A.GMCBUH || DECODE(A.GMCJI, '', '', '-' || A.GMCJI)))), '-') AS buildingNewAddr2
             , DECODE(B.NEW_ADDR1, NULL, '-', B.NEW_ADDR1) AS gmjNewAddr1
             , DECODE(NVL2(B.NEW_ADDR2, B.NEW_ADDR2, B.GMJSNA || ' ' || B.GMJJNAME)
                 , NULL, '-', ' ', '-'
                 , NVL2(B.NEW_ADDR2, B.NEW_ADDR2, B.GMJSNA || ' ' || B.GMJJNAME)) AS gmjNewAddr2
             , TO_CHAR(SYSDATE, 'YYYY') AS YYYY
             , TO_CHAR(SYSDATE, 'MM') AS MM
             , TO_CHAR(SYSDATE, 'DD') AS DD
        FROM REMOVE_MASTER A
           , (SELECT * FROM NOPER_OWNER WHERE GMJILNO = '1' AND DELETE_AT='N') B
           , COM_CODE C
        WHERE A.GMSKK = B.GMSKK(+)
          AND A.GMDJGB = B.GMDJGB(+)
          AND A.GMSEQCO = B.GMSEQCO(+)
          AND A.GMCSAH = C.CDKEY(+)
          AND '87' = C.CDID(+)
          AND A.GMSKK = #{gmskk}
          AND A.GMDJGB = #{gmdjgb}
          AND A.GMSEQCO = #{gmseqco}
    </select>

    <!-- 철거신고 상세 화면 조회 - 신고현황 상세 - 관리행정동명 조회 -->
    <select id="findDemolitionNoperInfoGmhjdnm" resultType="java.lang.String">
    /* UnlicensedBuildingManagementRepository.findDemolitionNoperInfoGmhjdnm */
        SELECT DISTINCT HJDONG_NM GMHJDNM
          FROM CMP_BJDONG_MGM
         WHERE SIGUNGU_CD = #{gmskk}
           AND HJDONG_CD = #{gmhjdcd,jdbcType=VARCHAR}
         ORDER BY HJDONG_NM
    </select>

    <!-- 철거신고 상세 화면 조회 - 건물주 보상 현황 리스트 -->
    <select id="findDemolitionCompensationList" parameterType="DemolitionDTO" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findDemolitionCompensationList */
        SELECT GMJILNO
             , GMJNAME
             , GMJJGN
             /*, GMJJUMIN*/
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),1,6) || '-' || SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) AS GMJJUMIN
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),1,6) GMJJUMIN1
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) GMJJUMIN2
             , GMJZIP1
             , GMJZIP2
             , GMJJNAME
             , GMJSNA
             , GMJBSILJA
             /*, SUBSTR(GMJBSILJA, 1, 4) || DECODE(GMJBSILJA, '', '', '-' || SUBSTR(GMJBSILJA, 5, 2) || '-' || SUBSTR(GMJBSILJA, 7, 2)) GMJBSILJA_V*/
             , DECODE(GMJBSILJA, NULL, '-', SUBSTR(GMJBSILJA, 0, 4) || '-' || SUBSTR(GMJBSILJA, 5, 2) || '-' || SUBSTR(GMJBSILJA, 7, 2)) AS GMJBSILJA_V
             , REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(GMJBSGUM)), '(\d{3})','\1,')), '^,','') AS GMJBSGUM
             , GMJJBILJA
             , DECODE(GMJJBILJA, NULL, '-', SUBSTR(GMJJBILJA, 0, 4) || '-' || SUBSTR(GMJJBILJA, 5, 2) || '-' || SUBSTR(GMJJBILJA, 7, 2)) AS GMJJBILJA_V
             , GMJIGU
             , GMJJBPH
             , NA_BJDONG_NO
             , NA_ROAD_NM
             , NA_MAIN_BUN
             , NA_SUB_BUN
             , NA_ETC
             , NA_SIGUNGU_CD
             , DECODE(NEW_ADDR1, NULL, '-', NEW_ADDR1) AS gmjNewAddr1
             , DECODE(NEW_ADDR2, NULL, '-', NEW_ADDR2) AS gmjNewAddr2
             , BIDAK AS GMBIDAK
          FROM REMOVE_OWNER_RECOM
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
         ORDER BY GMJILNO DESC
    </select>

    <!-- 철거신고 상세 화면 조회 - 세입자 현황 리스트 -->
    <select id="findDemolitionTenantList" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findDemolitionTenantList */
        SELECT SEIPILNO
             , SEBSILJA
             , SUBSTR(SEBSILJA, 0, 4) || '-' || SUBSTR(SEBSILJA, 5, 2) || '-' || SUBSTR(SEBSILJA, 7, 2) AS SEBSILJA_V
             , SEJIGU
             , REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(SEBSGUM)), '(\d{3})','\1,')), '^,','') AS SEBSGUM
             , SEISGUM
             , SEJAPTILJA
             , SUBSTR(SEJAPTILJA, 0, 4) || '-' || SUBSTR(SEJAPTILJA, 5, 2) || '-' || SUBSTR(SEJAPTILJA, 7, 2) AS SEJAPTILJA_V
             , SEJAPTNAME
             , SEJDONGHO
             , SENAME
             , SEJJGN
             /*
             , SEJJUMIN
             */
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SEJJUMIN))) FROM dual WHERE SEJJUMIN IS NOT NULL),1,6) || '-' || SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SEJJUMIN))) FROM dual WHERE SEJJUMIN IS NOT NULL),8,7) AS SEJJUMIN
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SEJJUMIN))) FROM dual WHERE SEJJUMIN IS NOT NULL),1,6) SEJJUMIN1
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SEJJUMIN))) FROM dual WHERE SEJJUMIN IS NOT NULL),8,7) SEJJUMIN2
             , BIDAK AS SEBIDAK
          FROM REMOVE_RENT_INFO
         WHERE GMSKK= #{gmskk}
           AND GMDJGB= #{gmdjgb}
           AND GMSEQCO= #{gmseqco}
         ORDER BY SEIPILNO ASC
    </select>

    <!-- 철거신고 상세 - 건물주 정보 count 값 조회 -->
    <select id="findDemolitionCountNoperOwner" resultType="java.lang.Integer">
        /* UnlicensedBuildingManagementRepository.findDemolitionCountNoperOwner */
        SELECT COUNT(*) AS CNTGMJ
          FROM NOPER_OWNER
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
           AND DELETE_AT='N'
    </select>

    <!-- 철거신고 상세 - 건물 소유자 현황 조회 -->
    <select id="findDemolitionOwnerChangeInfoByGmjilno" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findDemolitionOwnerChangeInfoByGmjilno */
        SELECT ROW_NUMBER() OVER(ORDER BY GMSKK, GMDJGB, GMSEQCO, SUILNO) RN
             , GMJILNO
             , SUILNO
             , SUJILJA
             , DECODE(SUJILJA, NULL, '-', SUBSTR(SUJILJA, 0, 4) || '-' || SUBSTR(SUJILJA, 5, 2) || '-' || SUBSTR(SUJILJA, 7, 2)) AS SUJILJA_V
             , GMJNAME
             , GMJJGN
             /*, SUBSTR(GMJJUMIN,1,6) || '-' || SUBSTR(GMJJUMIN,8,7) GMJJUMIN*/
             , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL) AS GMJJUMIN
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),1,6) GMJJUMIN1
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) GMJJUMIN2
             , GMJZIP1
             , GMJZIP2
             , GMJJNAME
             , GMJSNA
             , JGMJNAME
             , JGMJJGN
             /*
             , JGMJJUMIN
             */
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL),1,6) || '-' || SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL),8,7) JGMJJUMIN
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL),1,6) JGMJJUMIN1
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL),8,7) JGMJJUMIN2
             , JGMJZIP1
             , JGMJZIP2
             , JGMJJNAME
             , JGMJSNA
             , CRILJA
             , DECODE(CRILJA, NULL, '-', SUBSTR(CRILJA, 0, 4) || '-' || SUBSTR(CRILJA, 5, 2) || '-' || SUBSTR(CRILJA, 7, 2)) AS CRILJA_V
             , BKSU
             , GUBOGOILJA
             , DECODE(GUBOGOILJA, NULL, '-', SUBSTR(GUBOGOILJA, 0, 4) || '-' || SUBSTR(GUBOGOILJA, 5, 2) || '-' || SUBSTR(GUBOGOILJA, 7, 2)) AS GUBOGOILJA_V
          FROM NOPER_OWNER_CHANGE
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
           AND GMJILNO = #{gmjilno}
           AND DELGB IS NULL
    </select>

    <!-- 철거신고 상세 - 소유자 변경 현황 리스트 조회 -->
    <select id="findDemolitionOwnerChangeList" resultType="DemolitionDTO">
    /* UnlicensedBuildingManagementRepository.findDemolitionOwnerChangeList */
    SELECT ROW_NUMBER() OVER(ORDER BY GMSKK,GMDJGB, GMSEQCO, SUILNO) RN
         , GMJILNO
         , SUILNO
         , SUJILJA
         , SUBSTR(SUJILJA, 0, 4) || '-' || SUBSTR(SUJILJA, 5, 2) || '-' || SUBSTR(SUJILJA, 7, 2) AS SUJILJA_V
         , GMJNAME
         , GMJJGN
         /*
         , GMJJUMIN
         */
         /*, SUBSTR(GMJJUMIN,1,6) || '-' || SUBSTR(GMJJUMIN,8,7) GMJJUMIN*/
         , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL) AS GMJJUMIN
         , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),1,6) GMJJUMIN1
         , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) GMJJUMIN2
         , GMJZIP1
         , GMJZIP2
         , GMJJNAME
         , GMJSNA
         , JGMJNAME
         , JGMJJGN
         /*
         , JGMJJUMIN
         */
         /*, SUBSTR(JGMJJUMIN,1,6) || '-' || SUBSTR(GMJJUMIN,8,7) JGMJJUMIN*/
         , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL) AS JGMJJUMIN
         , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL),1,6) JGMJJUMIN1
         , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(JGMJJUMIN))) FROM dual WHERE JGMJJUMIN IS NOT NULL),8,7) JGMJJUMIN2
         , JGMJZIP1
         , JGMJZIP2
         , JGMJJNAME
         , JGMJSNA
         , CRILJA
         , SUBSTR(CRILJA, 0, 4) || '-' || SUBSTR(CRILJA, 5, 2) || '-' || SUBSTR(CRILJA, 7, 2) AS CRILJA_V
         , BKSU
         , NA_BJDONG_NO
         , NA_ROAD_NM
         , NA_MAIN_BUN
         , NA_SUB_BUN
         , NA_ETC
         , NA_SIGUNGU_CD
         , J_NA_BJDONG_NO
         , J_NA_ROAD_NM
         , J_NA_MAIN_BUN
         , J_NA_SUB_BUN
         , J_NA_ETC
         , J_NA_SIGUNGU_CD
         , DECODE(NEW_ADDR1, NULL, '-', NEW_ADDR1) AS GMJ_NEW_ADDR1
         , DECODE(NEW_ADDR2, NULL, '-', NEW_ADDR2) AS GMJ_NEW_ADDR2
         , J_NEW_ADDR1
         , J_NEW_ADDR2
         , GUBOGOILJA
         , SUBSTR(GUBOGOILJA, 0, 4) || '-' || SUBSTR(GUBOGOILJA, 5, 2) || '-' || SUBSTR(GUBOGOILJA, 7, 2) AS GUBOGOILJA_V
    FROM NOPER_OWNER_CHANGE
     WHERE GMSKK= #{gmskk}
       AND GMDJGB= #{gmdjgb}
       AND GMSEQCO= #{gmseqco}
       AND DELGB IS NULL
      ORDER BY SUILNO DESC
    </select>

    <!-- 철거신고 상세 - 신고사항 변경 -->
    <update id="modifyDemolitionDetailReport">
        /* UnlicensedBuildingManagementRepository.modifyDemolitionDetailReport */
        UPDATE REMOVE_MASTER
           SET DESAU = #{desau}
             , DEILJA = #{deilja}
             , ISSUEORGKEY = #{issueorgkey}
             , DEUH = #{deuh}
             , UPDATE_ID = #{userId}
             , UPDATE_TS = SYSDATE
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 철거신고 상세 - 건물주 보상 현황 추가 -->
    <insert id="saveDemolitionDetailCompensation" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.saveDemolitionDetailCompensation */
        INSERT INTO REMOVE_OWNER_RECOM
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , GMJILNO
               , GMJNAME
               , GMJJGN
               , GMJJUMIN
               , GMJZIP1
               , GMJZIP2
               , GMJSNA
               , GMJJNAME
               , GMJBSILJA
               , GMJIGU
               , GMJBSGUM
               , GMJJBILJA
               , GMJJBPH
               , BIDAK
               , NA_BJDONG_NO
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , REGIST_ID
               )
        VALUES ( #{gmskk}
               , #{gmdjgb}
               , #{gmseqco}
               , (SELECT NVL(MAX(GMJILNO), 0) + 1 FROM REMOVE_OWNER_RECOM WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
               , #{gmjname, jdbcType=VARCHAR}
               , #{gmjjgn, jdbcType=VARCHAR}
               , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin, jdbcType=VARCHAR}))) FROM dual)
               , #{gmjzip1, jdbcType=VARCHAR}
               , #{gmjzip2, jdbcType=VARCHAR}
               , #{gmjsna, jdbcType=VARCHAR}
               , #{gmjjname, jdbcType=VARCHAR}
               , #{gmjbsilja, jdbcType=VARCHAR}
               , #{gmjigu, jdbcType=VARCHAR}
               , #{gmjbsgum, jdbcType=VARCHAR}
               , #{gmjjbilja, jdbcType=VARCHAR}
               , #{gmjjbph, jdbcType=VARCHAR}
               , #{bidak, jdbcType=VARCHAR}
               , #{naBjdongNo, jdbcType=VARCHAR}
               , #{naRoadNm, jdbcType=VARCHAR}
               , #{naMainBun, jdbcType=VARCHAR}
               , #{naSubBun, jdbcType=VARCHAR}
               , #{naEtc, jdbcType=VARCHAR}
               , #{naSigunguCdOwner, jdbcType=VARCHAR}
               , #{newAddr1, jdbcType=VARCHAR}
               , #{newAddr2, jdbcType=VARCHAR}
               , #{userId, jdbcType=VARCHAR}
               )
    </insert>

    <!-- 철거신고 상세 - 세입자 현황 추가 -->
    <insert id="saveDemolitionDetailTenant" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.saveDemolitionDetailTenant */
        INSERT INTO REMOVE_RENT_INFO
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , SEIPILNO
               , SENAME
               , SEJJGN
               , SEJJUMIN
               , SEBSILJA
               , SEBSGUM
               , SEISGUM
               , SEJAPTILJA
               , SEJIGU
               , SEJAPTNAME
               , SEJDONGHO
               , BIDAK
               , REGIST_ID
               )
        VALUES ( #{gmskk}
               , #{gmdjgb}
               , #{gmseqco}
               , (SELECT NVL(MAX(SEIPILNO), 0) + 1 FROM REMOVE_RENT_INFO WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
               , #{sename, jdbcType=VARCHAR}
               , #{sejjgn, jdbcType=VARCHAR}
               , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{sejjumin}))) FROM dual)
               , #{sebsilja, jdbcType=VARCHAR}
               , #{sebsgum, jdbcType=VARCHAR}
               , #{seisgum, jdbcType=VARCHAR}
               , #{sejaptilja, jdbcType=VARCHAR}
               , #{sejigu, jdbcType=VARCHAR}
               , #{sejaptname, jdbcType=VARCHAR}
               , #{sejdongho, jdbcType=VARCHAR}
               , #{sebidak, jdbcType=VARCHAR}
               , #{userId, jdbcType=VARCHAR}
               )
    </insert>

    <!-- 철거신고 등록 - 철거대장(신고사항) 등록 - 신고사항 등록 -->
    <insert id="saveDemolitionRemoveMaster">
        /* UnlicensedBuildingManagementRepository.saveDemolitionRemoveMaster */
        INSERT INTO REMOVE_MASTER
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , DHBH
               , DHGBH
               , DONGBH
               , DONGGBH
               , DAEJANG
               , GMSKKCD
               , GMBJDCD
               , GMHJDCD
               , GMCSAH
               , GMCBUH
               , GMCJI
               , GMCOH
               , GMGZCD
               , GMGUNP
               , GMFOORS
               , GMYD
               , GMGUNIL
               , TOJIMJ
               , TOJISG
               , TOJIJMG
               , TOJIDP
               , JIGUJDG
               , JIGUGB
               , JIGUUG
               , JIGUDZ
               , GMMJUK
               , TOJIMJUK
               , GMBSDONG
               , DESAU
               , DEILJA
               , ISSUEORGKEY
               , DEUH
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , REGIST_ID
               )
        VALUES (
                 #{gmskk}
               , #{gmdjgb}
               , #{gmseqco}
               , #{dhbh, jdbcType=VARCHAR}
               , #{dhgbh, jdbcType=VARCHAR}
               , #{dongbh, jdbcType=VARCHAR}
               , #{donggbh, jdbcType=VARCHAR}
               , #{daejang, jdbcType=VARCHAR}
               , #{gmskkcd, jdbcType=VARCHAR}
               , #{gmbjdcd, jdbcType=VARCHAR}
               , #{gmhjdcd, jdbcType=VARCHAR}
               , #{gmcsah, jdbcType=VARCHAR}
               , #{gmcbuh, jdbcType=VARCHAR}
               , #{gmcji, jdbcType=VARCHAR}
               , #{gmcoh, jdbcType=VARCHAR}
               , #{gmgzcd, jdbcType=VARCHAR}
               , #{gmgunp, jdbcType=INTEGER}
               , #{gmfoors, jdbcType=INTEGER}
               , #{gmyd, jdbcType=VARCHAR}
               , #{gmgunil, jdbcType=VARCHAR}
               , #{tojimj, jdbcType=INTEGER}
               , #{tojisg, jdbcType=VARCHAR}
               , #{tojijmg, jdbcType=VARCHAR}
               , #{tojidp, jdbcType=VARCHAR}
               , #{jigujdg, jdbcType=VARCHAR}
               , #{jigugb, jdbcType=VARCHAR}
               , #{jiguug, jdbcType=VARCHAR}
               , #{jigudz, jdbcType=INTEGER}
               , #{gmmunjuk, jdbcType=INTEGER}
               , #{tojimunjuk, jdbcType=INTEGER}
               , #{gmbsdong, jdbcType=INTEGER}
               , #{desau, jdbcType=VARCHAR}
               , #{deilja, jdbcType=VARCHAR}
               , #{issueorgkey, jdbcType=VARCHAR}
               , #{deuh, jdbcType=VARCHAR}
               , #{naBjdongNo, jdbcType=VARCHAR}
               , #{naRoadCd, jdbcType=VARCHAR}
               , #{naRoadNm, jdbcType=VARCHAR}
               , #{naMainBun, jdbcType=VARCHAR}
               , #{naSubBun, jdbcType=VARCHAR}
               , #{naEtc, jdbcType=VARCHAR}
               , #{naSigunguCd, jdbcType=VARCHAR}
               , #{newAddr1, jdbcType=VARCHAR}
               , #{newAddr2, jdbcType=VARCHAR}
               , #{userId}
               )
    </insert>

    <!-- 철거신고 등록 - 철거대장(신고사항) 등록 - 무허가대장 수정 -->
    <update id="updateNoperMaster">
        /* UnlicensedBuildingManagementRepository.updateNoperMaster */
        UPDATE NOPER_MASTER
        SET DEGB = 'Y'
          , UPDATE_ID = #{userId}
          , UPDATE_TS = SYSDATE
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 철거신고 등록 - 철거대장(신고사항) 등록 - 철거대장 수정 -->
    <select id="findRemoveOwnerRecom" resultType="java.lang.Integer">
        /* UnlicensedBuildingManagementRepository.findRemoveOwnerRecom */
        SELECT COUNT(*) CNT
        FROM REMOVE_OWNER_RECOM
        WHERE GMBDEGB = 'C'
        <if test='gmskk != null and !gmskk.equals("")'>
            AND GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb != null and !gmdjgb.equals("")'>
            AND GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco != null and !gmseqco.equals("")'>
            AND GMSEQCO = #{gmseqco}
        </if>
    </select>

    <!-- 철거신고 등록 - 철거대장(신고사항) 등록 - 철거소유자 수정 -->
    <update id="updateRemoveOwnerRecom">
        /* UnlicensedBuildingManagementRepository.updateRemoveOwnerRecom */
        UPDATE REMOVE_OWNER_RECOM
        SET GMBDEGB = 'Y'
          , UPDATE_ID = #{userId}
          , UPDATE_TS = SYSDATE
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 철거신고 상세 - 건물주 보상 현황 삭제 -->
    <delete id="deleteDemolitionDetailCompensation" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.deleteDemolitionDetailCompensation */
        DELETE FROM REMOVE_OWNER_RECOM
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND GMJILNO = #{gmjilno}
    </delete>

    <!-- 철거신고 상세 - 세입자 현황 삭제 -->
    <delete id="deleteDemolitionDetailTenant" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.deleteDemolitionDetailTenant */
        DELETE FROM REMOVE_RENT_INFO
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND SEIPILNO = #{seipilno}
    </delete>

    <!-- 철거신고 상세 - 철거철회(건물주 보상 현황 삭제) -->
    <delete id="deleteRemoveAllOwner" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.deleteRemoveAllOwner */
        DELETE
          FROM REMOVE_OWNER_RECOM
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
    </delete>

    <!-- 철거신고 상세 - 철거철회(세입자 현황 삭제) -->
    <delete id="deleteRemoveAllRent" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.deleteRemoveAllRent */
        DELETE
          FROM REMOVE_RENT_INFO
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
    </delete>

    <!-- 철거신고 상세 - 철거철회(철거대장 현황 삭제) -->
    <delete id="deleteRemoveMaster" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.deleteRemoveMaster */
        DELETE
          FROM REMOVE_MASTER
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
    </delete>

    <!-- 철거신고 - 무허가 대장 수정 -->
    <update id="updateNoperMasterN" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.updateNoperMasterN */
        UPDATE NOPER_MASTER
           SET DEGB = #{degb}
             , UPDATE_ID = #{userId}
             , UPDATE_TS = SYSDATE
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 부분철거 시작 -->
    <!-- 부분철거신고 조회 화면- 부분철거신고현황 List -->
    <select id="findPartDemolitionList" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findPartDemolitionList */
        SELECT ROW_NUMBER() OVER(ORDER BY RN) RN
             , SKKSEQ
             , SKKSEQ1
             , GMSKK
             , GMDJGB
             , GMSEQCO
             , GMJILNO
             , GMBILJA
             , GMBGUNP
             , GMBILJA_V
             , GMBFOORS
             , GMBTOJIMJ
             , GMBDEGB
             , GMJBSILJA
             , GMJIGU
             , GMBJDCD
             , GMJBSGUM
             , GMJBSILJA_V
             , GMJJBILJA
             , GMJJBPH
             , GMJNAME
             , GMCSAH
             , GMJJBILJA_V
             , GMJJGN
             , GMJJUMIN
             , KJUSO
             , BIDAK
             , GMBSAU
             , BJUSO
             , NEW_ADDR1
             , NEW_ADDR2
          FROM (
                SELECT
                    /*
                       ROW_NUMBER() OVER(ORDER BY NOPER_MASTER.GMSKK, NOPER_MASTER.GMDJGB,NOPER_MASTER.GMSEQCO) RN
                       */
                       ROW_NUMBER() OVER(ORDER BY NOPER_MASTER.REGIST_TS) RN
                     , REMOVE_OWNER_RECOM.GMSKK||'-'||DECODE(REMOVE_OWNER_RECOM.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||REMOVE_OWNER_RECOM.GMSEQCO SKKSEQ
                     , NOPER_MASTER.GMSKK||'-'||DECODE(NOPER_MASTER.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||NOPER_MASTER.GMSEQCO SKKSEQ1
                     , REMOVE_OWNER_RECOM.GMSKK
                     , NOPER_MASTER.GMBJDCD
                     , REMOVE_OWNER_RECOM.GMDJGB
                     , REMOVE_OWNER_RECOM.GMSEQCO
                     , REMOVE_OWNER_RECOM.GMJILNO
                     , REMOVE_OWNER_RECOM.GMBILJA
                     , REMOVE_OWNER_RECOM.GMBGUNP
                     , SUBSTR(REMOVE_OWNER_RECOM.GMBILJA,1,4)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMBILJA,5,2)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMBILJA,7,2) GMBILJA_V
                     , REMOVE_OWNER_RECOM.GMBFOORS
                     , REMOVE_OWNER_RECOM.GMBTOJIMJ
                     , DECODE(REMOVE_OWNER_RECOM.GMBDEGB,'C','부분철거', 'Y','철거') GMBDEGB
                     , REMOVE_OWNER_RECOM.GMJBSILJA
                     , REMOVE_OWNER_RECOM.GMJIGU
                     , REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(REMOVE_OWNER_RECOM.GMJBSGUM)), '(\d{3})','\1,')), '^,','') AS GMJBSGUM
                     , SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA,1,4)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA,5,2)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA,7,2) GMJBSILJA_V
                     , REMOVE_OWNER_RECOM.GMJJBILJA
                     , REMOVE_OWNER_RECOM.GMJJBPH
                     , REMOVE_OWNER_RECOM.GMJNAME
                     , COALESCE(F_CDNAME(87, NOPER_MASTER.GMCSAH), '-') AS GMCSAH
                     , SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA,1,4)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA,5,2)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA,7,2) GMJJBILJA_V
                     , REMOVE_OWNER_RECOM.GMJJGN
                     /*, SUBSTR(REMOVE_OWNER_RECOM.GMJJUMIN,0,6)||'-*******' AS GMJJUMIN*/
                     , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(REMOVE_OWNER_RECOM.GMJJUMIN))) FROM dual WHERE REMOVE_OWNER_RECOM.GMJJUMIN IS NOT NULL),1,6)||'-*******' AS GMJJUMIN
                     , REMOVE_OWNER_RECOM.GMJSNA||' '||REMOVE_OWNER_RECOM.GMJJNAME KJUSO
                     , REMOVE_OWNER_RECOM.BIDAK
                     , REMOVE_OWNER_RECOM.GMBSAU
                     , SUBSTR(F_BJD_NAME( NOPER_MASTER.GMSKKCD, NOPER_MASTER.GMBJDCD ),1,40)||DECODE(NOPER_MASTER.GMCSAH,'0','대지','1','산','2','블럭','')||NOPER_MASTER.GMCBUH||'-'||NOPER_MASTER.GMCJI||NOPER_MASTER.GMCOH BJUSO
                     , NVL(NOPER_MASTER.NEW_ADDR1, '-') NEW_ADDR1
                     , NVL2(NOPER_MASTER.NEW_ADDR2, NOPER_MASTER.NEW_ADDR2, SUBSTR(F_BJD_NAME(NOPER_MASTER.GMSKKCD, NOPER_MASTER.GMBJDCD ),1,40) || ' ' ||NOPER_MASTER.GMCBUH||'-'||NOPER_MASTER.GMCJI||NOPER_MASTER.GMCOH) NEW_ADDR2
                  FROM NOPER_MASTER
                     , (SELECT * FROM REMOVE_OWNER_RECOM WHERE GMJILNO = '1' AND REMOVE_OWNER_RECOM.GMBDEGB = 'C') REMOVE_OWNER_RECOM
                     , COM_CODE K00_JIMOKCD
                 WHERE NOPER_MASTER.GMSKK = REMOVE_OWNER_RECOM.GMSKK
                   AND NOPER_MASTER.GMDJGB = REMOVE_OWNER_RECOM.GMDJGB
                   AND NOPER_MASTER.GMSEQCO = REMOVE_OWNER_RECOM.GMSEQCO
                   AND NOPER_MASTER.TOJIJMG = K00_JIMOKCD.CDKEY(+)
                   AND '18' = K00_JIMOKCD.CDID(+)
                   AND REMOVE_OWNER_RECOM.GMBDEGB = 'C'
                   AND NOPER_MASTER.NEWYN = 'Y'
                   AND (REPLACE(NOPER_MASTER.DEGB, ' ', '') IS NULL OR REPLACE(NOPER_MASTER.DEGB, ' ', '') = 'N' OR REPLACE(NOPER_MASTER.DEGB, ' ', '') = 'C')
        <if test='gmskk!=null and !gmskk.equals("")'>
            AND NOPER_MASTER.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND NOPER_MASTER.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco2!=null and !gmseqco2.equals("")'>
            <![CDATA[ AND NOPER_MASTER.GMSEQCO <= #{gmseqco2} ]]>
        </if>
        <if test='gmseqco!=null and !gmseqco.equals("") and gmseqco2.equals("")'>
            <![CDATA[ AND NOPER_MASTER.GMSEQCO = #{gmseqco} ]]>
        </if>
        <if test='(gmseqco != null and !gmseqco.equals("")) and (gmseqco2 != null and !gmseqco2.equals(""))'>
            AND NOPER_MASTER.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2}
        </if>
        <if test='daejang!=null and !daejang.equals("")'>
            AND NOPER_MASTER.DAEJANG = #{daejang}
        </if>
        <if test='gmjname!=null and !gmjname.equals("")'>
            AND REMOVE_OWNER_RECOM.GMJNAME = #{gmjname}
        </if>
        <if test='gmskkcd!=null and !gmskkcd.equals("")'>
            AND NOPER_MASTER.GMSKKCD = #{gmskkcd}
        </if>
        <if test='gmhjdcd!=null and !gmhjdcd.equals("")'>
            AND NOPER_MASTER.GMHJDCD = #{gmhjdcd}
        </if>
        <if test='gmbjdcd!=null and !gmbjdcd.equals("")'>
            AND NOPER_MASTER.GMBJDCD = #{gmbjdcd}
        </if>
        <if test='gmcsah!=null and !gmcsah.equals("")'>
            AND NOPER_MASTER.GMCSAH = #{gmcsah}
        </if>
        <if test='gmcbuh!=null and !gmcbuh.equals("")'>
            AND NOPER_MASTER.GMCBUH = #{gmcbuh}
        </if>
        <if test='gmcji!=null and !gmcji.equals("")'>
            AND NOPER_MASTER.GMCJI = #{gmcji}
        </if>
        <if test='gmbilja1!=null and !gmbilja1.equals("")'>
            <![CDATA[ AND REMOVE_OWNER_RECOM.GMBILJA >= #{gmbilja1} ]]>
        </if>
        <if test='gmbilja2!=null and !gmbilja2.equals("")'>
            <![CDATA[ AND REMOVE_OWNER_RECOM.GMBILJA <= #{gmbilja2} ]]>
        </if>
        ORDER BY NOPER_MASTER.REGIST_TS ASC, REMOVE_OWNER_RECOM.REGIST_TS ASC
        )
        <if test='searchJuso != null and !searchJuso.equals("")'>
            WHERE (REGEXP_REPLACE(NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(NEW_ADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
                   REGEXP_REPLACE(F_BJD_NAME(GMSKK, GMBJDCD), '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY RN DESC
    </select>

    <!-- 부분철거신고 조회 - 부분철거신고현황 List ExcelDownload -->
    <select id="findPartDemolitionExcelList" resultType="partDemolitionExcelDTO">
        /* UnlicensedBuildingManagementRepository.findPartDemolitionExcelList */
        SELECT ROW_NUMBER() OVER(ORDER BY RN) RN
        , SKKSEQ
        , SKKSEQ1
        , GMSKK
        , GMDJGB
        , GMSEQCO
        , GMJILNO
        , GMBILJA
        , GMBGUNP
        , GMBILJA_V
        , GMBFOORS
        , GMBTOJIMJ
        , GMBDEGB
        , GMJBSILJA
        , GMJIGU
        , GMBJDCD
        , GMJBSGUM
        , GMJBSILJA_V
        , GMJJBILJA
        , GMJJBPH
        , GMJNAME
        , GMCSAH
        , GMJJBILJA_V
        , GMJJGN
        , GMJJUMIN
        , KJUSO
        , BIDAK
        , GMBSAU
        , BJUSO
        , NEW_ADDR1
        , NEW_ADDR2
        FROM (
        SELECT
        /*
        ROW_NUMBER() OVER(ORDER BY NOPER_MASTER.GMSKK, NOPER_MASTER.GMDJGB,NOPER_MASTER.GMSEQCO) RN
        */
        ROW_NUMBER() OVER(ORDER BY NOPER_MASTER.REGIST_TS) RN
        , REMOVE_OWNER_RECOM.GMSKK||'-'||DECODE(REMOVE_OWNER_RECOM.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||REMOVE_OWNER_RECOM.GMSEQCO SKKSEQ
        , NOPER_MASTER.GMSKK||'-'||DECODE(NOPER_MASTER.GMDJGB,'0','등재','1','미등재','2','항측판독','')||'-'||NOPER_MASTER.GMSEQCO SKKSEQ1
        , REMOVE_OWNER_RECOM.GMSKK
        , NOPER_MASTER.GMBJDCD
        , REMOVE_OWNER_RECOM.GMDJGB
        , REMOVE_OWNER_RECOM.GMSEQCO
        , REMOVE_OWNER_RECOM.GMJILNO
        , REMOVE_OWNER_RECOM.GMBILJA
        , REMOVE_OWNER_RECOM.GMBGUNP
        , SUBSTR(REMOVE_OWNER_RECOM.GMBILJA,1,4)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMBILJA,5,2)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMBILJA,7,2) GMBILJA_V
        , REMOVE_OWNER_RECOM.GMBFOORS
        , REMOVE_OWNER_RECOM.GMBTOJIMJ
        , DECODE(REMOVE_OWNER_RECOM.GMBDEGB,'C','부분철거', 'Y','철거') GMBDEGB
        , REMOVE_OWNER_RECOM.GMJBSILJA
        , REMOVE_OWNER_RECOM.GMJIGU
        , REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(REMOVE_OWNER_RECOM.GMJBSGUM)), '(\d{3})','\1,')), '^,','') AS GMJBSGUM
        , SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA,1,4)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA,5,2)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMJBSILJA,7,2) GMJBSILJA_V
        , REMOVE_OWNER_RECOM.GMJJBILJA
        , REMOVE_OWNER_RECOM.GMJJBPH
        , REMOVE_OWNER_RECOM.GMJNAME
        , COALESCE(F_CDNAME(87, NOPER_MASTER.GMCSAH), '-') AS GMCSAH
        , SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA,1,4)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA,5,2)||'-'||SUBSTR(REMOVE_OWNER_RECOM.GMJJBILJA,7,2) GMJJBILJA_V
        , REMOVE_OWNER_RECOM.GMJJGN
        /*, SUBSTR(REMOVE_OWNER_RECOM.GMJJUMIN,0,6)||'-*******' AS GMJJUMIN*/
        , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(REMOVE_OWNER_RECOM.GMJJUMIN))) FROM dual WHERE REMOVE_OWNER_RECOM.GMJJUMIN IS NOT NULL),1,6)||'-*******' AS GMJJUMIN
        , REMOVE_OWNER_RECOM.GMJSNA||' '||REMOVE_OWNER_RECOM.GMJJNAME KJUSO
        , REMOVE_OWNER_RECOM.BIDAK
        , REMOVE_OWNER_RECOM.GMBSAU
        , SUBSTR(F_BJD_NAME( NOPER_MASTER.GMSKKCD, NOPER_MASTER.GMBJDCD ),1,40)||DECODE(NOPER_MASTER.GMCSAH,'0','대지','1','산','2','블럭','')||NOPER_MASTER.GMCBUH||'-'||NOPER_MASTER.GMCJI||NOPER_MASTER.GMCOH BJUSO
        , NVL(NOPER_MASTER.NEW_ADDR1, '-') NEW_ADDR1
        , NVL2(NOPER_MASTER.NEW_ADDR2, NOPER_MASTER.NEW_ADDR2, SUBSTR(F_BJD_NAME(NOPER_MASTER.GMSKKCD, NOPER_MASTER.GMBJDCD ),1,40) || ' ' ||NOPER_MASTER.GMCBUH||'-'||NOPER_MASTER.GMCJI||NOPER_MASTER.GMCOH) NEW_ADDR2
        FROM NOPER_MASTER
        , (SELECT * FROM REMOVE_OWNER_RECOM WHERE GMJILNO = '1' AND REMOVE_OWNER_RECOM.GMBDEGB = 'C') REMOVE_OWNER_RECOM
        , COM_CODE K00_JIMOKCD
        WHERE NOPER_MASTER.GMSKK = REMOVE_OWNER_RECOM.GMSKK
        AND NOPER_MASTER.GMDJGB = REMOVE_OWNER_RECOM.GMDJGB
        AND NOPER_MASTER.GMSEQCO = REMOVE_OWNER_RECOM.GMSEQCO
        AND NOPER_MASTER.TOJIJMG = K00_JIMOKCD.CDKEY(+)
        AND '18' = K00_JIMOKCD.CDID(+)
        AND REMOVE_OWNER_RECOM.GMBDEGB = 'C'
        AND NOPER_MASTER.NEWYN = 'Y'
        <if test='gmskk!=null and !gmskk.equals("")'>
            AND NOPER_MASTER.GMSKK = #{gmskk}
        </if>
        <if test='gmdjgb!=null and !gmdjgb.equals("")'>
            AND NOPER_MASTER.GMDJGB = #{gmdjgb}
        </if>
        <if test='gmseqco2!=null and !gmseqco2.equals("")'>
            <![CDATA[ AND NOPER_MASTER.GMSEQCO <= #{gmseqco2} ]]>
        </if>
        <if test='gmseqco!=null and !gmseqco.equals("") and gmseqco2.equals("")'>
            <![CDATA[ AND NOPER_MASTER.GMSEQCO = #{gmseqco} ]]>
        </if>
        <if test='(gmseqco != null and !gmseqco.equals("")) and (gmseqco2 != null and !gmseqco2.equals(""))'>
            AND NOPER_MASTER.GMSEQCO BETWEEN #{gmseqco} AND #{gmseqco2}
        </if>
        <if test='daejang!=null and !daejang.equals("")'>
            AND NOPER_MASTER.DAEJANG = #{daejang}
        </if>
        <if test='gmjname!=null and !gmjname.equals("")'>
            AND REMOVE_OWNER_RECOM.GMJNAME = #{gmjname}
        </if>
        <if test='gmskkcd!=null and !gmskkcd.equals("")'>
            AND NOPER_MASTER.GMSKKCD = #{gmskkcd}
        </if>
        <if test='gmhjdcd!=null and !gmhjdcd.equals("")'>
            AND NOPER_MASTER.GMHJDCD = #{gmhjdcd}
        </if>
        <if test='gmbjdcd!=null and !gmbjdcd.equals("")'>
            AND NOPER_MASTER.GMBJDCD = #{gmbjdcd}
        </if>
        <if test='gmcsah!=null and !gmcsah.equals("")'>
            AND NOPER_MASTER.GMCSAH = #{gmcsah}
        </if>
        <if test='gmcbuh!=null and !gmcbuh.equals("")'>
            AND NOPER_MASTER.GMCBUH = #{gmcbuh}
        </if>
        <if test='gmcji!=null and !gmcji.equals("")'>
            AND NOPER_MASTER.GMCJI = #{gmcji}
        </if>
        <if test='gmbilja1!=null and !gmbilja1.equals("")'>
            <![CDATA[ AND REMOVE_OWNER_RECOM.GMBILJA >= #{gmbilja1} ]]>
        </if>
        <if test='gmbilja2!=null and !gmbilja2.equals("")'>
            <![CDATA[ AND REMOVE_OWNER_RECOM.GMBILJA <= #{gmbilja2} ]]>
        </if>
        ORDER BY NOPER_MASTER.REGIST_TS ASC, REMOVE_OWNER_RECOM.REGIST_TS ASC
        )
        <if test='searchJuso != null and !searchJuso.equals("")'>
            WHERE (REGEXP_REPLACE(NEW_ADDR1, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
            REGEXP_REPLACE(NEW_ADDR2, '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%' OR
            REGEXP_REPLACE(F_BJD_NAME(GMSKK, GMBJDCD), '\s', '') LIKE '%' || REGEXP_REPLACE(#{searchJuso}, '\s', '') || '%')
        </if>
        ORDER BY RN DESC
    </select>

    <!-- 부분철거신고 등록 - 철거 기본 정보 조회 -->
    <select id="findPartDemolitionAddNoperInfo" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findPartDemolitionAddNoperInfo */
        SELECT A.GMSKK
             , F_CDNAME('N01',A.GMDJGB) AS GMDJGB_NAME
             , A.GMDJGB
             , A.GMSEQCO
             , A.GMSKK || '-' || F_CDNAME('N01', A.GMDJGB) || '-' || A.GMSEQCO AS DAEJANG_BUNHO
             , A.DHBH
             , A.DHGBH
             , A.DONGBH
             , A.DONGGBH
             , A.DAEJANG
             , A.GMSKKCD
             , A.GMBJDCD
             , A.GMHJDCD
             , A.GMCSAH
             , A.GMCBUH
             , A.GMCJI
             , A.GMCOH
             , A.GMGZCD
             , A.GMYD
             , A.GMBSDONG
             , A.GMGUNP
             , A.TOJIMJ
             , A.GMMUNJUK
             , A.TOJIMUNJUK
             , (A.GMGUNP-nvl((select SUM(NVL(RECOM.GMBGUNP,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS CURRENT_GMBGUNP
             , (A.TOJIMJ-nvl((select SUM(NVL(RECOM.GMBTOJIMJ,0)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS CURRENT_GMBTOJIMJ
             , (A.GMMUNJUK-nvl((select SUM(decode(nvl(RECOM.GMBMJUK,0),0,nvl(RECOM.GMBGUNP,0)*3.3058,RECOM.GMBMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS CURRENT_GMBMJUK
             , (A.TOJIMUNJUK-nvl((select SUM(decode(nvl(RECOM.GMBTOJIMJUK,0),0,nvl(RECOM.GMBTOJIMJ,0)*3.3058,RECOM.GMBTOJIMJUK)) FROM REMOVE_OWNER_RECOM RECOM WHERE RECOM.GMSKK = A.GMSKK AND RECOM.GMDJGB = A.GMDJGB AND RECOM.GMSEQCO = A.GMSEQCO),0)) AS CURRENT_GMBTOJIMJUK
             , A.GMFOORS
             , GMGUNIL
             , SUBSTR(GMGUNIL, 0, 4) || '-' || SUBSTR(GMGUNIL, 5, 2) || '-' || SUBSTR(GMGUNIL, 7, 2) AS GMGUNIL_V
             , A.TOJISG
             , A.TOJIJMG
             , A.TOJIDP
             , A.JIGUJDG
             , A.JIGUGB
             , A.JIGUUG
             , A.JIGUDZ
             , RTRIM(A.DEGB) AS DEGB
             , A.NA_BJDONG_NO
             , A.NA_ROAD_NM
             , A.NA_MAIN_BUN
             , A.NA_SUB_BUN
             , A.NA_ETC
             , A.BIGO
             , COALESCE(A.NEW_ADDR1, '-') NEW_ADDR1
             , COALESCE(NVL2(A.NEW_ADDR2, A.NEW_ADDR2, DECODE(A.GMHJDCD,'', F_BJD_NAME(A.GMSKKCD,A.GMBJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI),
                                                     F_BJDNAME(A.GMSKKCD,A.GMBJDCD,A.GMHJDCD)||' '||F_CDNAME(87,A.GMCSAH)||' '||A.GMCBUH||DECODE(A.GMCJI,'','','-'||A.GMCJI))), '-') NEW_ADDR2
          FROM NOPER_MASTER A
         WHERE A.GMSKK = #{gmskk}
           AND A.GMDJGB = #{gmdjgb}
           AND A.GMSEQCO = #{gmseqco}
           AND A.NEWYN = 'Y'
    </select>

    <!-- 부분철거신고 상세 화면 조회 - 신고현황(기본현황) 상세 -->
    <select id="findPartDemolitionNoperInfo" parameterType="DemolitionDTO" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findPartDemolitionNoperInfo */
        SELECT A.GMSKK
             , F_CDNAME('N01', A.GMDJGB)                                       AS GMDJGB_NAME
             , A.GMDJGB
             , A.GMSEQCO
             , A.GMSKK || '-' || F_CDNAME('N01', A.GMDJGB) || '-' || A.GMSEQCO AS DAEJANG_BUNHO
             , A.DHBH
             , A.DHGBH
             , A.DONGBH
             , A.DONGGBH
             , A.DAEJANG
             , A.GMSKKCD
             , A.GMBJDCD
             , A.GMHJDCD
             , A.GMCSAH
             , A.GMCBUH
             , A.GMCJI
             , A.GMCOH
             , A.GMGZCD
             , A.GMYD
             , A.GMBSDONG
             , A.GMGUNP
             , A.TOJIMJ
             , A.GMMUNJUK
             , A.TOJIMUNJUK
             , (A.GMGUNP - nvl((select SUM(NVL(RECOM.GMBGUNP, 0))
                                FROM REMOVE_OWNER_RECOM RECOM
                                WHERE RECOM.GMSKK = A.GMSKK
                                  AND RECOM.GMDJGB = A.GMDJGB
                                  AND RECOM.GMSEQCO = A.GMSEQCO), 0))          AS CURRENT_GMBGUNP
             , (A.TOJIMJ - nvl((select SUM(NVL(RECOM.GMBTOJIMJ, 0))
                                FROM REMOVE_OWNER_RECOM RECOM
                                WHERE RECOM.GMSKK = A.GMSKK
                                  AND RECOM.GMDJGB = A.GMDJGB
                                  AND RECOM.GMSEQCO = A.GMSEQCO), 0))          AS CURRENT_GMBTOJIMJ
             , (decode(nvl(A.GMMUNJUK, 0), 0, nvl(A.GMGUNP, 0) * 3.3058, A.GMMUNJUK) -
                nvl((select SUM(decode(nvl(RECOM.GMBMJUK, 0), 0, nvl(RECOM.GMBGUNP, 0) * 3.3058, RECOM.GMBMJUK))
                     FROM REMOVE_OWNER_RECOM RECOM
                     WHERE RECOM.GMSKK = A.GMSKK
                       AND RECOM.GMDJGB = A.GMDJGB
                       AND RECOM.GMSEQCO = A.GMSEQCO), 0))                     AS CURRENT_GMBMJUK
             , (decode(nvl(A.TOJIMUNJUK, 0), 0, nvl(A.TOJIMJ, 0) * 3.3058, A.TOJIMUNJUK) - nvl(
                (select SUM(decode(nvl(RECOM.GMBTOJIMJUK, 0), 0, nvl(RECOM.GMBTOJIMJ, 0) * 3.3058, RECOM.GMBTOJIMJUK))
                 FROM REMOVE_OWNER_RECOM RECOM
                 WHERE RECOM.GMSKK = A.GMSKK
                   AND RECOM.GMDJGB = A.GMDJGB
                   AND RECOM.GMSEQCO = A.GMSEQCO), 0))                         AS CURRENT_GMBTOJIMJUK
             , A.GMFOORS
             , A.GMGUNIL
             , DECODE(A.GMGUNIL, NULL, '-', SUBSTR(A.GMGUNIL, 0, 4) || '-' || SUBSTR(A.GMGUNIL, 5, 2) || '-' || SUBSTR(A.GMGUNIL, 7, 2)) AS GMGUNIL_V
             , A.TOJISG
             , A.TOJIJMG
             , A.TOJIDP
             , A.JIGUJDG
             , A.JIGUGB
             , A.JIGUUG
             , A.JIGUDZ
             , A.BIGO
             , SUBSTR(F_BJD_NAME(A.GMSKKCD, A.GMBJDCD), 1, 40) || ' ' || C.CDVALUE || '' || A.GMCBUH || '-' ||
               A.GMCJI || ' ' || A.GMCOH                                          BJUSO
             , B.GMJSNA || ' ' || B.GMJJNAME                                   AS GMJUSO
             , B.GMJNAME
             ,(SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(B.GMJJUMIN))) FROM dual WHERE B.GMJJUMIN IS NOT NULL) AS GMJJUMIN
             , TO_CHAR(SYSDATE, 'YYYY')                                        AS YYYY
             , TO_CHAR(SYSDATE, 'MM')                                          AS MM
             , TO_CHAR(SYSDATE, 'DD')                                          AS DD
             , A.NA_BJDONG_NO
             , A.NA_ROAD_NM
             , A.NA_MAIN_BUN
             , A.NA_SUB_BUN
             , A.NA_ETC
             , B.NA_BJDONG_NO naBjdongNoOwner
             , B.NA_ROAD_NM naRoadNmOwner
             , B.NA_MAIN_BUN naMainBunOwner
             , B.NA_SUB_BUN naSubBunOwner
             , B.NA_ETC naEtcOwner
             , B.NA_SIGUNGU_CD naSigunguCdOwner
             , DECODE(A.NEW_ADDR1, NULL, '-', A.NEW_ADDR1) AS buildingNewAddr1
             , COALESCE(TRIM(BOTH ' ' FROM NVL2(A.NEW_ADDR2, A.NEW_ADDR2
                   , DECODE(A.GMHJDCD, '', F_BJD_NAME(A.GMSKKCD, A.GMBJDCD) || ' ' || F_CDNAME(87, A.GMCSAH) || ' ' || A.GMCBUH || DECODE(A.GMCJI, '', '', '-' || A.GMCJI)
                       , F_BJDNAME(A.GMSKKCD, A.GMBJDCD, A.GMHJDCD) || ' ' || F_CDNAME(87, A.GMCSAH) || ' ' || A.GMCBUH || DECODE(A.GMCJI, '', '', '-' || A.GMCJI)))), '-') buildingNewAddr2
             , DECODE(B.NEW_ADDR1, NULL, '-', B.NEW_ADDR1) gmjNewAddr1
             , DECODE(NVL2(B.NEW_ADDR2, B.NEW_ADDR2, B.GMJSNA || ' ' || B.GMJJNAME), NULL, '-', ' ', '-', NVL2(B.NEW_ADDR2, B.NEW_ADDR2, B.GMJSNA || ' ' || B.GMJJNAME)) gmjNewAddr2
        FROM NOPER_MASTER A
           , (SELECT * FROM NOPER_OWNER WHERE GMJILNO = '1' AND DELETE_AT = 'N') B
           , COM_CODE C
        WHERE A.GMSKK = B.GMSKK(+)
          AND A.GMDJGB = B.GMDJGB(+)
          AND A.GMSEQCO = B.GMSEQCO(+)
          AND A.GMCSAH = C.CDKEY(+)
          AND '87' = C.CDID(+)
          AND A.GMSKK = #{gmskk}
          AND A.GMDJGB = #{gmdjgb}
          AND A.GMSEQCO = #{gmseqco}
          AND A.NEWYN = 'Y'
    </select>

    <!-- 부분철거신고 상세 화면 조회 - 건물주 보상 현황 리스트 -->
    <select id="findPartDemolitionCompensationList" parameterType="DemolitionDTO" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findPartDemolitionCompensationList */
        SELECT GMJILNO
             , GMJNAME
             , GMJJGN
             /*, GMJJUMIN*/
             , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL) GMJJUMIN
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),1,6) GMJJUMIN1
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(GMJJUMIN))) FROM dual WHERE GMJJUMIN IS NOT NULL),8,7) GMJJUMIN2
             , GMJZIP1
             , GMJZIP2
             , GMJJNAME
             , GMJSNA
             , GMJBSILJA
             , DECODE(GMJBSILJA, NULL, '-', '--', '-', SUBSTR(GMJBSILJA, 0, 4) || '-' || SUBSTR(GMJBSILJA, 5, 2) || '-' || SUBSTR(GMJBSILJA, 7, 2)) AS GMJBSILJA_V
             , REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(REMOVE_OWNER_RECOM.GMJBSGUM)), '(\d{3})','\1,')), '^,','') AS GMJBSGUM
             , GMJJBILJA
             , DECODE(GMJJBILJA, NULL, '-', '--', '-', SUBSTR(GMJJBILJA, 0, 4) || '-' || SUBSTR(GMJJBILJA, 5, 2) || '-' || SUBSTR(GMJJBILJA, 7, 2)) AS GMJJBILJA_V
             , GMJIGU
             , GMJJBPH
             , BIDAK AS GMBIDAK
             , GMBILJA
             , DECODE(GMBILJA, NULL, '-', '--', '-', SUBSTR(GMBILJA, 0, 4) || '-' || SUBSTR(GMBILJA, 5, 2) || '-' || SUBSTR(GMBILJA, 7, 2)) AS GMBILJA_V
             , GMBGUNP
             , GMBFOORS
             , GMBTOJIMJ
             , GMBSAU
             , GMBMJUK
             , GMBTOJIMJUK
             , GMBSDONG
             , NA_BJDONG_NO
             , NA_ROAD_NM
             , NA_MAIN_BUN
             , NA_SUB_BUN
             , NA_ETC
             , NA_SIGUNGU_CD
             , NEW_ADDR1 AS gmjNewAddr1
             , NEW_ADDR2 AS gmjNewAddr2
             , ISSUEORGKEY
          FROM REMOVE_OWNER_RECOM
         WHERE GMSKK= #{gmskk}
           AND GMDJGB= #{gmdjgb}
           AND GMSEQCO= #{gmseqco}
           AND GMBDEGB = 'C'
         ORDER BY GMJILNO ASC
    </select>

    <!-- 부분철거신고 상세 화면 조회 - 세입자 현황 리스트 -->
    <select id="findPartDemolitionTenantList" resultType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.findPartDemolitionTenantList */
        SELECT SEIPILNO
             , SEBSILJA
             , SUBSTR(SEBSILJA, 0, 4) || '-' || SUBSTR(SEBSILJA, 5, 2) || '-' || SUBSTR(SEBSILJA, 7, 2) AS SEBSILJA_V
             , SEJIGU
             , REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(SEBSGUM)), '(\d{3})','\1,')), '^,','') AS SEBSGUM
             , SEISGUM
             , SEJAPTILJA
             , SUBSTR(SEJAPTILJA, 0, 4) || '-' || SUBSTR(SEJAPTILJA, 5, 2) || '-' || SUBSTR(SEJAPTILJA, 7, 2) AS SEJAPTILJA_V
             , SEJAPTNAME
             , SEJDONGHO
             , SENAME
             , SEJJGN
             , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SEJJUMIN))) FROM dual WHERE SEJJUMIN IS NOT NULL) AS SEJJUMIN
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SEJJUMIN))) FROM dual WHERE SEJJUMIN IS NOT NULL),1,6) SEJJUMIN1
             , SUBSTR((SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(SEJJUMIN))) FROM dual WHERE SEJJUMIN IS NOT NULL),8,7) SEJJUMIN2
             , BIDAK AS SEBIDAK
          FROM REMOVE_RENT_INFO
         WHERE GMSKK= #{gmskk}
           AND GMDJGB= #{gmdjgb}
           AND GMSEQCO= #{gmseqco}
           AND SEBDEGB = 'C'
         ORDER BY SEIPILNO DESC
    </select>

    <select id="noperStatus" parameterType="SearchParamDTO" resultType="NoperStatusDTO">
        <choose>
            <when test="skkCd.equals('')">
                SELECT DECODE(m.GMSKKCD, '계', '계', '서울특별시 '||F_CDNAME(89, m.GMSKKCD)) as GMSKKCD, DECODE(m.TOTAL_COUNT, 0, '-', m.TOTAL_COUNT) AS TOTAL_COUNT, DECODE(m.NORMAL_COUNT, 0, '-', m.NORMAL_COUNT) AS NORMAL_COUNT, DECODE(m.PART_REMOVE_COUNT, 0, '-', m.PART_REMOVE_COUNT) AS PART_REMOVE_COUNT, DECODE(m.REMOVE_COUNT, 0, '-', m.REMOVE_COUNT) AS REMOVE_COUNT,
                DECODE(r.TYPE1, 0, '-', r.TYPE1) AS TYPE1, DECODE(r.TYPE2, 0, '-', r.TYPE2) AS TYPE2, DECODE(r.TYPE3, 0, '-', r.TYPE3) AS TYPE3, DECODE(r.TYPE4, 0, '-', r.TYPE4) AS TYPE4
                FROM
                (
                SELECT bm.GMSKKCD, bm.TOTAL_COUNT, bm.NORMAL_COUNT, bm.REMOVE_COUNT, br.PART_REMOVE_COUNT
                FROM (
                SELECT NVL(A.GMSKK, '계') AS GMSKKCD, count(A.DEGB) AS TOTAL_COUNT, NVL(count(CASE WHEN A.DEGB IS NULL OR A.DEGB != 'Y' THEN 1 END), 0) AS NORMAL_COUNT, NVL(count(CASE WHEN A.DEGB = 'Y' THEN 1 END), 0) AS REMOVE_COUNT
                FROM NOPER_MASTER A, (SELECT * FROM NOPER_OWNER WHERE GMJILNO(+) = 1 ) B
                WHERE B.DELETE_AT(+)='N'
                AND A.GMSKK = B.GMSKK(+)
                AND A.GMDJGB = B.GMDJGB(+)
                AND A.GMSEQCO = B.GMSEQCO(+)
                AND A.GMSKK IS NOT NULL AND A.GMBJDCD IS NOT NULL AND A.NEWYN='Y'
                GROUP BY ROLLUP (A.GMSKK)
                ) bm LEFT OUTER JOIN (
                SELECT NVL(NOPER_MASTER.GMSKK, '계') AS GMSKKCD, count(*) AS PART_REMOVE_COUNT
                FROM NOPER_MASTER, REMOVE_OWNER_RECOM
                WHERE NOPER_MASTER.GMSKK IS NOT NULL AND NOPER_MASTER.GMBJDCD IS NOT NULL AND NOPER_MASTER.NEWYN='Y'
                AND NOPER_MASTER.GMSKK = REMOVE_OWNER_RECOM.GMSKK(+)
                AND NOPER_MASTER.GMDJGB = REMOVE_OWNER_RECOM.GMDJGB(+)
                AND NOPER_MASTER.GMSEQCO = REMOVE_OWNER_RECOM.GMSEQCO(+)
                AND REMOVE_OWNER_RECOM.GMJILNO = '1'
                AND REMOVE_OWNER_RECOM.GMBDEGB = 'C'
                GROUP BY ROLLUP (NOPER_MASTER.GMSKK)
                ) br ON bm.GMSKKCD = br.GMSKKCD
                ) m,
                (
                SELECT NVL(GMSKK, '계') AS GMSKKCD, NVL(count(CASE WHEN DEUH = '1' THEN 1 END), 0) AS TYPE1, NVL(count(CASE WHEN DEUH = '2' THEN 1 END), 0) AS TYPE2,
                NVL(count(CASE WHEN DEUH = '3' THEN 1 END), 0) AS TYPE3, NVL(count(CASE WHEN DEUH = '4' THEN 1 END), 0) AS TYPE4
                FROM REMOVE_MASTER
                WHERE GMSKK IS NOT NULL AND GMBJDCD IS NOT NULL
                GROUP BY ROLLUP (GMSKK)
                ORDER BY GMSKK
                ) r
                WHERE m.GMSKKCD(+) = r.GMSKKCD
                ORDER BY CASE WHEN m.GMSKKCD = '계' THEN 2 ELSE 1 END, m.GMSKKCD
            </when>
            <otherwise>
                SELECT DECODE(m.GMBJDCD, '계', '계', F_BJD_NAME(m.GMSKKCD, m.GMBJDCD)) AS GMSKKCD, DECODE(m.TOTAL_COUNT, 0, '-', m.TOTAL_COUNT) AS TOTAL_COUNT, DECODE(m.NORMAL_COUNT, 0, '-', m.NORMAL_COUNT) AS NORMAL_COUNT, DECODE(m.PART_REMOVE_COUNT, 0, '-', m.PART_REMOVE_COUNT) AS PART_REMOVE_COUNT, DECODE(m.REMOVE_COUNT, 0, '-', m.REMOVE_COUNT) AS REMOVE_COUNT,
                DECODE(r.TYPE1, 0, '-', r.TYPE1) AS TYPE1, DECODE(r.TYPE2, 0, '-', r.TYPE2) AS TYPE2, DECODE(r.TYPE3, 0, '-', r.TYPE3) AS TYPE3, DECODE(r.TYPE4, 0, '-', r.TYPE4) AS TYPE4
                FROM
                (
                SELECT bm.GMSKKCD, bm.GMBJDCD, bm.TOTAL_COUNT, bm.NORMAL_COUNT, bm.REMOVE_COUNT, br.PART_REMOVE_COUNT
                FROM (
                SELECT A.GMSKK as GMSKKCD, NVL(A.GMBJDCD, '계') AS GMBJDCD, count(A.DEGB) AS TOTAL_COUNT, NVL(count(CASE WHEN A.DEGB IS NULL OR A.DEGB != 'Y' THEN 1 END), 0) AS NORMAL_COUNT,
                NVL(count(CASE WHEN A.DEGB = 'Y' THEN 1 END), 0) AS REMOVE_COUNT
                FROM NOPER_MASTER A, (SELECT * FROM NOPER_OWNER WHERE GMJILNO(+) = 1 ) B
                WHERE B.DELETE_AT(+)='N'
                AND A.GMSKK = B.GMSKK(+)
                AND A.GMDJGB = B.GMDJGB(+)
                AND A.GMSEQCO = B.GMSEQCO(+)
                AND A.GMSKK = #{skkCd} AND A.GMSKK IS NOT NULL AND A.GMBJDCD IS NOT NULL AND A.NEWYN='Y'
                GROUP BY ROLLUP (A.GMSKK, A.GMBJDCD)
                ) bm LEFT JOIN (
                SELECT NOPER_MASTER.GMSKK AS GMSKKCD, NVL(NOPER_MASTER.GMBJDCD, '계') AS GMBJDCD, count(*) AS PART_REMOVE_COUNT
                FROM NOPER_MASTER, REMOVE_OWNER_RECOM
                WHERE NOPER_MASTER.GMSKK = #{skkCd} AND NOPER_MASTER.GMSKK IS NOT NULL AND NOPER_MASTER.GMBJDCD IS NOT NULL AND NOPER_MASTER.NEWYN='Y'
                AND NOPER_MASTER.GMSKK = REMOVE_OWNER_RECOM.GMSKK(+)
                AND NOPER_MASTER.GMDJGB = REMOVE_OWNER_RECOM.GMDJGB(+)
                AND NOPER_MASTER.GMSEQCO = REMOVE_OWNER_RECOM.GMSEQCO(+)
                AND REMOVE_OWNER_RECOM.GMJILNO = '1'
                AND REMOVE_OWNER_RECOM.GMBDEGB = 'C'
                GROUP BY ROLLUP (NOPER_MASTER.GMSKK, NOPER_MASTER.GMBJDCD)
                ) br ON bm.GMSKKCD = br.GMSKKCD and bm.GMBJDCD = br.GMBJDCD
                ) m,
                (
                SELECT GMSKK AS GMSKKCD, NVL(GMBJDCD, '계') AS GMBJDCD, NVL(count(CASE WHEN DEUH = '1' THEN 1 END), 0) AS TYPE1, NVL(count(CASE WHEN DEUH = '2' THEN 1 END), 0) AS TYPE2,
                NVL(count(CASE WHEN DEUH = '3' THEN 1 END), 0) AS TYPE3, NVL(count(CASE WHEN DEUH = '4' THEN 1 END), 0) AS TYPE4
                FROM REMOVE_MASTER
                WHERE GMSKK = #{skkCd} AND GMSKK IS NOT NULL AND GMBJDCD IS NOT NULL
                GROUP BY ROLLUP (GMSKK, GMBJDCD)
                ORDER BY GMBJDCD
                ) r
                WHERE m.GMSKKCD = r.GMSKKCD AND m.GMBJDCD = r.GMBJDCD
                ORDER BY CASE WHEN m.GMBJDCD IS NULL THEN 2 ELSE 1 END, m.GMBJDCD
            </otherwise>
        </choose>
    </select>

    <select id="noperStatusByPeriod" parameterType="SearchParamDTO" resultType="NoperStatusByPeriodDTO">
        WITH ym AS (
            SELECT TO_CHAR(ADD_MONTHS(TO_DATE('200001', 'YYYYMM'), LEVEL - 1), 'YYYY') as YEAR, TO_CHAR(ADD_MONTHS(TO_DATE('200001', 'YYYYMM'), LEVEL - 1), 'MM') as MONTH
            FROM  <![CDATA[ DUAL CONNECT BY LEVEL <= MONTHS_BETWEEN ( SYSDATE , TO_DATE('200001', 'YYYYMM') ) + 1 ]]>
        )

        SELECT NVL(YEAR, '계') AS YEAR, MONTH, DECODE(SUM(TYPE1), 0, '-', SUM(TYPE1)) AS TYPE1, DECODE(SUM(TYPE2), 0, '-', SUM(TYPE2)) AS TYPE2,
               DECODE(SUM(TYPE3), 0, '-', SUM(TYPE3)) AS TYPE3, DECODE(SUM(TYPE4), 0, '-', SUM(TYPE4)) AS TYPE4, DECODE(SUM(sum), 0, '-', SUM(sum)) AS sum,
               DECODE(SUM(inc), 0, '-', SUM(inc)) AS inc, NVL(total, LAG(total) OVER (ORDER BY YEAR, MONTH)) AS total
        FROM (
             SELECT n.YEAR||'년' as year, n.MONTH||'월' as month, NVL(r.TYPE1, 0) as TYPE1, NVL(r.TYPE2, 0) as TYPE2,
                    NVL(r.TYPE3, 0) as TYPE3, NVL(r.TYPE4, 0) as TYPE4, NVL(r.SUM, 0) as SUM,
                    (NVL(LAG(n.nTotal) OVER (ORDER BY n.YEAR, n.MONTH), n.nTotal) - n.nTotal) * -1 AS INC,
                    DECODE(n.nTotal - r.rTotal, 0, '-', n.nTotal - r.rTotal) AS total
             FROM
             (
                  SELECT ym.YEAR, ym.MONTH, TYPE1, TYPE2, TYPE3, TYPE4, SUM, NVL(SUM(SUM) OVER (ORDER BY ym.YEAR, ym.MONTH), 0) AS rTotal
                  FROM (
                           SELECT TO_CHAR(REGIST_TS, 'YYYY') AS YEAR, TO_CHAR(REGIST_TS, 'MM') AS MONTH,
                                  NVL(count(CASE WHEN DEUH = '1' THEN 1 END), 0) AS TYPE1, NVL(count(CASE WHEN DEUH = '2' THEN 1 END), 0) AS TYPE2,
                                  NVL(count(CASE WHEN DEUH = '3' THEN 1 END), 0) AS TYPE3, NVL(count(CASE WHEN DEUH = '4' THEN 1 END), 0) AS TYPE4,
                                  NVL(count(CASE WHEN DEUH = '1' THEN 1 END) + count(CASE WHEN DEUH = '2' THEN 1 END) + count(CASE WHEN DEUH = '3' THEN 1 END) + count(CASE WHEN DEUH = '4' THEN 1 END), 0) AS SUM
                           FROM REMOVE_MASTER
                           WHERE GMSKKCD like '%'||#{skkCd}||'%'
                           GROUP BY TO_CHAR(REGIST_TS, 'YYYY'), TO_CHAR(REGIST_TS, 'MM')
                           ORDER BY YEAR, MONTH
                       ) r, ym
                  WHERE ym.YEAR = r.YEAR(+) AND ym.MONTH = r.MONTH(+)
                  ORDER BY ym.YEAR, ym.MONTH
             ) r,
             (
                  SELECT YEAR, MONTH, SUM(nTotal) OVER (ORDER BY YEAR, MONTH) AS nTotal
                  FROM (
                           SELECT ym.YEAR, ym.MONTH, nvl(nTotal, 0) AS nTotal
                           FROM (
                                SELECT TO_CHAR(REGIST_TS, 'YYYY') AS YEAR, TO_CHAR(REGIST_TS, 'MM') AS MONTH, count(*) AS nTotal
                                FROM NOPER_MASTER
                                WHERE GMSKKCD like '%'||#{skkCd}||'%'
                                GROUP BY TO_CHAR(REGIST_TS, 'YYYY'), TO_CHAR(REGIST_TS, 'MM')
                                ORDER BY TO_CHAR(REGIST_TS, 'YYYY'), TO_CHAR(REGIST_TS, 'MM')
                           ) n, ym
                           WHERE ym.YEAR = n.YEAR(+) AND ym.MONTH = n.MONTH(+)
                           ORDER BY ym.YEAR, ym.MONTH
                  ) n
                  ORDER BY YEAR, MONTH
             ) n
             WHERE n.YEAR = r.YEAR AND n.MONTH = r.MONTH <![CDATA[AND TO_DATE(n.YEAR||n.MONTH, 'YYYYMM') >= TO_DATE(TO_CHAR(TO_DATE(#{startDate}, 'YYYY-MM-DD'), 'YYYYMM'), 'YYYYMM') AND TO_DATE(n.YEAR||n.MONTH, 'YYYYMM') <= TO_DATE(TO_CHAR(TO_DATE(#{endDate}, 'YYYY-MM-DD'), 'YYYYMM'), 'YYYYMM')]]>
             ORDER BY n.YEAR, n.MONTH
        ) a
        GROUP BY ROLLUP (YEAR, MONTH, total)
        HAVING YEAR IS NOT NULL AND MONTH IS NOT NULL AND total IS NOT NULL OR YEAR IS NULL AND MONTH IS NULL AND total IS NULL
        ORDER BY YEAR, MONTH
    </select>

    <!--  소유자상세 소유자 현황  -->
    <select id="OwnerInfoDetailList" resultType="kr.go.seoul.noper2.dto.OwnerChangeDTO">
        SELECT ROW_NUMBER() OVER(ORDER BY NOPER_OWNER.GMSKK, NOPER_OWNER.GMDJGB, NOPER_OWNER.GMSEQCO, NOPER_OWNER.GMJILNO ASC) RN
             , NOPER_OWNER.GMJILNO
             , NOPER_OWNER_CHANGE.SUILNO
             , NOPER_OWNER.GMJNAME
             , COALESCE(NOPER_OWNER.NEW_ADDR1, '-') NEW_ADDR1
             , COALESCE(
                CASE
                    WHEN NOPER_OWNER.NEW_ADDR2 = '' OR NOPER_OWNER.NEW_ADDR2 IS NULL THEN NOPER_OWNER.GMJSNA || ' ' || NOPER_OWNER.GMJJNAME
                    ELSE NOPER_OWNER.NEW_ADDR2
                END , '-') NEW_ADDR2
             , COALESCE(
                (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(NOPER_OWNER.GMJJUMIN))) FROM dual WHERE NOPER_OWNER.GMJJUMIN IS NOT NULL)
                , '-') GMJJUMIN
             , NOPER_OWNER.GMJJGN
             , NOPER_OWNER.GMJSNA
             , COALESCE(NOPER_OWNER_CHANGE.JGMJNAME, '-') JGMJNAME
             , NOPER_OWNER_CHANGE.SUJILJA
             , NOPER_OWNER_CHANGE.CRILJA
             , NOPER_OWNER_CHANGE.GMJJNAME
        FROM NOPER_OWNER NOPER_OWNER
           , NOPER_OWNER_CHANGE NOPER_OWNER_CHANGE
        WHERE NOPER_OWNER.DELETE_AT = 'N'
          AND NOPER_OWNER.GMSKK = NOPER_OWNER_CHANGE.GMSKK(+)
          AND NOPER_OWNER.GMDJGB = NOPER_OWNER_CHANGE.GMDJGB(+)
          AND NOPER_OWNER.GMSEQCO = NOPER_OWNER_CHANGE.GMSEQCO(+)
          AND NOPER_OWNER_CHANGE.DELGB IS NULL
          AND NOPER_OWNER.GMSKK = #{gmskk}
          AND NOPER_OWNER.GMDJGB = #{gmdjgb}
          AND NOPER_OWNER.GMSEQCO = #{gmseqco}
          AND NOPER_OWNER.GMJILNO = NOPER_OWNER_CHANGE.GMJILNO(+)
          AND NOPER_OWNER_CHANGE.SUILNO = (SELECT max(suilno) FROM NOPER_OWNER_CHANGE WHERE NOPER_OWNER_CHANGE.GMSKK = #{gmskk} AND NOPER_OWNER_CHANGE.GMDJGB = #{gmdjgb} AND NOPER_OWNER_CHANGE.GMSEQCO = #{gmseqco} AND NOPER_OWNER_CHANGE.GMJILNO = NOPER_OWNER.GMJILNO)
        ORDER BY RN DESC
    </select>

    <!-- 부분철거신고 상세 화면 조회 - 건물주 보상 현황 추가 -->
    <insert id="savePartDemolitionDetailCompensation" parameterType="DemolitionDTO">
    /* UnlicensedBuildingManagementRepository.savePartDemolitionDetailCompensation */
        INSERT INTO REMOVE_OWNER_RECOM
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , GMJILNO
               , GMJNAME
               , GMJJGN
               , GMJJUMIN
               , GMJZIP1
               , GMJZIP2
               , GMJSNA
               , GMJJNAME
               , GMJBSILJA
               , GMJIGU
               , GMJBSGUM
               , GMJJBILJA
               , GMJJBPH
               , BIDAK
               , ISSUEORGKEY
               , GMBILJA
               , GMBSDONG
               , GMBFOORS
               , GMBGUNP
               , GMBMJUK
               , GMBTOJIMJ
               , GMBTOJIMJUK
               , GMBSAU
               , GMBDEGB
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , REGIST_ID
               )
        VALUES ( #{gmskk}
               , #{gmdjgb}
               , #{gmseqco}
               , (SELECT NVL(MAX(GMJILNO), 0) + 1 FROM REMOVE_OWNER_RECOM WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
               , #{gmjname, jdbcType=VARCHAR}
               , #{gmjjgn, jdbcType=VARCHAR}
               , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin, jdbcType=VARCHAR}))) FROM dual)
               , #{gmjzip1, jdbcType=VARCHAR}
               , #{gmjzip2, jdbcType=VARCHAR}
               , #{gmjsna, jdbcType=VARCHAR}
               , #{gmjjname, jdbcType=VARCHAR}
               , #{gmjbsilja, jdbcType=VARCHAR}
               , #{gmjigu, jdbcType=VARCHAR}
               , #{gmjbsgum, jdbcType=VARCHAR}
               , #{gmjjbilja, jdbcType=VARCHAR}
               , #{gmjjbph, jdbcType=VARCHAR}
               , #{bidak, jdbcType=VARCHAR}
               , #{issueorgkey, jdbcType=VARCHAR}
               , #{gmbilja, jdbcType=VARCHAR}
               , #{gmbsdong, jdbcType=VARCHAR}
               , #{gmbfoors, jdbcType=VARCHAR}
               , #{gmbgunp, jdbcType=VARCHAR}
               , #{gmbmjuk, jdbcType=VARCHAR}
               , #{gmbtojimj, jdbcType=VARCHAR}
               , #{gmbtojimjuk, jdbcType=VARCHAR}
               , #{gmbsau, jdbcType=VARCHAR}
               , 'C'
               , #{naBjdongNo, jdbcType=VARCHAR}
               , #{naRoadCd, jdbcType=VARCHAR}
               , #{naRoadNm, jdbcType=VARCHAR}
               , #{naMainBun, jdbcType=VARCHAR}
               , #{naSubBun, jdbcType=VARCHAR}
               , #{naEtc, jdbcType=VARCHAR}
               , #{naSigunguCdOwner, jdbcType=VARCHAR}
               , #{newAddr1, jdbcType=VARCHAR}
               , #{newAddr2, jdbcType=VARCHAR}
               , #{userId, jdbcType=VARCHAR}
               )
    </insert>

    <!-- 부분철거신고 상세 화면 조회 - 세입자 현황 추가 -->
    <insert id="savePartDemolitionDetailTenant" parameterType="DemolitionDTO">
    /* UnlicensedBuildingManagementRepository.savePartDemolitionDetailTenant */
        INSERT INTO REMOVE_RENT_INFO
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , SEIPILNO
               , SENAME
               , SEJJGN
               , SEJJUMIN
               , SEBSILJA
               , SEBSGUM
               , SEISGUM
               , SEJAPTILJA
               , SEJIGU
               , SEJAPTNAME
               , SEJDONGHO
               , BIDAK
               , SEBDEGB
               , REGIST_ID
               )
        VALUES (
                 #{gmskk}
               , #{gmdjgb}
               , #{gmseqco}
               , (SELECT NVL(MAX(SEIPILNO), 0) + 1 FROM REMOVE_RENT_INFO WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
               , #{sename, jdbcType=VARCHAR}
               , #{sejjgn, jdbcType=VARCHAR}
               , (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{sejjumin, jdbcType=VARCHAR}))) FROM dual)
               , #{sebsilja, jdbcType=VARCHAR}
               , #{sebsgum, jdbcType=VARCHAR}
               , #{seisgum, jdbcType=VARCHAR}
               , #{sejaptilja, jdbcType=VARCHAR}
               , #{sejigu, jdbcType=VARCHAR}
               , #{sejaptname, jdbcType=VARCHAR}
               , #{sejdongho, jdbcType=VARCHAR}
               , #{sebidak, jdbcType=VARCHAR}
               , 'C'
               , #{userId, jdbcType=VARCHAR}
             )
    </insert>

    <!-- 부분철거신고 상세 화면 조회 - 건물주 보상 현황 삭제 -->
    <delete id="deletePartDemolitionDetailCompensation" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.deletePartDemolitionDetailCompensation */
        DELETE FROM REMOVE_OWNER_RECOM
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND GMJILNO = #{gmjilno}
          AND GMBDEGB = 'C'
    </delete>

    <!-- 부분철거신고 상세 화면 조회 - 세입자 현황 삭제 -->
    <delete id="deletePartDemolitionDetailTenant" parameterType="DemolitionDTO">
        /* UnlicensedBuildingManagementRepository.deletePartDemolitionDetailTenant */
        DELETE FROM REMOVE_RENT_INFO
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND SEIPILNO = #{seipilno}
          AND SEBDEGB = 'C'
    </delete>

    <!-- 철거신고 이력 저장 시작 -->
    <!-- 철거신고 - 철거대장(신고사항) 등록 이력 저장-->
    <update id="insertHisRemoveMasterI1">
        /* UnlicensedBuildingManagementRepository.insertHisRemoveMasterI1 */
        INSERT INTO HIS_REMOVE_MASTER
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , DHBH
               , DHGBH
               , DONGBH
               , DONGGBH
               , DAEJANG
               , GMSKKCD
               , GMBJDCD
               , GMHJDCD
               , GMCSAH
               , GMCBUH
               , GMCJI
               , GMCOH
               , GMGZCD
               , GMGUNP
               , GMFOORS
               , GMYD
               , GMGUNIL
               , TOJIMJ
               , TOJISG
               , TOJIJMG
               , TOJIDP
               , JIGUJDG
               , JIGUGB
               , JIGUUG
               , JIGUDZ
               , GMMJUK
               , TOJIMJUK
               , GMBSDONG
               , DESAU
               , DEILJA
               , ISSUEORGKEY
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , REGIST_ID
               )
          SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , DHBH
               , DHGBH
               , DONGBH
               , DONGGBH
               , DAEJANG
               , GMSKKCD
               , GMBJDCD
               , GMHJDCD
               , GMCSAH
               , GMCBUH
               , GMCJI
               , GMCOH
               , GMGZCD
               , GMGUNP
               , GMFOORS
               , GMYD
               , GMGUNIL
               , TOJIMJ
               , TOJISG
               , TOJIJMG
               , TOJIDP
               , JIGUJDG
               , JIGUGB
               , JIGUUG
               , JIGUDZ
               , GMMJUK
               , TOJIMJUK
               , GMBSDONG
               , DESAU
               , DEILJA
               , ISSUEORGKEY
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , #{userId}
            FROM
                 REMOVE_MASTER
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 철거신고 - 건물주 보상 현황 추가 이력 저장-->
    <update id="insertHisRemoveOwnerI2">
        /* UnlicensedBuildingManagementRepository.insertHisRemoveOwnerI2 */
        INSERT INTO HIS_REMOVE_OWNER_RECOM
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , GMJILNO
               , GMJNAME
               , GMJJGN
               , GMJJUMIN
               , GMJZIP1
               , GMJZIP2
               , GMJSNA
               , GMJJNAME
               , GMJBSILJA
               , GMJIGU
               , GMJBSGUM
               , GMJJBILJA
               , GMJJBPH
               , BIDAK
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , REGIST_ID
        ) SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , GMJILNO
               , GMJNAME
               , GMJJGN
               , GMJJUMIN
               , GMJZIP1
               , GMJZIP2
               , GMJSNA
               , GMJJNAME
               , GMJBSILJA
               , GMJIGU
               , GMJBSGUM
               , GMJJBILJA
               , GMJJBPH
               , BIDAK
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , #{userId}
            FROM
                 REMOVE_OWNER_RECOM
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
             AND GMJILNO = (SELECT MAX(GMJILNO) FROM REMOVE_OWNER_RECOM WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
    </update>

    <!-- 철거신고 - 세입자 현황 추가 이력 저장-->
    <update id="insertHisRemoveRentI3">
        /* UnlicensedBuildingManagementRepository.insertHisRemoveRentI3 */
        INSERT INTO HIS_REMOVE_RENT_INFO
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , SEIPILNO
               , SENAME
               , SEJJGN
               , SEJJUMIN
               , SEBSILJA
               , SEBSGUM
               , SEISGUM
               , SEJAPTILJA
               , SEJIGU
               , SEJAPTNAME
               , SEJDONGHO
               , BIDAK
               , REGIST_ID
        ) SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , SEIPILNO
               , SENAME
               , SEJJGN
               , SEJJUMIN
               , SEBSILJA
               , SEBSGUM
               , SEISGUM
               , SEJAPTILJA
               , SEJIGU
               , SEJAPTNAME
               , SEJDONGHO
               , BIDAK
               , #{userId}
            FROM
                 REMOVE_RENT_INFO
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
             AND SEIPILNO = (SELECT MAX(SEIPILNO) FROM REMOVE_RENT_INFO WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
    </update>

    <!-- 철거신고 - 신고사항 변경 이력 저장-->
    <update id="insertHisRemoveMasterU1">
        /* UnlicensedBuildingManagementRepository.insertHisRemoveMasterU1 */
        INSERT INTO HIS_REMOVE_MASTER
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , DHBH
               , DHGBH
               , DONGBH
               , DONGGBH
               , DAEJANG
               , GMSKKCD
               , GMBJDCD
               , GMHJDCD
               , GMCSAH
               , GMCBUH
               , GMCJI
               , GMCOH
               , GMGZCD
               , GMGUNP
               , GMFOORS
               , GMYD
               , GMGUNIL
               , TOJIMJ
               , TOJISG
               , TOJIJMG
               , TOJIDP
               , JIGUJDG
               , JIGUGB
               , JIGUUG
               , JIGUDZ
               , GMMJUK
               , TOJIMJUK
               , GMBSDONG
               , DESAU
               , DEILJA
               , ISSUEORGKEY
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , REGIST_ID
        ) SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , DHBH
               , DHGBH
               , DONGBH
               , DONGGBH
               , DAEJANG
               , GMSKKCD
               , GMBJDCD
               , GMHJDCD
               , GMCSAH
               , GMCBUH
               , GMCJI
               , GMCOH
               , GMGZCD
               , GMGUNP
               , GMFOORS
               , GMYD
               , GMGUNIL
               , TOJIMJ
               , TOJISG
               , TOJIJMG
               , TOJIDP
               , JIGUJDG
               , JIGUGB
               , JIGUUG
               , JIGUDZ
               , GMMJUK
               , TOJIMJUK
               , GMBSDONG
               , DESAU
               , DEILJA
               , ISSUEORGKEY
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , #{userId}
            FROM
                 REMOVE_MASTER
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 철거신고 - 철거철회 이력 저장 -->
    <update id="insertHisRemoveMaster">
        /* UnlicensedBuildingManagementRepository.insertHisRemoveMaster */
        INSERT INTO HIS_REMOVE_MASTER
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , DHBH
               , DHGBH
               , DONGBH
               , DONGGBH
               , DAEJANG
               , GMSKKCD
               , GMBJDCD
               , GMHJDCD
               , GMCSAH
               , GMCBUH
               , GMCJI
               , GMCOH
               , GMGZCD
               , GMGUNP
               , GMFOORS
               , GMYD
               , GMGUNIL
               , TOJIMJ
               , TOJISG
               , TOJIJMG
               , TOJIDP
               , JIGUJDG
               , JIGUGB
               , JIGUUG
               , JIGUDZ
               , GMMJUK
               , TOJIMJUK
               , GMBSDONG
               , DESAU
               , DEILJA
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , REGIST_ID
        ) SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , DHBH
               , DHGBH
               , DONGBH
               , DONGGBH
               , DAEJANG
               , GMSKKCD
               , GMBJDCD
               , GMHJDCD
               , GMCSAH
               , GMCBUH
               , GMCJI
               , GMCOH
               , GMGZCD
               , GMGUNP
               , GMFOORS
               , GMYD
               , GMGUNIL
               , TOJIMJ
               , TOJISG
               , TOJIJMG
               , TOJIDP
               , JIGUJDG
               , JIGUGB
               , JIGUUG
               , JIGUDZ
               , GMMJUK
               , TOJIMJUK
               , GMBSDONG
               , DESAU
               , DEILJA
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , #{userId}
            FROM
                 REMOVE_MASTER
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 철거신고 - 건물주 보상 현황 삭제 이력 저장 -->
    <update id="insertHisRemoveOwner">
        /* UnlicensedBuildingManagementRepository.insertHisRemoveMaster */
        INSERT INTO HIS_REMOVE_OWNER_RECOM
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , GMJILNO
               , GMJNAME
               , GMJJGN
               , GMJJUMIN
               , GMJZIP1
               , GMJZIP2
               , GMJSNA
               , GMJJNAME
               , GMJBSILJA
               , GMJIGU
               , GMJBSGUM
               , GMJJBILJA
               , GMJJBPH
               , BIDAK
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , REGIST_ID
               )
          SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , GMJILNO
               , GMJNAME
               , GMJJGN
               , GMJJUMIN
               , GMJZIP1
               , GMJZIP2
               , GMJSNA
               , GMJJNAME
               , GMJBSILJA
               , GMJIGU
               , GMJBSGUM
               , GMJJBILJA
               , GMJJBPH
               , BIDAK
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , #{userId}
            FROM
                 REMOVE_OWNER_RECOM
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
             AND GMJILNO = #{gmjilno}
    </update>

    <!-- 철거신고 - 세입자 현황 삭제 이력 저장 -->
    <update id="insertHisRemoveRent">
    /* UnlicensedBuildingManagementRepository.insertHisRemoveRent */
        INSERT INTO HIS_REMOVE_RENT_INFO
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , SEIPILNO
               , SENAME
               , SEJJGN
               , SEJJUMIN
               , SEBSILJA
               , SEBSGUM
               , SEISGUM
               , SEJAPTILJA
               , SEJIGU
               , SEJAPTNAME
               , SEJDONGHO
               , BIDAK
               , REGIST_ID
        ) SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , SEIPILNO
               , SENAME
               , SEJJGN
               , SEJJUMIN
               , SEBSILJA
               , SEBSGUM
               , SEISGUM
               , SEJAPTILJA
               , SEJIGU
               , SEJAPTNAME
               , SEJDONGHO
               , BIDAK
               , #{userId}
            FROM
                 REMOVE_RENT_INFO
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
             AND SEIPILNO = #{seipilno}
    </update>

    <!-- 부분철거신고 상세 화면 조회 - 건물주 보상 현황 추가 - 무허가 대장 수정 -->
    <update id="updateNoperMasterC">
    /* UnlicensedBuildingManagementRepository.updateNoperMasterC */
        UPDATE NOPER_MASTER
           SET UPDATE_ID = #{userId}
             , UPDATE_TS = SYSDATE
             , DEGB = 'C'
         WHERE GMSKK = #{gmskk}
           AND GMDJGB = #{gmdjgb}
           AND GMSEQCO = #{gmseqco}
    </update>

    <!-- 부분철거신고 상세 화면 조회 - 건물주 보상 현황 추가 이력 저장 -->
    <update id="insertHisRemoveOwnerI2Part">
    /* UnlicensedBuildingManagementRepository.insertHisRemoveOwnerI2Part */
        INSERT INTO HIS_REMOVE_OWNER_RECOM
               ( GMSKK
               , GMDJGB
               , GMSEQCO
               , CRDATE
               , GMJILNO
               , GMJNAME
               , GMJJGN
               , GMJJUMIN
               , GMJZIP1
               , GMJZIP2
               , GMJSNA
               , GMJJNAME
               , GMJBSILJA
               , GMJIGU
               , GMJBSGUM
               , GMJJBILJA
               , GMJJBPH
               , BIDAK
               , ISSUEORGKEY
               , GMBILJA
               , GMBSDONG
               , GMBFOORS
               , GMBGUNP
               , GMBMJUK
               , GMBTOJIMJ
               , GMBTOJIMJUK
               , GMBSAU
               , GMBDEGB
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , REGIST_ID
        ) SELECT
                 GMSKK
               , GMDJGB
               , GMSEQCO
               , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
               , GMJILNO
               , GMJNAME
               , GMJJGN
               , GMJJUMIN
               , GMJZIP1
               , GMJZIP2
               , GMJSNA
               , GMJJNAME
               , GMJBSILJA
               , GMJIGU
               , GMJBSGUM
               , GMJJBILJA
               , GMJJBPH
               , BIDAK
               , ISSUEORGKEY
               , GMBILJA
               , GMBSDONG
               , GMBFOORS
               , GMBGUNP
               , GMBMJUK
               , GMBTOJIMJ
               , GMBTOJIMJUK
               , GMBSAU
               , GMBDEGB
               , NA_BJDONG_NO
               , NA_ROAD_CD
               , NA_ROAD_NM
               , NA_MAIN_BUN
               , NA_SUB_BUN
               , NA_ETC
               , NA_SIGUNGU_CD
               , NEW_ADDR1
               , NEW_ADDR2
               , #{userId}
            FROM
                 REMOVE_OWNER_RECOM
           WHERE
                 GMSKK = #{gmskk}
             AND GMDJGB = #{gmdjgb}
             AND GMSEQCO = #{gmseqco}
             AND GMJILNO = (SELECT MAX(GMJILNO) FROM REMOVE_OWNER_RECOM WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
    </update>

    <!-- 부분철거신고 상세 화면 조회 - 세입자 현황 추가 이력 저장 -->
    <update id="insertHisRemoveRentI3Part">
    /* UnlicensedBuildingManagementRepository.insertHisRemoveRentI3Part */
    INSERT INTO HIS_REMOVE_RENT_INFO
           ( GMSKK
           , GMDJGB
           , GMSEQCO
           , CRDATE
           , SEIPILNO
           , SENAME
           , SEJJGN
           , SEJJUMIN
           , SEBSILJA
           , SEBSGUM
           , SEISGUM
           , SEJAPTILJA
           , SEJIGU
           , SEJAPTNAME
           , SEJDONGHO
           , BIDAK
           , SEBDEGB
           , REGIST_ID
    ) SELECT
             GMSKK
           , GMDJGB
           , GMSEQCO
           , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
           , SEIPILNO
           , SENAME
           , SEJJGN
           , SEJJUMIN
           , SEBSILJA
           , SEBSGUM
           , SEISGUM
           , SEJAPTILJA
           , SEJIGU
           , SEJAPTNAME
           , SEJDONGHO
           , BIDAK
           , SEBDEGB
           , #{userId}
        FROM
             REMOVE_RENT_INFO
       WHERE
             GMSKK = #{gmskk}
         AND GMDJGB = #{gmdjgb}
         AND GMSEQCO = #{gmseqco}
         AND SEIPILNO = (SELECT MAX(SEIPILNO) FROM REMOVE_RENT_INFO WHERE GMSKK = #{gmskk} AND GMDJGB = #{gmdjgb} AND GMSEQCO = #{gmseqco})
    </update>

    <!-- 부분철거신고 상세 화면 조회 - 건물주 보상 현황 삭제 이력 저장 -->
    <update id="insertHisRemoveOwnerD2Part">
    /* UnlicensedBuildingManagementRepository.insertHisRemoveOwnerD2Part */
    INSERT INTO HIS_REMOVE_OWNER_RECOM
           ( GMSKK
           , GMDJGB
           , GMSEQCO
           , CRDATE
           , GMJILNO
           , GMJNAME
           , GMJJGN
           , GMJJUMIN
           , GMJZIP1
           , GMJZIP2
           , GMJSNA
           , GMJJNAME
           , GMJBSILJA
           , GMJIGU
           , GMJBSGUM
           , GMJJBILJA
           , GMJJBPH
           , BIDAK
           , GMBILJA
           , GMBSDONG
           , GMBFOORS
           , GMBGUNP
           , GMBMJUK
           , GMBTOJIMJ
           , GMBTOJIMJUK
           , GMBSAU
           , GMBDEGB
           , NA_BJDONG_NO
           , NA_ROAD_CD
           , NA_ROAD_NM
           , NA_MAIN_BUN
           , NA_SUB_BUN
           , NA_ETC
           , NA_SIGUNGU_CD
           , NEW_ADDR1
           , NEW_ADDR2
           , REGIST_ID
    ) SELECT
             GMSKK
           , GMDJGB
           , GMSEQCO
           , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
           , GMJILNO
           , GMJNAME
           , GMJJGN
           /*, GMJJUMIN*/
           , GMJJUMIN
           , GMJZIP1
           , GMJZIP2
           , GMJSNA
           , GMJJNAME
           , GMJBSILJA
           , GMJIGU
           , GMJBSGUM
           , GMJJBILJA
           , GMJJBPH
           , BIDAK
           , GMBILJA
           , GMBSDONG
           , GMBFOORS
           , GMBGUNP
           , GMBMJUK
           , GMBTOJIMJ
           , GMBTOJIMJUK
           , GMBSAU
           , GMBDEGB
           , NA_BJDONG_NO
           , NA_ROAD_CD
           , NA_ROAD_NM
           , NA_MAIN_BUN
           , NA_SUB_BUN
           , NA_ETC
           , NA_SIGUNGU_CD
           , NEW_ADDR1
           , NEW_ADDR2
           , #{userId}
        FROM
             REMOVE_OWNER_RECOM
       WHERE
             GMSKK = #{gmskk}
         AND GMDJGB = #{gmdjgb}
         AND GMSEQCO = #{gmseqco}
         AND GMJILNO = #{gmjilno}
         AND GMBDEGB = 'C'
    </update>

    <!-- 부분철거신고 상세 화면 조회 - 세입자 현황 삭제 이력 저장 -->
    <update id="insertHisRemoveRentD3Part">
    /* UnlicensedBuildingManagementRepository.insertHisRemoveRentD3Part */
    INSERT INTO HIS_REMOVE_RENT_INFO
           ( GMSKK
           , GMDJGB
           , GMSEQCO
           , CRDATE
           , SEIPILNO
           , SENAME
           , SEJJGN
           , SEJJUMIN
           , SEBSILJA
           , SEBSGUM
           , SEISGUM
           , SEJAPTILJA
           , SEJIGU
           , SEJAPTNAME
           , SEJDONGHO
           , BIDAK
           , SEBDEGB
           , REGIST_ID
    ) SELECT
             GMSKK
           , GMDJGB
           , GMSEQCO
           , (SELECT TO_CHAR(SYSTIMESTAMP,'YYYYMMDDHH24MISS') FROM DUAL)
           , SEIPILNO
           , SENAME
           , SEJJGN
           , SEJJUMIN
           , SEBSILJA
           , SEBSGUM
           , SEISGUM
           , SEJAPTILJA
           , SEJIGU
           , SEJAPTNAME
           , SEJDONGHO
           , BIDAK
           , SEBDEGB
           , #{userId}
        FROM
             REMOVE_RENT_INFO
       WHERE
             GMSKK = #{gmskk}
         AND GMDJGB = #{gmdjgb}
         AND GMSEQCO = #{gmseqco}
         AND SEIPILNO = #{seipilno}
         AND SEBDEGB = 'C'
    </update>
    <update id="modyOwner">
        UPDATE NOPER_OWNER
        SET   GMJNAME = #{gmjname},
              GMJJGN =  #{gmjjgn},
              GMJJUMIN = (SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(#{gmjjumin}))) FROM dual),
              GMZIP1 = #{gmjzip1},
              GMZIP2 = #{gmjzip2},
              GMJSNA = #{gmjsna},
              GMJJNAME = #{gmjjname},
              NA_BJDONG_NO = #{naBjdongNo},
              NA_ROAD_CD = #{naRoadCd},
              NA_ROAD_NM = #{naRoadNm},
              NA_MAIN_BUN = #{naMainBun},
              NA_SUB_BUN = #{naSubBun},
              NA_ETC = #{naEtc},
              NA_SIGUNGU_CD = #{naSigunguCdOwner},
              NEW_ADDR1 = #{newaddr1},
              NEW_ADDR2 = #{newaddr2},
              UPDATE_ID = #{userId},
              UPDATE_TS = SYSDATE
        WHERE GMSKK = #{gmskk}
          AND GMDJGB = #{gmdjgb}
          AND GMSEQCO = #{gmseqco}
          AND GMJILNO = #{gmjilno}
    </update>
</mapper>
